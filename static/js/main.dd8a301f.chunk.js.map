{"version":3,"sources":["lib/assets/ButtonContent.tsx","lib/assets/GoogleIcon.tsx","lib/utils/SynapseConstants.ts","lib/utils/SynapseClient.ts","lib/containers/Login.tsx","lib/containers/colorPalette.ts","lib/containers/ColorGradient.tsx","lib/utils/modules/rollupCompatibleModules.ts","lib/utils/modules/queryUtils.ts","lib/utils/modules/facetUtils.ts","lib/containers/row_renderers/utils/CardFooter.tsx","lib/containers/row_renderers/utils/ChipContainer.tsx","lib/containers/row_renderers/utils/Icon.tsx","lib/containers/row_renderers/utils/ShowMore.tsx","lib/containers/HeaderCard.tsx","lib/containers/GenericCard.tsx","lib/utils/modules/sqlFunctions.ts","lib/containers/ModalDownload.FormSchema.ts","lib/containers/ModalDownload.tsx","lib/containers/EntityLink.tsx","lib/containers/TotalQueryResults.tsx","lib/containers/getUserData.tsx","lib/containers/UserCardSmall.tsx","lib/containers/UserCardContextMenu.tsx","lib/containers/UserCardLarge.tsx","lib/assets/icons/IconCopy.tsx","lib/containers/UserCardMedium.tsx","lib/containers/UserCard.tsx","lib/containers/SynapseTable.tsx","lib/containers/Facets.tsx","lib/containers/QueryCount.tsx","lib/containers/QueryWrapper.tsx","lib/containers/StackedBarChart.tsx","lib/containers/calculateFriendlyFileSize.tsx","lib/containers/row_renderers/Dataset.tsx","lib/containers/row_renderers/Funder.tsx","lib/containers/row_renderers/Publication.tsx","lib/containers/row_renderers/Study.tsx","lib/containers/row_renderers/Tool.tsx","lib/containers/row_renderers/AMPAD/Consortium.tsx","lib/containers/UserCardList.tsx","lib/containers/CardContainer.tsx","lib/containers/Search.tsx","lib/containers/QueryWrapperMenu.tsx","lib/containers/Uploader.tsx","lib/containers/FileContentDownloadUploadDemo.tsx","lib/containers/StatisticsPlot.tsx","demo/containers/Demo.tsx","demo/containers/playground/QueryWrapperMenuDemo.tsx","lib/containers/CardContainerLogic.tsx","lib/utils/jsonResponses/FileHandleAssociation.ts","lib/containers/widgets/Bookmarks.tsx","lib/containers/widgets/SynapseImage.tsx","lib/containers/widgets/SynapsePlot.tsx","lib/containers/drug_upload_tool/types.ts","lib/containers/MarkdownSynapse.tsx","lib/containers/EntityForm.tsx","lib/containers/drug_upload_tool/Header.tsx","lib/containers/drug_upload_tool/StepsSideNav.tsx","lib/containers/drug_upload_tool/NavButtons.tsx","lib/containers/drug_upload_tool/DataDebug.tsx","lib/containers/drug_upload_tool/SummaryTable.tsx","lib/containers/drug_upload_tool/WarningModal.tsx","lib/containers/drug_upload_tool/DrugUploadForm.tsx","lib/utils/jsonResponses/Forms.ts","lib/containers/drug_upload_tool/DrugUploadTool.tsx","lib/containers/drug_upload_tool/UserFileGrid.tsx","lib/containers/RssFeed.tsx","lib/containers/TwitterFeed.tsx","lib/containers/NewsFeedMenu.tsx","demo/containers/playground/CardContainerLogicDemo.tsx","demo/containers/playground/SearchDemo.tsx","demo/containers/playground/ModalDownloadDemo.tsx","demo/containers/playground/UserCardDemo.tsx","demo/containers/playground/MarkdownSynapseDemo.tsx","demo/containers/playground/NewsFeedDemo.tsx","demo/containers/playground/FormServicesIntegrationDemo.tsx","demo/containers/playground/Playground.tsx","demo/containers/App.tsx","index.tsx","lib/assets/icons/Data2.svg","images/logo.svg","lib/assets/icons/columns.svg","lib/assets/icons/expand.svg","lib/assets/icons/shrink.svg","lib/assets/icons/Publication.svg","lib/assets/icons/study-active.svg","lib/assets/icons/study.svg","lib/assets/icons/study-complete.svg","lib/assets/icons/DNA_Two.svg","lib/assets/icons/ToolClinical.svg","lib/assets/icons/ToolComputational.svg","lib/assets/icons/ToolExperimental.svg","lib/assets/icons/project.svg","lib/assets/logos/ctf.svg","lib/assets/logos/dhart.svg","lib/assets/logos/ntap.svg","lib/assets/icons/AMP_AD/consortia-icons/amp-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/amp-icon.svg","lib/assets/icons/AMP_AD/consortia-icons/move-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/move-icon.svg","lib/assets/icons/AMP_AD/consortia-icons/ModelAD-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/ModelAD-icon.svg","lib/assets/icons/AMP_AD/consortia-icons/resilience-icon-header.svg","lib/assets/icons/AMP_AD/consortia-icons/resilience-icon.svg","lib/assets/icons/json-form-tool-no-submissions.svg","demo/containers/playground/icons/brain.svg","demo/containers/playground/icons/circle.svg","demo/containers/playground/icons/mouse.svg","demo/containers/playground/icons/resiliencead.svg"],"names":["children","style","paddingRight","fontWeight","paddingLeft","icon","paddingTop","paddingBottom","textAlign","width","active","background","borderRadius","height","xmlns","fill","fillRule","d","BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_COUNT","BUNDLE_MASK_QUERY_SELECT_COLUMNS","BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","BUNDLE_MASK_QUERY_COLUMN_MODELS","BUNDLE_MASK_QUERY_FACETS","ENTITY_BUNDLE_MASK_ENTITY","ENTITY_BUNDLE_MASK_ANNOTATIONS","ENTITY_BUNDLE_MASK_PERMISSIONS","ENTITY_BUNDLE_MASK_ENTITY_PATH","ENTITY_BUNDLE_MASK_HAS_CHILDREN","ENTITY_BUNDLE_MASK_ACL","ENTITY_BUNDLE_MASK_FILE_HANDLES","ENTITY_BUNDLE_MASK_TABLE_DATA","ENTITY_BUNDLE_MASK_ROOT_WIKI_ID","ENTITY_BUNDLE_MASK_BENEFACTOR_ACL","ENTITY_BUNDLE_MASK_DOI","ENTITY_BUNDLE_MASK_FILE_NAME","ENTITY_BUNDLE_MASK_THREAD_COUNT","ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION","STUDY","STUDY_ACTIVE","STUDY_COMPLETE","DATASET","AMP_CONSORTIUM","FUNDER","PUBLICATION","TOOL","GENERIC_CARD","COMPUTATIONAL","EXPERIMENTAL","CLINICAL","PROJECT","PAGE_SIZE","SMALL_USER_CARD","MEDIUM_USER_CARD","LARGE_USER_CARD","SEPERATOR","AUTHENTICATED_USERS","_TIME_DELAY","SRC_SIGN_IN_CLASS","IS_OUTSIDE_SYNAPSE_ORG","window","location","hostname","toLowerCase","includes","SESSION_TOKEN_COOKIE_KEY","DEFAULT_ENDPOINT","DEFAULT_SWC_ENDPOINT","AUTH_PROVIDER","SYNAPSE_STORAGE_LOCATION_ID","getRootURL","portString","port","protocol","delay","t","Promise","resolve","setTimeout","bind","fetchWithExponentialTimeout","url","options","delayMs","retries","fetch","then","resp","status","text","parsedJson","JSON","parse","err","console","log","catch","reject","reason","statusText","statusCode","json","error","ok","doPost","requestJsonObject","sessionToken","initCredentials","endpoint","body","stringify","headers","Accept","method","mode","credentials","doGet","doDelete","doPut","putRefreshSessionToken","undefined","getVersion","getDownloadFromTableRequest","request","updateParentState","entityId","requestUrl","token","getAsyncResultFromJobId","getFileHandleById","handleId","getFileHandleByIdURL","urlRequest","jobState","asyncJobStatus","getQueryTableResults","queryBundleRequest","getFullQueryTableResults","a","query","rest","data","queryRequest","limit","maxPageSize","initData","queryCount","queryResult","queryResults","rows","length","currentQueryCount","getData","maxRowsPerPage","queryRequestWithMaxPageSize","offset","postData","push","login","username","password","oAuthUrlRequest","provider","redirectUrl","oAuthSessionRequest","authenticationCode","createEntity","entity","createProject","name","concreteType","getUserProfile","getUserProfileById","ownerId","getUserBundle","id","mask","getGroupHeadersBatch","ids","join","getUserProfiles","list","getEntityChildren","lookupChildEntity","getFiles","getEntity","getEntityHeader","references","updateEntity","deleteEntity","getEntityBundleForVersion","version","partsMask","getEntityWiki","wikiId","getUserFavorites","getUserProjectList","projectDetails","getUserTeamList","getTeamList","fragment","getWikiAttachmentsFromEntity","getWikiAttachmentsFromEvaluation","setSessionTokenCookie","swcEndpoint","setCookie","getSessionTokenFromCookie","getCookie","getPrincipalAliasRequest","alias","type","detectSSOCode","redirectURL","code","URL","href","searchParams","get","synToken","originalUrl","localStorage","getItem","removeItem","replace","errSetSession","signOut","removeCookie","reload","uploadFile","filename","file","fileUploadResolve","fileUploadReject","partSize","Math","max","size","contentType","fileName","fileSizeBytes","partSizeBytes","storageLocationId","calculateMd5","md5","contentMD5Hex","startMultipartUpload","fileBlob","blobSlice","File","prototype","slice","chunks","ceil","currentChunk","spark","SparkMD5","ArrayBuffer","fileReader","FileReader","onload","e","append","result","loadNext","end","info","onerror","warn","start","readAsArrayBuffer","call","processFilePart","partNumber","multipartUploadStatus","clientSidePartsState","uploadId","presignedUploadUrlRequest","partNumbers","presignedUrlUrl","presignedUrlResponse","presignedUrl","partPresignedUrls","uploadPresignedUrl","startByte","endByte","fileSlice","uploadFilePart","addPartUrl","addPartResponse","addPartState","checkUploadComplete","fileHandleName","every","v","newStatus","fileHandleId","resultFileHandleId","partsState","split","map","bit","i","getFileEntityContent","fileEntity","fileHandleAssociationList","associateObjectId","associateObjectType","dataFileHandleId","includeFileHandles","includePreSignedURLs","includePreviewPreSignedURLs","requestedFiles","preSignedURL","fileHandle","getFileHandleContent","content","getFileHandleContentFromID","getFileHandleByIdPromise","getFileHandlePresignedUrlPromis","all","values","contentSize","cache","response","createACL","acl","submitToEvaluation","submission","etag","getEvaluation","evalId","getEvaluationSubmissions","encodeURI","getOAuth2RequestDescription","oidcAuthRequest","getOAuth2Client","clientId","consentToOAuth2Request","createFormGroup","getFormACL","formGroupId","updateFormACL","newAcl","createFormData","newFormData","updateFormData","formDataId","updatedFormData","deleteFormData","submitFormData","listFormData","listFormDataAsFormAdmin","acceptFormData","rejectFormData","formRejection","getProjectStatistics","value","days","expires","date","Date","setTime","getTime","toUTCString","document","cookie","nameEQ","ca","c","charAt","substring","indexOf","Login","props","state","email","errorMessage","hasLoginInFailed","isSignedIn","handleChange","handleLogin","getTokenView","getLoginFailureView","onSignIn","event","target","currentTarget","newState","this","setState","clickEvent","preventDefault","repoEndpoint","SynapseClient","className","setItem","googleRedirectUrl","authUrl","authorizationUrl","theme","googleTheme","onClick","GoogleIcon","key","ButtonContent","marginRight","alt","src","onSubmit","autoComplete","placeholder","onChange","React","COLOR_PALETTE_EVEN","COLOR_PALETTE_ODD","getColorPallette","colorPalleteSelection","textColors","colorPalette","textColor","color","cloneDeep","x","cloneDeepProxy","getNextPageOfData","newData","oldData","hasMoreData","SynapseConstants","getIsValueSelected","isLoading","lastFacetSelection","curFacetSelection","columnName","facetValue","isSelected","selector","SELECT_SINGLE_FACET","readFacetValues","htmlCheckboxes","facet","facetValues","checkbox","checked","newQueryRequest","selectedFacets","specificFacet","find","el","facetColumnValuesRequest","library","add","faLongArrowAltUp","faLongArrowAltDown","URL_REGEX","CardFooter","renderRowValue","textColorClass","isHeader","match","DOI_REGEX","data-search-handle","rel","renderRows","isDesktop","kv","index","hideClass","isShowMoreOn","toggleShowMore","updatePredicate","addEventListener","removeEventListener","innerWidth","secondaryLabelLimit","valuesFiltered","filter","hasMoreValuesThanLimit","Infinity","margin","padding","marginLeft","ChipContainer","chipsFormatted","chips","defaultIcons","PublicationSvg","Data2Svg","studyActiveSvg","studyCompleteSvg","studySvg","DNA_TwoSvg","ToolExperimentalSvg","ToolComputationalSvg","ToolClinicalSvg","projectSvg","Icon","iconOptions","iconSet","datasetIconClass","CHAR_COUNT_CUTOFF","ShowMore","getCutoff","summary","previewText","hiddenText","summarySplit","showMore","meetsCharRequirements","showMoreButton","fontSize","cursor","HeaderCard","title","subTitle","description","iconValue","backgroundColor","borderTop","marginTop","SYNAPSE_REGX","GenericCard","trim","showMoreDescription","createTitleLink","createLabelLink","link","titleLink","schema","linkDisplay","Error","urlParams","URLColumnNames","hasOwnProperty","baseURL","labelLink","urlColumn","genericCardSchema","titleLinkConfig","labelLinkConfig","facetAliases","linkValue","secondaryLabels","matchColumnName","keyValue","showFooter","marginBottom","titleSearchHandle","stubTitleSearchHandle","descriptionSubTitle","GROUP_BY_REGEX","isGroupByInSql","sql","test","generateTokenUsingOperator","literal","operator","usedMatchForLike","insertConditionsFromSearchParams","tokens","lexer","tokenize","foundIndex","findIndex","whereClauseIndex","indexAfterWhereClause","splice","searchParamsLen","Object","keys","forEach","unshift","formatSQLFromParser","synId","newSql","parser","toString","splitString","writeHeaderOption","includeRowIdAndRowVersionOption","csvOption","formSchemaArray","properties","oneOf","const","Contents","items","enum","uniqueItems","formSchemaUIArray","faTimes","ModalDownload","handleSubmit","step","handleDownloadSetup","onDownload","formData","fileType","contents","onClose","separator","downloadFromTableRequest","writeHeader","includeRowIdAndRowVersion","csvTableDescriptor","resultsFileHandleId","role","tabIndex","position","top","right","zIndex","uiSchema","backgroundSize","faLink","faFolder","faFile","faListAlt","faTable","faThList","faArchive","EntityTypeIcon","splitType","iconType","getIconTypeForEntity","EntityLink","entityHeader","TotalQueryResults","total","calculateTotal","prevProps","facets","curFacetsIndex","facetType","curFacets","anyTrue","totalAllFalseCase","totalStandardCase","count","unitDescription","frontText","loader","getUserProfileWithProfilePicAttached","principalIds","withProfilePic","profilePicureFileHandleId","fileHandleList","matchingPersonIndex","clientPreSignedURL","getUserProfileWithProfilePic","userProfile","firstElement","COLORS","getColor","userName","hashedUserName","val","reduce","prevHash","currVal","charCodeAt","abs","hash","faCircle","UserCardSmall","img","hideText","hideTooltip","linkLocation","label","displayName","firstName","lastName","backgroundImage","data-for","data-tip","delayShow","multiline","whiteSpace","UserCardContextMenu","menuActions","aria-labelledby","menuAction","callback","field","listStyle","onKeyPress","UserCardLarge","industry","faEllipsisV","faCopy","svg","viewBox","UserCardMedium","htmlDivRef","copyToClipboard","createElement","setAttribute","left","current","appendChild","select","execCommand","removeChild","showModal","toggleContextMenu","_event","isContextMenuOpen","pageClick","isLarge","hideEmail","disableLink","company","mediumCard","classNames","timeout","enter","exit","ref","IconCopy","outline","fixedWidth","boxShadow","border","UserCard","aliasData","principalId","userProfileAtRender","preSignedURLAtRender","loadingScreen","propsForChild","MIN_SPACE_FACET_MENU","faColumns","faSort","faSortAmountUp","faSortAmountDown","faCheck","faFilter","faDownload","faUsers","faGlobeAmericas","NEXT","PREVIOUS","SELECT_ALL","DOWNLOAD_FILES_MENU_TEXT","ICON_STATE","SORT_STATE","DOWNLOAD_OPTIONS_CONTAINER_CLASS","EXPAND_CLASS","TOOLTIP_DELAY_SHOW","SynapseTable","toggleStateVariables","updatedState","showGroupRowData","selectedRow","queryCopy","getLastQueryRequest","parsed","getSqlUnderlyingDataForRow","queryJSON","encodedQuery","btoa","open","renderDropdownDownloadOptions","isDropdownDownloadOptionsOpen","toggleStateArgs","isExpanded","place","effect","advancedSearch","renderDropdownColumnMenu","isDropdownColumnMenuOpen","addRemoveColClasses","ColumnsSvg","renderDropdownColumnMenuItems","renderTable","pastZero","previous","handlePaginationClick","next","minHeight","createTableHeader","createTableRows","renderTableTop","rgbIndex","ShrinkSvg","ExpandSvg","eventType","currentOffset","executeQueryRequest","handleColumnSortPress","dict","_","columnIconSortState","Array","getLengthOfPropsData","sortedColumnSelection","findSelectionIndex","column","direction","sort","header","isColumnSelected","visibleColumnCount","iconStyle","visibility","maybeShowPrimaryColor","toggleColumnSelection","defaultSelection","lengthOfPropsData","applyChanges","from","querySelectorAll","isAllFilterSelectedForFacet","toggleFilterDropdown","isCurFilterSelected","refOuterDiv","activeFilterClass","parentElement","getBoundingClientRect","activeFilterIndex","isMenuWallOpen","configureFacetDropdown","closeAllDropdowns","isModalDownloadOpen","mapEntityIdToHeader","mapUserIdToHeader","renderFacetSelection","getEntityHeadersInData","getColumnIndiciesWithType","entityIdColumnIndicies","userIdColumnIndicies","distinctEntityIds","getUniqueEntities","distinctUserIds","referenceList","targetId","results","idsWithUserProfiles","isIndividual","mapIdToHeader","indicies","distinctEntities","Set","row","colIndex","columnType","columnsOfTypeEntity","selectColumns","synapseId","showBarChart","Modal","animation","centered","show","onHide","dialogClassName","Header","closeButton","Body","originalSql","indexes","selectIndex","fromIndex","columnIndex","columnReferences","foundFunctionForColumn","toLocaleLowerCase","rowValue","pop","rowsFormatted","entityColumnIndicies","userColumnIndicies","isColumnSelectedLen","countColumnIndexes","getCountFunctionColumnIndexes","rowIndex","rowContent","columnValue","isColumnActiveInitLoad","isColumnActivePastInitLoad","isCountColumn","isBold","renderTableCell","rowFormatted","rowId","usedVisibleColumnCount","initRender","subsequentRender","facetIndex","facetColumnResult","isFacetSelection","isSelectedIconClass","sortSpanBackgoundClass","synTable","facetColumnResults","applyPrimary","classList","isChecked","alignItems","display","listStyleType","facetColumnResultValueCount","displayValue","isValueSelected","faPlus","CheckboxGroup","showAllFacets","isAllFilterSelected","b","facetColumnResultValues","curColor","backgroundClass","childrenView","child","Facets","chartSelectionIndex","showButtons","curFacetsLength","curFacet","showFacetFilter","QueryCount","calculateRowCount","partMask","toLocaleString","QueryWrapper","executeInitialQueryRequest","getInitQueryRequest","initialState","loadNow","loadNowStarted","initQueryRequest","lastQueryRequest","isLoadingNewData","isAllFalse","isAllTrue","isByDefaultSelected","update","childrenWithProps","isQueryWrapperChild","loadingCusrorClass","showMenu","defaultProps","faAngleLeft","faAngleRight","PREVIOUS_ITEM_CLICK","StackedBarChart","handleClick","handleArrowClick","extractPropsData","handleHover","handleExit","getTextForChartSelection","onMeasureResize","rgba2rgb","dimensions","bounds","bottom","xData","facetValueDisplay","filterDisplay","alpha","floor","progressMessage","originalColor","onResize","contentRect","measureRef","obj","rectStyle","rgbColor","svgWidth","tooltipId","numCharsInValue","svgHeight","onMouseEnter","onMouseLeave","textAnchor","fontFamily","y","getFileCount","linkText","item","sufixes","Dataset","handleLinkClick","datasetName","tumorType","diseaseFocus","fundingAgency","fileCount","fileSize","bytes","pow","toFixed","calculateFriendlyFileSize","logoLinks","CTF","ctfSvg","dhartSvg","NTAP","ntapSvg","Funder","organizationName","organizationPath","website","abbreviation","logo","orgPath","origin","websiteDisplayName","showOrgLink","isOnOrgPath","Publication","citation","doi","projectName","Study","hasCreatedIndex","projectLeads","projectStatus","dataStatus","Tool","softwareName","softwareLink","Consortium","getIcon","org","ampIconHeaderSvg","ampIconSvg","moveIconHeaderSvg","moveIconSvg","ModelADIconHeaderSvg","ModelADIconSvg","resilienceIconHeaderSvg","resilienceIconSvg","Program","path","Path","UserCardList","userProfileMap","setA","setB","_difference","elem","delete","priorListOfIds","curListOfIds","difference","internalData","newEntries","firstNameIndex","lastNameIndex","institutionIndex","fauxUserProfilesList","manuallyExtractData","fauxUserProfileIndex","fauxUserProfile","CardContainer","renderCard","handleViewMore","element","cards","showViewMore","showViewMoreButton","userIdColumnIndex","listIds","rowData","propsForCard","faCaretDown","faCaretUp","faSearch","Search","toggleDropdown","isSearchableDropdownOpen","setDropdownIndex","dropdownIndex","highlightText","submittedSearchText","searchable","isQueryWrapperMenuChild","searchItem","span","outerHTML","innerText","searchItemView","querySelector","SEARCH_CLASS_CSS","textElement","innerHTML","regex","RegExp","search","searchText","lastQueryRequestDeepCopy","addEscapeCharacters","searchableItem","fieldStyle","liStyle","curFacetDisplayText","usedUnitDescription","flex","justifyContent","hintText","escapedSearchText","QueryWrapperMenu","handleHoverLogic","contains","tagName","switchFacet","menuIndexIn","accordionIndexIn","activeMenuIndices","isClickingCurrentSelection","accordionGroupIndex","toggleGroupAccordionIndex","accordionGroupIndexIn","accordionConfig","indexFromURLOrDefaultZero","Number","menuIndex","getUnitDescription","getPartMask","getSelectedFacets","getTableLoadingScreen","_prevState","stackedBarChartConfiguration","menuConfig","hasGroupByInSql","menuDropdown","renderMenuDropdown","queryWrapper","renderQueryChildren","queryConfig","groupIndex","isConsistent","cardConfiguration","tableConfiguration","searchConfiguration","menuIndexFromProps","config","showSearch","aliasedFacet","searchClass","tableLoadingScreen","isAccordionConfigDefined","renderQueryChild","isActive","primaryColor","indicatorClasses","borderTopColor","hoverEnter","hoverLeave","component","appear","renderFacetMenu","curLevel","defaultColor","searchIconStyle","opacity","isSearchConfig","selectedStyling","borderLeftColor","infoEnter","infoLeave","facetDisplayValue","Uploader","inputOpenFileRef","showOpenFileDlg","click","files","handleFilesChanged","finishedProcessingOneFile","incrementedFilesUploadedCount","filesUploadedCount","isStillUploading","totalFilesToUploadCount","isUploading","successfullyUploaded","handleUploadError","selectorFiles","newFileEntity","parentId","parentContainerId","entityLookupRequest","entityName","existingEntity","updateEntityFile","fileUploadComplete","isCreate","multiple","FileContentDownloadUploadDemo","updateFileContent","targetEntity","fileContent","newFileContent","Blob","handleContentChange","targetEntityId","Plot","createPlotlyComponent","Plotly","StatisticsPlot","fetchPlotlyData","isLoaded","plotData","getTrace","traceName","stats","orientation","trace","statPoint","month","rangeStart","filesCount","showPlot","xtitle","ytitle","isHorizontal","xaxistype","showlegend","layout","barmode","xaxis","yaxis","traces","fileDownloads","months","fileUploads","Demo","entityFormRef","showMarkdown","showTabOne","tabOne","tabTwo","removeHandler","submitForm","userFormDataSynId","objectId","QueryWrapperMenuDemo","experimentalSql","computationalSql","activeTab","tabThree","grant","CardContainerLogic","defaultState","sqlUsed","sqlOperator","queryRequestWithoutCount","totalResultsNoFacet","FileHandleAssociateType","Bookmarks","renderBookmarks","matchedGroup","copyFootnotes","String","footnotes","output","exec","isBeforeLastElement","dangerouslySetInnerHTML","__html","SynapseImage","getSynapseFiles","FileEntity","fileResults","WikiAttachment","params","align","alignLowerCase","StepStateEnum","NavActionEnum","StatusEnum","SynapsePlot","queryData","widgetparamsMapped","horizontal","j","rowValues","TOC_CLASS","1","2","3","4","5","6","md","markdownit","html","MarkdownSynapse","markupRef","markdownitSynapse","init_markdown_it","markdownitSub","markdownitSup","markdownitCentertext","markdownitSynapseHeading","markdownitSynapseTable","markdownitStrikethroughAlt","markdownitContainer","markdownitEmphasisAlt","markdownitInlineComments","markdownitBr","use","markdownitMath","markdown","fileHandles","handleLinkClicks","processWidgets","processWidgetOrDomElement","processMath","getWikiAttachments","getWikiPageMarkdown","renderWidget","renderSynapseButton","renderSynapseImage","renderSynapsePlot","renderSynapseTOC","getErrorView","createHTML","addBookmarks","addIdsToReferenceWidgets","addIdsToTocWidgets","genericElement","anchor","referenceNumber","goTo","scrollIntoView","behavior","block","inline","getAttribute","idOfContent","initText","render","sanitizeHtml","allowedAttributes","button","div","h1","h2","h3","h4","h5","h6","li","ol","table","th","thead","ul","allowedTags","katex","textContent","delimiters","throwOnError","resetFootnotes","footnotesHtml","wikiPage","errorMessageView","ErrorView","referenceCount","tocIdCount","curTocId","markup","widgets","xml","escapedOneToXmlSpecialMap","str","widgetMatch","originalMarkup","widgetParamsMatchWithXML","widgetParamsString","decodeXml","questionIndex","widgetType","keyPair","decodeURIComponent","widgetsToBe","processWidgetMappings","reactKey","renderUserBadge","buttonClasses","highlight","elements","p1","p2","p3","p4","data-anchor","bodyText","isSubmitted","StepsSideNav","nonChildSteps","stepList","isExcluded","isStatic","isSubmit","iconDef","flip","faBan","COMPLETED","faCheckCircle","ERROR","faExclamationCircle","getItemClass","isInProgress","liClassName","getListItem","isWizard","isRenderChild","renderStepName","inProgress","final","excluded","static","itemClass","onStepChange","isWizardMode","stepChildId","childStep","NavButtons","previousButton","previousStepIds","steps","currentStep","canGoBack","onNavAction","faChevronLeft","nextButton","faChevronRight","saveButton","disabled","isFormSubmitted","SAVE","NextStepLink","nextStep","nextStepId","DataDebug","myData","hidden","SummaryTable","flatFormData","flatData","flatten","object","flattenedObject","prefix","isArray","isString","isObject","isDate","boundary","screen","order","getFlatData","prevScreenId","line","WarningModal","onCancel","Title","copy","Footer","variant","onOK","callbackArgs","confirmCopy","DrugUploadForm","excludeWarningText","excludeWarningHeader","unsavedDataWarning","formRef","navAction","NONE","onUnload","ev","hasUnsavedChanges","returnValue","setupBeforeUnloadListener","getSchema","pick","getNextStepId","rules","default","engine","Engine","run","events","moveStep","isError","previousStack","errorSchema","isMoveForwardInWizardMode","currentStepState","TODO","set","included","saveStepState","hasValidated","doShowErrors","goPrevious","previousStepId","isSubmitScreen","currentIndex","isUndefined","triggerAction","onSave","submit","triggerStepChange","GO_TO_STEP","onError","args","VALIDATE","modifiedSteps","setStepStatusForFailedValidation","errors","currentSchemaProperties","stepsWithError","trimStart","property","stepsInCurrentSchema","performAction","showExcludeStateWarningModal","stepId","isUpdateFlattenedData","modalContext","action","toggleExcludeStep","arguments","isExclude","prevState","stp","formDataUpdated","renderNotification","SAVE_SUCCESS","SUBMIT_SUCCESS","PROGRESS","renderTextForStaticScreen","renderOptionalFormSubheader","renderHelpToggle","showHelp","callbackFn","checkedIcon","uncheckedIcon","offColor","transformErrors","SUBMIT","parentPath","lastIndexOf","remove","renderErrorListTemplate","currentLis","propPath","propArr","labelFromSchema","regLabelFromUi","arrayLabelFromUi","definitions","message","renderTransformedErrorObject","stringToElementForProp","srcObject","some","k","navSchema","doShowHelp","shouldUpdate","callbackStatus","isSuccess","history","back","firstStepId","defs","isEqual","hasError","when","formTitle","liveValidate","handleOnChange","form","showErrorList","ErrorList","screenId","formClass","DrugUploadTool","getFileEntityData","entityContent","versionNumber","newError","promises","formSchemaEntityId","formUiSchemaEntityId","formNavSchemaEntityId","configData","fileData","metadata","formSchemaVersion","uiSchemaVersion","navSchemaVersion","formSchema","formUiSchema","formNavSchema","finishedProcessing","notification","saveToFile","createOrUpdateFormDataFile","fileContentsBlob","newFileHandleId","fileNamePath","isReadyToDisplayForm","ERROR_CRITICAL","renderLoader","dismissible","Heading","renderUnauthenticatedView","submitted","UserFileGrid","modalTitle","listingText","subhead","noRecords","modalCopy","getTypeFileListing","nextPageToken","groupId","cleanUpName","filterByState","fileList","page","getMore","fileListType","statusList","requestFilter","SUBMITTED","IN_PROGRESS","getUserFileListing","deleteFile","setModalConfirmationState","renderLoading","renderSubmissionsTable","pathpart","textSource","tableTitleRow","viewMore","dataFileRecord","moment","modifiedOn","calendar","aria-label","faTrash","aria-hidden","submissionStatus","isShowInfoModal","faPhone","renderSubmissionsTables","NoSubmissionsIcon","refresh","itemNoun","WAITING_FOR_SUBMISSION","SUBMITTED_WAITING_FOR_REVIEW","ACCEPTED","REJECTED","rssParser","require","DOMParser","RssFeed","onToggleReadMore","itemId","feedItemContentDiv","getElementById","itemId2MoreItem","isShow","foundMoreItem","newText","newIcon","onClickShowMoreItems","isShowingMoreItems","rssFeed","isLoadingError","responseData","parseString","rss","parsedHtml","parseFromString","bodyElement","moreElement","foundMoreElement","isItemVisible","defaultItemsToShow","showMoreText","showMoreIcon","guid","documentElement","TwitterFeed","twttr","load","data-height","data-theme","NewsFeedMenu","switchFeed","renderMenu","feedName","feedDescription","feedUrl","mailChimpUrl","twitterFeedUrl","mailChimpListName","CardContainerLogicDemo","circleSvg","brainSvg","mouseSvg","resilienceadSvg","SearchDemo","commonCardProps","contributor","diagnosis","ModalDownloadDemo","onOpen","UserBadgeSmallDemo","profiles","_el","MarkdownSynapseDemo","markdownPropsArray","NewsFeedDemo","FormServicesIntegrationDemo","listMyFormData","formGroup","myFormDataList","listFormAdminFormData","formAdminFormDataList","onReadFormDataFileHandleContents","onCreateFormGroup","onCreateFormData","onUpdateFormData","onSubmitFormData","TokenContext","Consumer","rejectionMessage","App","to","exact","signedInState","notSignedInState","Provider","basename","process","logoSvg","renderLoginAndSignout","Playground","searchParamsProps","URLSearchParams","ReactDOM","module","exports"],"mappings":"gtMAEe,cAAwD,IAArDA,EAAoD,EAApDA,SACVC,EAA8B,CAClCC,aAAc,GACdC,WAAY,IACZC,YAJkE,EAA1CC,KAIJ,EAAI,GACxBC,WAAY,GACZC,cAAe,GACfC,UAAW,SACXC,MAAO,QAET,OACE,wBACER,MAAOA,GAEND,ICdQ,kBAAGU,EAAH,EAAGA,OAAH,OACb,uBACET,MAAO,CACLU,WAAYD,EAAS,OAAS,OAC9BJ,WAAY,EACZJ,aAAa,GACbK,cAAc,EACdH,YAAY,GACZQ,aAAc,IAEhB,uBAAKH,MAAM,KAAKI,OAAO,KAAKC,MAAM,8BAChC,qBAAGC,KAAK,OAAOC,SAAS,WACtB,wBAEEC,EAAE,gIACFF,KAAK,YAEP,wBAEEE,EAAE,kHACFF,KAAK,YAEP,wBAEEE,EAAE,4HACFF,KAAK,YAEP,wBAEEE,EAAE,8HACFF,KAAK,YAEP,wBAAMA,KAAK,OAAOE,EAAE,sBC/BfC,EAAoC,EACpCC,EAAkC,EAClCC,EAA2C,EAC3CC,EAA8C,EAC9CC,EAA0C,GAC1CC,EAAmC,GAEnCC,EAAoC,EACpCC,EAAyC,EACzCC,EAAyC,EACzCC,EAAyC,EACzCC,EAA0C,GAC1CC,EAAiC,GACjCC,EAA0C,KAC1CC,EAAwC,KACxCC,EAA0C,KAC1CC,EAA4C,MAC5CC,EAAiC,MACjCC,EAAuC,MACvCC,EAA0C,OAC1CC,EAAqD,OAErDC,EAAgB,QAEhBC,EAAuB,eACvBC,EAAyB,iBACzBC,EAAkB,UAClBC,EAAyB,iBACzBC,EAAiB,SACjBC,EAAsB,cACtBC,EAAe,OACfC,EAAuB,eACvBC,EAAwB,gBACxBC,EAAuB,eACvBC,EAAmB,WACnBC,EAAkB,UAClBC,EAAoB,GAEpBC,EAAgC,kBAChCC,GAAiC,mBACjCC,GAAgC,kBAChCC,GAAY,YACZC,GAAsB,sBAEtBC,GAAc,GACdC,GAAoB,oB,goBCV1B,IAAMC,IAAyBC,OAAOC,SAASC,SAASC,cAAcC,SAAS,gBACzEC,GAA2B,gDAC3BC,GAA2B,uCAC3BC,GAAuB,2BAGvBC,GAAgB,mBAEhBC,GAA8B,EAC9BC,GAAa,WACxB,IAAMC,EAAaX,OAAOC,SAASW,KAAhB,WAA2BZ,OAAOC,SAASW,MAAS,GACvE,MAAM,GAAN,OAAUZ,OAAOC,SAASY,SAA1B,aAAuCb,OAAOC,SAASC,UAAvD,OAAkES,EAAlE,MAGK,SAASG,GAAMC,GACpB,OAAO,IAAIC,SAAQ,SAACC,GAClBC,WAAWD,EAAQE,KAAK,KAAM,IAAKJ,MAsBvC,IAAMK,GAA8B,SAA9BA,EAAkCC,EAAaC,EAAcC,EAAcC,GAC/E,OAAOC,MAAMJ,EAAKC,GACfI,MAAK,SAACC,GACL,OAAIA,EAAKC,OAAS,KAAOD,EAAKC,OAAS,IACjB,MAAhBD,EAAKC,OAEAD,EAGQA,EA3BPE,OACfH,MAAK,SAACG,GACL,IAAIC,EAAa,GACjB,IACEA,EAAaC,KAAKC,MAAMH,GACxB,MAAOI,GACPC,QAAQC,IAAI,sCAAuCF,GACnDH,EAAaD,EAEf,OAAOC,GAA0B,MAChCM,OAED,SAACH,GAEC,OADAC,QAAQC,IAAI,0CAA2CF,GAChD,MAea,MAAhBN,EAAKC,QAAkC,IAAhBD,EAAKC,OAEd,IAAZJ,EACKR,QAAQqB,OAAO,CACpBC,OAAQX,EAAKY,WACbC,WAAYb,EAAKC,SAGdd,GAAMS,GAASG,MAAK,WACzB,OAAON,EAA4BC,EAAKC,EAAmB,EAAVC,EAAaC,EAAU,MAIrEG,EACJc,OACAf,MAAK,SAACe,GAGL,IAAMC,EAAQ,CACZJ,OAAQG,EAAKH,OACbV,OAAQD,EAAKC,QAEf,OAAOD,EAAKgB,GAAKF,EAAOzB,QAAQqB,OAAOK,MAExCN,OAAM,SAACM,GAEN,OAAIA,EAAMJ,QAAUI,EAAMd,OAIjBZ,QAAQqB,OAAO,CACpBC,OAAQI,EAAMJ,OACdE,WAAYE,EAAMd,SAGfZ,QAAQqB,OAAO,CACpBC,OAAQX,EAAKY,WACbC,WAAYb,EAAKC,eAIxBQ,OAAM,SAACM,GAEN,OAAO1B,QAAQqB,OAAOK,OAIfE,GAAS,SACpBvB,EACAwB,EACAC,EACAC,EACAC,GAEA,IAAM1B,EAAe,CACnB2B,KAAMlB,KAAKmB,UAAUL,GACrBM,QAAS,CACPC,OAAQ,MACR,iCAAkC,eAClC,eAAgB,oBAElBC,OAAQ,OACRC,KAAM,OACNC,YAAaR,GAQf,OANIA,IACFzB,EAAQiC,YAAcR,GAEpBD,IACFxB,EAAQ6B,QAAQL,aAAeA,GAE1B1B,GAA4B4B,EAAW3B,EAAKC,EAAS,IAAM,IAEvDkC,GAAQ,SACCnC,EACAyB,EACAC,EACAC,GACpB,IAAM1B,EAAe,CACnB6B,QAAS,CACPC,OAAQ,MACR,iCAAkC,gBAEpCC,OAAQ,MACRC,KAAM,QAQR,OANIP,IACFzB,EAAQiC,YAAcR,GAEpBD,IACFxB,EAAQ6B,QAAQL,aAAeA,GAE1B1B,GAA+B4B,EAAW3B,EAAKC,EAAS,IAAM,IAG1DmC,GAAW,SACtBpC,EACAyB,EACAC,EACAC,GACA,IAAM1B,EAAe,CACnB6B,QAAS,CACPC,OAAQ,MACR,iCAAkC,gBAEpCC,OAAQ,SACRC,KAAM,OACNC,YAAaR,GAQf,OANIA,IACFzB,EAAQiC,YAAcR,GAEpBD,IACFxB,EAAQ6B,QAAQL,aAAeA,GAE1B1B,GAA4B4B,EAAW3B,EAAKC,EAAS,IAAM,IAGvDoC,GAAQ,SACnBrC,EACAwB,EACAC,EACAC,EACAC,GAEA,IAAM1B,EAAe,CACnB2B,KAAMlB,KAAKmB,UAAUL,GACrBM,QAAS,CACPC,OAAQ,MACR,iCAAkC,eAClC,eAAgB,oBAElBC,OAAQ,MACRC,KAAM,QAQR,OANIP,IACFzB,EAAQiC,YAAcR,GAEpBD,IACFxB,EAAQ6B,QAAQL,aAAeA,GAE1B1B,GAA4B4B,EAAW3B,EAAKC,EAAS,IAAM,IAGvDqC,GAAyB,SAACb,GAA+D,IAAzCE,EAAwC,uDAArB1C,GAC9E,OAAOoD,GAAM,mBAAoB,CAAEZ,qBAAgBc,OAAWA,EAAWZ,IAG9Da,GAAa,WAAmE,IAAlEb,EAAiE,uDAA9C1C,GAC5C,OAAOkD,GAAsB,wBAAoBI,OAAWA,EAAWZ,IAM5Dc,GAA8B,SACzCC,GAII,IAHJjB,EAGG,4DAHgCc,EACnCZ,EAEG,uDAFgB1C,GACnB0D,EACG,uCACH,OAAOpB,GAAO,mBAAD,OAAoBmB,EAAQE,SAA5B,mCAAuEF,EAASjB,OAAcc,EAAWZ,GACrHtB,MAAK,SAACC,GACL,IAAMuC,EAAU,0BAAsBH,EAAQE,SAA9B,yCAAuEtC,EAAKwC,OAC5F,OAAOC,GAAiDF,EAAYpB,EAAcE,EAAUgB,MAE7F5B,OAAM,SAACM,GACN,MAAMA,MAUG2B,GAAoB,SAC/BC,GAGyB,IAFzBxB,EAEwB,4DAFWc,EACnCZ,EACwB,uDADL1C,GAEnB,OAAOkD,GAAK,6BAAmCc,GAAYxB,OAAcc,EAAWZ,IAOzEuB,GAAuB,SAClCD,GAGI,IAFJxB,EAEG,4DAFgCc,EACnCZ,EACG,uDADgB1C,GAGnB,OAAOkD,GAAK,6BAA+Bc,EAA/B,uBAA8DxB,OAAcc,EAAWZ,IAGxFoB,GAA0B,SAA1BA,EACXI,GAIgB,IAHhB1B,EAGe,4DAHoBc,EACnCZ,EAEe,uDAFI1C,GACnB0D,EACe,uCACf,OAAOR,GAAMgB,EAAY1B,OAAcc,EAAWZ,GACjDtB,MAAK,SAACC,GAEL,OAAIA,EAAK8C,UAA8B,WAAlB9C,EAAK8C,UACxBT,GAAqBA,EAAkB,CACrCU,eAAgB/C,IAGXb,GAAM,KAAKY,MAAK,WACrB,OAAO0C,EAA2BI,EAAY1B,EAAcE,EAAUgB,OAInErC,KAERS,OAAM,SAACM,GACN,MAAMA,MAUGiC,GAAuB,SAClCC,GAIgC,IAHhC9B,EAG+B,4DAHIc,EACnCI,EAE+B,uCAD/BhB,EAC+B,uDADZ1C,GAEnB,OAAOsC,GAAO,mBAAD,OAAoBgC,EAAmBX,SAAvC,4BAA2EW,EAAoB9B,OAAcc,EAAWZ,GACpItB,MAAK,SAACC,GACL,OAAOyC,GAAuB,0BAAuCQ,EAAmBX,SAA1D,kCAA4FtC,EAAKwC,OAASrB,EAAcE,EAAUgB,MAEjK5B,OAAM,SAACM,GACN,MAAMA,MAoBGmC,GAAwB,yCAAG,WAAOD,GAAP,sCAAAE,EAAA,6DACOhC,EADP,oCAC0Cc,EAGxEmB,EAAmBH,EAAnBG,MAAUC,EAJoB,aAIXJ,EAJW,WAKlCK,EAAY,GAEVC,EAPgC,MAQjCF,EARiC,CASpCD,MAAM,GAAD,GAAOA,EAAP,CAAcI,MAHjBC,EAAsB,QANY,SAchCT,GAAqBO,EAAcpC,GAAcpB,KAAjD,yCACJ,WAAO2D,GAAP,oBAAAP,EAAA,6DACMQ,EAAkBD,EAASE,YAAYC,aAAaC,KAAKC,OACzDC,EAA4BL,EAChCL,EAAOI,EAGDO,EANR,iCAAAd,EAAA,MAMkB,6BAAAA,EAAA,yDACVQ,IAAeF,EADL,uBAEZA,EAAcC,EAASQ,eACjBC,EAHM,MAIPd,EAJO,CAKVD,MAAM,GAAD,GAAOA,EAAP,CAAcI,MAAOC,EAAaW,OAAQJ,MALrC,SAONhB,GAAqBmB,EAA6BhD,GACrDpB,MAAK,SAACsE,GAEgB,IAAD,GADpBV,GAAcU,EAAST,YAAYC,aAAaC,KAAKC,QACpC,IACfC,GAAqBL,GACrB,EAAAL,EAAKM,YAAYC,aAAaC,MAAKQ,KAAnC,qBACKD,EAAST,YAAYC,aAAaC,QAGzC,OAAOG,OAERxD,OAAM,SAACH,GACNC,QAAQC,IAAI,kCAAmCF,MAnBvC,sDAuBLgD,GAvBK,2CANlB,uEAgCSW,KAhCT,2CADI,uDAdgC,gCAiD/BX,GAjD+B,2CAAH,sDAyDxBiB,GAAQ,SAACC,EAAkBC,GAAmD,IAAjCpD,EAAgC,uDAArB1C,GACnE,OAAOsC,GAAO,iBAAkB,CAAEuD,WAAUC,iBAAYxC,OAAWA,EAAWZ,IASrEqD,GAAkB,SAACC,EAAkBC,GAAsD,IAAjCvD,EAAgC,uDAArB1C,GAC9E,OAAOsC,GAAO,0BAA2B,CAAE0D,WAAUC,oBAAe3C,OAAWA,EAAWZ,IAUjFwD,GAAsB,SAACF,EACAG,EACAF,GACsC,IAAtCvD,EAAqC,uDAArB1C,GAChD,OAAOsC,GACL,0BACA,CAAE0D,WAAUG,qBAAoBF,oBAAe3C,OAAWA,EAAWZ,IAM5D0D,GAAe,SAACC,EAAa7D,GAA2E,IAAzCE,EAAwC,uDAArB1C,GAC7F,OAAOsC,GAAO,kBAAmB+D,EAAQ7D,OAAcc,EAAWZ,IAMvD4D,GAAgB,SAACC,EACA/D,GAEwB,IADxBE,EACuB,uDADJ1C,GAE/C,OAAOoG,GACL,CACEG,OACAC,aAAc,0CAEhBhE,EACAE,IAQS+D,GAAiB,SAACjE,GAAmE,IAAjCE,EAAgC,uDAArB1C,GAC1E,OAAOkD,GAAmB,uBAAwBV,OAAcc,EAAWZ,IAOhEgE,GAAqB,SAChClE,EAAkCmE,GAAkD,IAAjCjE,EAAgC,uDAArB1C,GAC9D,OAAOkD,GAAK,+BAAsCyD,GAAWnE,OAAcc,EAAWZ,IAO3EkE,GAAgB,SAC3BC,EAAYC,EAActE,GACD,IADmCE,EACpC,uDAD+C1C,GAEvE,OAAOkD,GAAK,uBAA6B2D,EAA7B,wBAA+CC,GAAQtE,OAAcc,EAAWZ,IAOjFqE,GAAuB,SAClCC,EAAgBxE,GAC0B,IADQE,EACT,uDADoB1C,GAE7D,OAAOkD,GAAK,6CAAoE8D,EAAIC,KAAK,MAAQzE,OAAcc,EAAWZ,IAQ/GwE,GACX,SACEC,GAG8B,IAF9B3E,EAE6B,4DAFMc,EACnCZ,EAC6B,uDADV1C,GAEnB,OAAOsC,GAAO,uBAAwB,CAAE6E,QAAQ3E,OAAcc,EAAWZ,IAOhE0E,GAAoB,SAAC3D,GAEyC,IADzCjB,EACwC,4DADLc,EACnCZ,EAAwC,uDAArB1C,GACnD,OAAOsC,GAAO,2BAA4BmB,EAASjB,OAAcc,EAAWZ,IAMjE2E,GAAoB,SAC/B5D,GAEyC,IADzCjB,EACwC,4DADLc,EACnCZ,EAAwC,uDAArB1C,GACnB,OAAOsC,GAAO,wBAAyBmB,EAASjB,OAAcc,EAAWZ,IAO9D4E,GAAW,SAAC7D,GAEmE,IADnEjB,EACkE,4DAD/Bc,EACnCZ,EAAkE,uDAA/C1C,GAC1C,OAAOsC,GAAO,4BAA6BmB,EAASjB,OAAcc,EAAWZ,IAWlE6E,GAAuB,WAE+B,IAF3B/E,EAE0B,4DAFSc,EACjDK,EACwC,uCAAxCjB,EAAwC,uDAArB1C,GACrCe,EAAG,0BAAsB4C,GAC/B,OAAOT,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAQhC8E,GAAkB,SAACC,GAEW,IADzCjF,EACwC,4DADLc,EACnCZ,EAAwC,uDAArB1C,GACnB,OAAOsC,GAAO,wBAAyB,CAAEmF,cAAcjF,OAAcc,EAAWZ,IAGrEgF,GAAe,SAC1BrB,GAEkD,IADlD7D,EACiD,4DADdc,EACnCZ,EAAiD,uDAAtC1C,GACLe,EAAG,0BAAsBsF,EAAOQ,IACtC,OAAOzD,GAAMrC,EAAKsF,EAAQ7D,OAAcc,EAAWZ,IAGxCiF,GAA0B,WAEI,IAFAnF,EAED,4DAFoCc,EAC5EK,EACwC,uCAAxCjB,EAAwC,uDAArB1C,GACbe,EAAG,0BAAsB4C,GAC/B,OAAOR,GAASpC,EAAKyB,OAAcc,EAAWZ,IAUnCkF,GAA4B,SACvCjE,EACAkE,EACAC,GAGI,IAFJtF,EAEG,4DAFgCc,EACnCZ,EACG,uDADQ1C,GAEPe,EAAG,0BAAsB4C,GAK7B,OAJIkE,IACF9G,GAAG,sBAAmB8G,IAExB9G,GAAG,wBAAqB+G,GACjB5E,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAMhCqF,GAAgB,SAACvF,EACAmE,EACAqB,GACyC,IAAzCtF,EAAwC,uDAArB1C,GACzCe,EAAG,0BAAsB4F,EAAtB,iBAAsCqB,GAC/C,OAAO9E,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAOhCuF,GAAmB,SAACzF,GAAmE,IAAjCE,EAAgC,uDAArB1C,GACtEe,EAAM,sCACZ,OAAOmC,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAMhCwF,GAAqB,SAAC1F,EACA2F,GACiC,IAAjCzF,EAAgC,uDAArB1C,GACtCe,EAAG,2BAAuBoH,EAAvB,uBACT,OAAOjF,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAOhC0F,GAAkB,SAAC5F,EAAkCqE,GAAsD,IAAjCnE,EAAgC,uDAArB1C,GAC1Fe,EAAG,uBAAmB8F,EAAnB,4BACT,OAAO3D,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAWhC2F,GAAc,SACzB7F,EACAqE,GAKI,IAJJyB,EAIG,uDAJgB,GACnBzD,EAGG,uDAHa,GAChBY,EAEG,uDAFc,EACjB/C,EACG,uDADgB1C,GAEbe,EAAG,8BAA0B8F,EAA1B,kBAAsChC,EAAtC,mBAAsDY,GAAtD,OAA+D6C,EAAQ,oBAAgBA,GAAa,IAC7G,OAAOpF,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAGhC6F,GACT,SACE/F,EACAqE,EACAmB,GACqE,IAArEtF,EAAoE,uDAAjD1C,GACbe,EAAG,yBAAqB8F,EAArB,iBAAgCmB,EAAhC,sBACT,OAAO9E,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAEpC8F,GAAmC,SAAChG,EACAqE,EACAmB,GACyC,IAAzCtF,EAAwC,uDAArB1C,GAC5De,EAAG,6BAAyB8F,EAAzB,iBAAoCmB,EAApC,sBACT,OAAO9E,GAAMnC,EAAKyB,OAAcc,EAAWZ,IAQhC+F,GAAwB,SAAC5E,GAA2E,IAAhD6E,EAA+C,uDAAzBzI,GACrF,OAAKR,IAILkJ,GAAU5I,GAA0B8D,EAAO,GACpCnD,QAAQC,WAJN2B,GAAO,uBAAwB,CAAEE,aAAcqB,QAASP,EAAW,UAAWoF,IAU5EE,GAA4B,WAAiD,IAAhDF,EAA+C,uDAAzBzI,GAC9D,OAAKR,GAIEiB,QAAQC,QAAQkI,GAAU9I,KAHxBmD,GAAc,4BAAwBI,EAAW,UAAWoF,IAM1DI,GAA2B,SAACtG,EACAuG,EACAC,GACyC,IAAzCtG,EAAwC,uDAArB1C,GACpDe,EAAM,0BACZ,OAAOuB,GAAOvB,EAAK,CAAEgI,QAAOC,QAAQxG,OAAcc,EAAWZ,IAUlDuG,GAAgB,WAAsF,IAArFvG,EAAoF,uDAAjE1C,GAAkB0I,EAA+C,uDAAzBzI,GACjFiJ,EAAc9I,KAEhB+I,EAA4B,IAAIC,IAAI1J,OAAOC,SAAS0J,MAHwD,EAKvFF,EAAjBG,EALwG,EAKxGA,aACHA,IAGLH,EAAOG,EAAaC,IAAI,UAEtBrD,GAAoBhG,GAAeiJ,EAAhB,UAAyBD,EAAzB,qBAAiDhJ,IAAiBwC,GAClFtB,MAAK,SAACoI,GACLf,GAAsBe,EAAShH,aAAckG,GAAatH,MAAK,WAE7D,IAAMqI,EAAcC,aAAaC,QAAQ,uBACzCD,aAAaE,WAAW,uBACpBH,GACF/J,OAAOC,SAASkK,QAAQJ,MAEzB3H,OAAM,SAACgI,GACRlI,QAAQQ,MAAM,oCAAqC0H,SAGtDhI,OAAM,SAACH,GACiB,MAAnBA,EAAIO,YAENxC,OAAOC,SAASkK,QAAQ,+CAE1BjI,QAAQQ,MAAM,wBAAyBT,OAKlCoI,GAAU,WAAiD,IAAhDrB,EAA+C,uDAAzBzI,GACvCR,IAQHuK,GAAajK,IACbL,OAAOC,SAASsK,UARhBxB,QAAsBnF,EAAWoF,GAAatH,MAAK,WACjD1B,OAAOC,SAASsK,YACfnI,OAAM,SAACH,GACRC,QAAQQ,MAAM,wCAAyCT,OAehDuI,GAAa,SACxB1H,EACA2H,EACAC,GAEI,IADJ1H,EACG,uDADgB1C,GAEnB,OAAO,IAAIU,SAA4B,SAAC2J,EAAmBC,GACzD,IAAMC,EAAmBC,KAAKC,IAAI,QAAUL,EAAKM,KAAO,KAClDjH,EAAkC,CACtCkH,YAAaP,EAAKpB,KAClB4B,SAAUT,EACVU,cAAeT,EAAKM,KACpBI,cAAeP,EACfQ,kBAAmB5K,IAErB6K,GAAaZ,GAAMhJ,MAAK,SAAC6J,GACvBxH,EAAQyH,cAAgBD,EACxBE,GAAqB3I,EAAc2H,EAAUC,EAAM3G,EAAS4G,EAAmBC,EAAkB5H,UAKjGsI,GAAe,SACnBI,GAIA,OAAO,IAAI1K,SAAQ,SAACC,EAASoB,GAC3B,IAAIsJ,EAAYC,KAAKC,UAAUC,MAC3BpB,EAAOgB,EAEPK,EAASjB,KAAKkB,KAAKtB,EAAKM,KADZ,SAEZiB,EAAe,EACfC,EAAQ,IAAIC,KAASC,YACrBC,EAAa,IAAIC,WAErBD,EAAWE,OAAS,SAAUC,GAK1B,GAJAtK,QAAQC,IAAI,gBAAiB8J,EAAe,EAAG,KAAMF,GACrDG,EAAMO,OAAOJ,EAAWK,UACxBT,EAEmBF,EACfY,QACG,CACHzK,QAAQC,IAAI,oBACZ,IAAIoJ,EAAaW,EAAMU,MACvB1K,QAAQ2K,KAAK,gBAAiBtB,GAC9BtK,EAAQsK,KAIhBc,EAAWS,QAAU,WACjB5K,QAAQ6K,KAAK,+BACb1K,EAAOgK,EAAW3J,QAGtB,IAAIiK,EAAW,WACX,IAAIK,EA3BQ,QA2BAf,EACRW,EAAQI,EA5BA,SA4BsBtC,EAAKM,KAAQN,EAAKM,KAAOgC,EA5B/C,QA8BZX,EAAWY,kBAAkBtB,EAAUuB,KAAKxC,EAAMsC,EAAOJ,KAE7DD,QAIEQ,GAAkB,SAAlBA,EACJC,EACAC,EACAvK,EACAoI,EACAR,EACA3G,EACA4G,EACAC,GAEI,IADJ5H,EACG,uDADgB1C,GAEnB,IAAI+M,EAAsBC,qBAAsBF,EAAa,GAA7D,CAKA,IAAMG,EAAWF,EAAsBE,SACjCC,EAA4D,CAChED,WACAtC,YAAa,2BACbwC,YAAa,CAACL,IAEVM,EAAe,kCAA8BH,EAA9B,wBACrB3K,GAAO8K,EAAiBF,EAA2B1K,OAAcc,EAAWZ,GAAUtB,KAAtF,yCACE,WAAOiM,GAAP,sBAAA7I,EAAA,6DACQ8I,EAAeD,EAAqBE,kBAAkB,GAAGC,mBAEzDC,GAAaX,EAAa,GAAKrJ,EAAQqH,eACzC4C,EAAUZ,EAAarJ,EAAQqH,cAAgB,IACpCrH,EAAQoH,gBACrB6C,EAAUjK,EAAQoH,cAAgB,GAE9B8C,EAAYvD,EAAKoB,MAAMiC,EAAWC,EAAU,EAAGR,EAA0BvC,aARjF,SASQiD,GAAeN,EAAcK,EAAWT,EAA0BvC,aAT1E,OAWEK,GAAa2C,GAAWvM,MAAK,SAAC6J,GAC5B,IAAM4C,EAAU,kCAA8BZ,EAA9B,gBAA8CH,EAA9C,uBAAuE7B,GACvF7H,GAAMyK,OAAYvK,EAAWd,OAAcc,EAAWZ,GAAUtB,MAC9D,SAAC0M,GACsC,gBAAjCA,EAAgBC,cAElBhB,EAAsBC,qBAAsBF,EAAa,IAAK,EAC9DkB,GACEjB,EACAnC,EACApI,EACA6H,EACAC,EACA5H,IAGFlC,GAAM,KAAMY,MAAK,WACfyL,EACEC,EACAC,EACAvK,EACAoI,EACAR,EACA3G,EACA4G,EACAC,EACA5H,YArCd,2CADF,yDA6CWsL,GAAsB,SACjC1M,EACA2M,EACAzL,EACA6H,EACAC,GACyC,IAAzC5H,EAAwC,uDAArB1C,GAEnB,GAAIsB,EAAO0L,qBAAsBkB,OAAM,SAACC,GAAQ,OAAOA,KAAM,CAC3D,IAAMpN,EAAG,kCAA8BO,EAAO2L,SAArC,aACT7J,GAAMrC,OAAKuC,EAAWd,OAAcc,EAAWZ,GAAUtB,MAAK,SAACgN,GAE7D/D,EAAkB,CAAEgE,aAAcD,EAAUE,mBAAoB1D,SAAUqD,OACzEnM,OAAM,SAACM,GACRkI,EAAiBlI,QAIjBwL,GAAc,yCAAG,WAAON,EAAsBlD,EAAWO,GAAxC,UAAAnG,EAAA,sEAIfrD,MAAMmM,EAAc,CACxBvK,OAAQ,MACRF,QAAS,CACP,eAAgB8H,GAElBhI,KAAMyH,IATa,2CAAH,0DAYPe,GAAuB,SAClC3I,EACAoI,EACAR,EACA3G,EACA4G,EACAC,GACyC,IAAzC5H,EAAwC,uDAArB1C,GACbe,EAAM,yBACZuB,GAAOvB,EAAK0C,EAASjB,OAAcc,EAAWZ,GAAUtB,KAAxD,yCAA6D,WAAOE,GAAP,kBAAAkD,EAAA,sDAGrDwI,EAAkC1L,EAAOiN,WAAWC,MAAM,IAAIC,KAAI,SAAAC,GAAG,MAAY,MAARA,KAC/EpN,EAAO0L,qBAAuBA,EACrB2B,EAAI,EAL8C,YAK3CA,EAAI3B,EAAqB5H,QALkB,oBAMpD4H,EAAqB2B,GAN+B,gCAQjD9B,GACJ8B,EAAI,EACJrN,EACAkB,EACAoI,EACAR,EACA3G,EACA4G,EACAC,EACA5H,GAjBqD,OAKViM,GAAQ,EALE,uBAqB3DX,GAAoB1M,EAAQsJ,EAAUpI,EAAc6H,EAAmBC,EAAkB5H,GArB9B,4CAA7D,uDAsBGZ,OAAM,SAACM,GACRkI,EAAiBlI,OAWRwM,GAAuB,SAClCpM,EACAqM,GAEkB,IADlBnM,EACiB,uDADE1C,GAGnB,OAAO,IAAIU,SAAQ,SAACC,EAASoB,GAC3B,IAAM+M,EAA4B,CAChC,CACEC,kBAAmBF,EAAWhI,GAC9BmI,oBAAqB,aACrBX,aAAcQ,EAAWI,mBAS7B3H,GANqB,CACnB4H,oBAAoB,EACpBC,sBAAsB,EACtBC,6BAA6B,EAC7BC,eAAgBP,GAEAtM,EAAcE,GAAUtB,MACxC,SAACuD,GACC,IAAM2I,EAAuB3I,EAAK0K,eAAe,GAAGC,aAC9CC,EAAyB5K,EAAK0K,eAAe,GAAGE,WACtD,OAAOC,GAAqBD,EAAYjC,GAAclM,MAAK,SAACqO,GAC1D9O,EAAQ8O,SAGZ3N,OAAM,SAACH,GACPI,EAAOJ,UAKA+N,GAA6B,SACxCrB,EACA7L,GAEqB,IADrBE,EACoB,uDADD1C,GAGnB,OAAO,IAAIU,SAAQ,SAACC,EAASoB,GAE3B,IAAM4N,EAA2B5L,GAAkBsK,EAAc7L,EAAcE,GACzEkN,EAAkC3L,GAAqBoK,EAAc7L,EAAcE,GACzFhC,QAAQmP,IAAI,CAACF,EAA0BC,IAAkCxO,MAAK,SAAC0O,GAC7E,IAAMP,EAAyBO,EAAO,GAChCxC,EAAuBwC,EAAO,GACpC,OAAON,GAAqBD,EAAYjC,GAAclM,MAAK,SAACqO,GAC1D9O,EAAQ8O,SAET3N,OAAM,SAACH,GACRI,EAAOJ,UAKA6N,GAAuB,SAClCD,EACAjC,GAGA,OAAO,IAAI5M,SAAQ,SAACC,EAASoB,GAErBwN,EAAWQ,YAx+Ba,QAy+B1B5O,MAAMmM,EAAc,CAClBvK,OAAQ,MACRC,KAAM,OACNgN,MAAO,WACPnN,QAAS,CACP,eAAgB0M,EAAW5E,eAE5BvJ,MAAK,SAAC6O,GACPA,EAAS1O,OAAOH,MAAK,SAACG,GACpBZ,EAAQY,SAIZQ,EAAO,mCASFmO,GAAY,SACvBvM,EACAwM,EACA3N,GACyC,IAAzCE,EAAwC,uDAArB1C,GACnB,OAAOsC,GAAO,mBAAD,OAAoBqB,EAApB,QAAoCwM,EAAK3N,OAAcc,EAAWZ,IAOpE0N,GAAqB,SAChCC,EACAC,EACA9N,GACyC,IAAzCE,EAAwC,uDAArB1C,GACnB,OAAOsC,GAAO,uCAAD,OAAwCgO,GAAQD,EAAY7N,OAAcc,EAAWZ,IAOvF6N,GAAgB,SAC3BC,EACAhO,GACyC,IAAzCE,EAAwC,uDAArB1C,GACnB,OAAOkD,GAAM,uBAAD,OAAwBsN,GAAUhO,OAAcc,EAAWZ,IAO5D+N,GAA2B,SACtChM,EACAjC,GACqE,IAArEE,EAAoE,uDAAjD1C,GACnB,OAAOkD,GAAM,8CAAD,OAA+CwN,UAAUjM,IAAUjC,OAAcc,EAAWZ,IAM7FiO,GAA8B,SACzCC,EACApO,GACwF,IAAxFE,EAAuF,uDAApE1C,GACnB,OAAOsC,GAAO,8BAA+BsO,EAAiBpO,OAAcc,EAAWZ,IAM5EmO,GAAkB,SAC7BC,GACsE,IAAtEpO,EAAqE,uDAAlD1C,GACnB,OAAOkD,GAAM,0BAAD,OAA2B4N,QAAYxN,OAAWA,EAAWZ,IAS9DqO,GAAyB,SACpCH,EACApO,GACsE,IAAtEE,EAAqE,uDAAlD1C,GACnB,OAAOsC,GAAO,0BAA2BsO,EAAiBpO,OAAcc,EAAWZ,IAexEsO,GAAkB,SAC7BzK,EACA/D,GAC8D,IAA9DE,EAA6D,uDAA1C1C,GACnB,OAAOsC,GAAO,4BAAD,OAA6BoO,UAAUnK,SAASjD,EAAWd,OAAcc,EAAWZ,IAOtFuO,GAAa,SACxBC,EACA1O,GACsE,IAAtEE,EAAqE,uDAAlD1C,GACnB,OAAOkD,GAAM,uBAAD,OAAwBgO,EAAxB,QAA2C1O,OAAcc,EAAWZ,IAOrEyO,GAAgB,SAC3BD,EACAE,EACA5O,GACsE,IAAtEE,EAAqE,uDAAlD1C,GACnB,OAAOoD,GAAM,uBAAD,OAAwB8N,EAAxB,QAA2CE,EAAQ5O,OAAcc,EAAWZ,IAW7E2O,GAAiB,SAC5BH,EACA3K,EACA0I,EACAzM,GAC6D,IAA7DE,EAA4D,uDAAzC1C,GACXsR,EAAiC,CACrC/K,OACA8H,aAAcY,GAElB,OAAO3M,GAAO,8BAAD,OAA+B4O,GAAeI,EAAa9O,OAAcc,EAAWZ,IAOtF6O,GAAiB,SAC5BC,EACAjL,EACA0I,EACAzM,GAC6D,IAA7DE,EAA4D,uDAAzC1C,GACXyR,EAAqC,CACzClL,OACA8H,aAAcY,GAEhB,OAAO7L,GAAM,sBAAD,OAAuBoO,GAAcC,EAAiBjP,OAAcc,EAAWZ,IAOlFgP,GAAiB,SAC5BF,EACAhP,GACyC,IAAzCE,EAAwC,uDAArB1C,GACjB,OAAOmD,GAAS,sBAAD,OAAuBqO,GAAchP,OAAcc,EAAWZ,IAOpEiP,GAAiB,SAC5BH,EACAhP,GAC4D,IAA5DE,EAA2D,uDAAxC1C,GACjB,OAAOsC,GAAO,sBAAD,OAAuBkP,EAAvB,gBAA4ClO,EAAWd,OAAcc,EAAWZ,IAQpFkP,GAAe,SAC1BnO,EACAjB,GACgE,IAAhEE,EAA+D,uDAA5C1C,GACjB,OAAOsC,GAAO,0BAA2BmB,EAASjB,OAAcc,EAAWZ,IAQlEmP,GAA0B,SACrCpO,EACAjB,GACgE,IAAhEE,EAA+D,uDAA5C1C,GACjB,OAAOsC,GAAO,mCAAoCmB,EAASjB,OAAcc,EAAWZ,IAO3EoP,GAAiB,SAC5BN,EACAhP,GAC4D,IAA5DE,EAA2D,uDAAxC1C,GACjB,OAAOoD,GAAM,sBAAD,OAAuBoO,EAAvB,gBAA4ClO,EAAWd,OAAcc,EAAWZ,IAOnFqP,GAAiB,SAC5BP,EACAxP,EACAQ,GAC4D,IAA5DE,EAA2D,uDAAxC1C,GACXgS,EAA+B,CACnChQ,UAEF,OAAOoB,GAAM,sBAAD,OAAuBoO,EAAvB,WAA4CQ,EAAexP,OAAcc,EAAWZ,IAQvFuP,GAAuB,SAClCxO,EACAjB,GACkF,IAAlFE,EAAiF,uDAA9D1C,GACjB,OAAOsC,GAAO,sBAAuBmB,EAASjB,OAAcc,EAAWZ,IAGrEiG,GAAY,SAACpC,EAAc2L,EAA2BC,GAC1D,GAAKD,EAAL,CACA,IAAIE,EAAU,GACd,GAAID,EAAM,CACR,IAAME,EAAO,IAAIC,KACjBD,EAAKE,QAAQF,EAAKG,UAAoB,GAAPL,EAAY,GAAK,GAAK,KACrDC,EAAO,oBAAgBC,EAAKI,eAE9BC,SAASC,OAAT,UAAqBpM,EAArB,YAA6B2L,GAAS,IAAtC,OAA2CE,EAA3C,cAEIvJ,GAAY,SAACtC,GAGjB,IAFA,IAAMqM,EAAM,UAAMrM,EAAN,KACNsM,EAAKH,SAASC,OAAOnE,MAAM,KACxBG,EAAI,EAAGA,EAAIkE,EAAGzN,OAAQuJ,IAAK,CAElC,IADA,IAAImE,EAAID,EAAGlE,GACW,KAAfmE,EAAEC,OAAO,IAAWD,EAAIA,EAAEE,UAAU,EAAGF,EAAE1N,QAChD,GAAyB,GAArB0N,EAAEG,QAAQL,GAAc,OAAOE,EAAEE,UAAUJ,EAAOxN,OAAQ0N,EAAE1N,QAElE,OAAO,MAEH4E,GAAe,SAACzD,GACpBmM,SAASC,OAAT,UAAqBpM,EAArB,0BC3jCa2M,G,YAzMb,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,aAAc,GACdC,kBAAkB,EAClBC,YAAY,EACZ1N,SAAU,GACVD,SAAU,IAEZ,EAAK4N,aAAe,EAAKA,aAAa5S,KAAlB,gBACpB,EAAK6S,YAAc,EAAKA,YAAY7S,KAAjB,gBACnB,EAAK8S,aAAe,EAAKA,aAAa9S,KAAlB,gBACpB,EAAK+S,oBAAsB,EAAKA,oBAAoB/S,KAAzB,gBAC3B,EAAKgT,SAAW,EAAKA,SAAShT,KAAd,gBAdQ,E,0EAqBNiT,GAClB,IAAMC,EAASD,EAAME,cACfzN,EAAOwN,EAAOxN,KACd2L,EAAQ6B,EAAO7B,MACf+B,EAA0B,eAAM1N,EAAO2L,GAC7CgC,KAAKC,SAASF,K,kCAOGG,GAA2C,IAAD,OAC3DA,EAAWC,iBACX,IAAMC,EAAeJ,KAAKf,MAAMmB,aAAeJ,KAAKf,MAAMmB,aAAeC,EAAcvU,iBACjF0I,EAAcwL,KAAKf,MAAMzK,YAAcwL,KAAKf,MAAMzK,YAAc6L,EAActU,qBACpFsU,EAAc3O,MAAMsO,KAAKd,MAAMvN,SAAUqO,KAAKd,MAAMtN,SAAUwO,GACrDlT,MAAK,SAACuD,GACL4P,EAAc9L,sBAAsB9D,EAAKnC,aAAckG,GAAatH,MAAK,WAEvE1B,OAAOC,SAASsK,YACfnI,OAAM,SAACgI,GACRlI,QAAQC,IAAI,sCAAuCiI,GACnD,EAAKqK,SAAS,CACZb,aAAcxJ,EAAc9H,OAC5BuR,kBAAkB,EAClBC,YAAY,UAIjB1R,OAAM,SAACH,GACNC,QAAQC,IAAI,kCAAmCF,GAC/C,EAAKwS,SAAS,CACZb,aAAc3R,EAAIK,OAClBuR,kBAAkB,EAClBC,YAAY,S,qCAWxB,SAAIU,KAAKd,MAAMI,YAAmC,KAArBU,KAAKf,MAAMtP,OAAiBqQ,KAAKd,MAAMG,mBAC3D,mDAA2BW,KAAKf,MAAMtP,MAAtC,O,4CAUT,QAAIqQ,KAAKd,MAAMG,kBAEH,2BACI,yBAAOiB,UAAU,yBAAjB,IAA2CN,KAAKd,MAAME,aAAtD,KACA,uBAAKkB,UAAU,wB,2CAa/B,OAAKN,KAAKd,MAAMI,YAEJ,yBACK,IADL,oBAEsB,IAClB,8BACK,IACD,kCAAa,KACP,IANd,uBAOyB,O,+BAMvBM,GAEdpK,aAAa+K,QAAQ,sBAAuB/U,OAAOC,SAAS0J,MAC5DyK,EAAMO,iBACN,IAAMpO,EAAciO,KAAKf,MAAMuB,kBAAoBR,KAAKf,MAAMuB,kBAA1C,UAAiEH,EAAcnU,aAA/E,qBAAwGmU,EAAcrU,eAC1IqU,EAAcxO,gBAAgBwO,EAAcrU,cAAe+F,GAClD7E,MAAK,SAACuD,GACL,IAAMgQ,EAAUhQ,EAAKiQ,iBACrBlV,OAAOC,SAAWgV,KAEnB7S,OAAM,SAACH,GACNC,QAAQC,IAAI,sBAAuBF,Q,+BAG9B,IAAD,EACUuS,KAAKf,MAArB0B,EADM,EACNA,MAAO1Y,EADD,EACCA,KACTuM,EAAcwL,KAAKf,MAAMzK,YAAcwL,KAAKf,MAAMzK,YAAc6L,EAActU,qBAC9E6U,EAAwB,SAAVD,EAAmB,+BAAiC,gCACxE,OACE,uBAAKhO,GAAG,YAAY2N,UAAU,mDAC5B,4BACE,0BAAQO,QAASb,KAAKL,SAAUW,UAAS,4BAAuBM,EAAvB,yBACzC,gBAACE,EAAD,CAAYC,IAAK,EAAGzY,QAAQ,IAC5B,gBAAC0Y,EAAD,CAAe/Y,KAAMA,EAAM8Y,IAAK,GAAhC,yBAKF,uBAAKT,UAAU,6DAAf,MAEA,uBAAKA,UAAU,mDACb,uBACE7X,OAAO,OACPZ,MAAO,CAACoZ,YAAa,QACrBC,IAAK,wBACLC,IAAI,0EALR,sDASA,wBAAMC,SAAUpB,KAAKR,YAAac,UAAU,cAC1C,yBACEe,aAAa,WACbC,YAAY,oBACZhB,UAAU,mCACV3N,GAAG,eACHN,KAAK,WACLyC,KAAK,OACLkJ,MAAOgC,KAAKd,MAAMvN,SAClB4P,SAAUvB,KAAKT,eAEjB,yBACE8B,aAAa,WACbC,YAAY,WACZhB,UAAU,mCACV3N,GAAG,kBACHN,KAAK,WACLyC,KAAK,WACLkJ,MAAOgC,KAAKd,MAAMtN,SAClB2P,SAAUvB,KAAKT,eAEhBS,KAAKN,sBACN,0BACE0B,SAAUpB,KAAKR,YACf1K,KAAK,SACLwL,UAAU,+GAGV,gBAACU,EAAD,CAAe/Y,KAAMA,GAArB,aAKJ,2BACE,qBACEkN,KAAI,UAAKX,EAAL,qBACJ8L,UAAU,wCAFZ,oBAMA,wBAAMA,UAAU,wCAAhB,kBACA,qBACEnL,KAAI,UAAKX,EAAL,uBACJ8L,UAAU,yCAFZ,kB,GArMUkB,a,+CCjCdC,GAAgC,CACpC,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,gBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,gBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBAGIC,GAA+B,CACnC,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,gBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,iBACA,iBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,gBACA,kBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,kBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,kBACA,iBACA,iBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBACA,mBC9NK,SAASC,GAAiBnJ,EAAeJ,GAC9C,IAAIwJ,EAAwB,GACtBC,EAAa,GACftQ,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OC,QAAU,IAA0B,4C,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,+C,oBCA3CD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,qC,oBCA3CD,EAAOC,QAAU,IAA0B,iC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,kC,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,sC,oBCA3CD,EAAOC,QAAU,IAA0B,8C,oBCA3CD,EAAOC,QAAU,IAA0B,uC,oBCA3CD,EAAOC,QAAU,IAA0B,iD,oBCA3CD,EAAOC,QAAU,IAA0B,0C,oBCA3CD,EAAOC,QAAU,IAA0B,oD,oBCA3CD,EAAOC,QAAU,IAA0B,6C,oBCA3CD,EAAOC,QAAU,IAA0B,2D,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,oC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.dd8a301f.chunk.js","sourcesContent":["import * as React from 'react'\n\nexport default ({ children, icon }: { children: any, icon?: any }) => {\n  const style : React.CSSProperties = {\n    paddingRight: 10,\n    fontWeight: 500,\n    paddingLeft: icon ? 0 : 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    textAlign: 'center',\n    width: '100%'\n  }\n  return (\n    <span\n      style={style}\n    >\n      {children}\n    </span>\n  )\n}\n","import * as React from 'react'\n// @ts-nocheck\nexport default ({ active }: {active : boolean }) => (\n  <div\n    style={{\n      background: active ? '#fff' : '#eee',\n      paddingTop: 7,\n      paddingRight:10,\n      paddingBottom:4,\n      paddingLeft:10,\n      borderRadius: 2 }}\n  >\n    <svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g fill=\"#000\" fillRule=\"evenodd\">\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 3.48c1.69 0 2.83.73 3.48 1.34l2.54-2.48C13.46.89 11.43 0 9 0 5.48 0 2.44 2.02.96 4.96l2.91 2.26C4.6 5.05 6.62 3.48 9 3.48z\"\n          fill=\"#EA4335\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M17.64 9.2c0-.74-.06-1.28-.19-1.84H9v3.34h4.96c-.1.83-.64 2.08-1.84 2.92l2.84 2.2c1.7-1.57 2.68-3.88 2.68-6.62z\"\n          fill=\"#4285F4\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M3.88 10.78A5.54 5.54 0 0 1 3.58 9c0-.62.11-1.22.29-1.78L.96 4.96A9.008 9.008 0 0 0 0 9c0 1.45.35 2.82.96 4.04l2.92-2.26z\"\n          fill=\"#FBBC05\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 18c2.43 0 4.47-.8 5.96-2.18l-2.84-2.2c-.76.53-1.78.9-3.12.9-2.38 0-4.4-1.57-5.12-3.74L.97 13.04C2.45 15.98 5.48 18 9 18z\"\n          fill=\"#34A853\"\n        />\n        <path fill=\"none\" d=\"M0 0h18v18H0z\" />\n      </g>\n    </svg>\n  </div>\n)\n","import { UserCardSize } from '../containers/UserCard'\n\n/** QueryBundleRequest constants */\nexport const BUNDLE_MASK_QUERY_RESULTS: number = 1\nexport const BUNDLE_MASK_QUERY_COUNT: number = 2\nexport const BUNDLE_MASK_QUERY_SELECT_COLUMNS: number = 4\nexport const BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE: number = 8\nexport const BUNDLE_MASK_QUERY_COLUMN_MODELS: number = 16\nexport const BUNDLE_MASK_QUERY_FACETS: number = 32\n/** EntityBundle constants */\nexport const ENTITY_BUNDLE_MASK_ENTITY: number = 1\nexport const ENTITY_BUNDLE_MASK_ANNOTATIONS: number = 2\nexport const ENTITY_BUNDLE_MASK_PERMISSIONS: number = 4\nexport const ENTITY_BUNDLE_MASK_ENTITY_PATH: number = 8\nexport const ENTITY_BUNDLE_MASK_HAS_CHILDREN: number = 32\nexport const ENTITY_BUNDLE_MASK_ACL: number = 64\nexport const ENTITY_BUNDLE_MASK_FILE_HANDLES: number = 2048\nexport const ENTITY_BUNDLE_MASK_TABLE_DATA: number = 4096\nexport const ENTITY_BUNDLE_MASK_ROOT_WIKI_ID: number = 8192\nexport const ENTITY_BUNDLE_MASK_BENEFACTOR_ACL: number = 16384\nexport const ENTITY_BUNDLE_MASK_DOI: number = 32768\nexport const ENTITY_BUNDLE_MASK_FILE_NAME: number = 65536\nexport const ENTITY_BUNDLE_MASK_THREAD_COUNT: number = 131072\nexport const ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION: number = 262144\n/** Row Types  */\nexport const STUDY: string = 'study'\n// for study icons\nexport const STUDY_ACTIVE: string = 'study active'\nexport const STUDY_COMPLETE: string = 'study complete'\nexport const DATASET: string = 'dataset'\nexport const AMP_CONSORTIUM: string = 'AMP_Consortium'\nexport const FUNDER: string = 'funder'\nexport const PUBLICATION: string = 'publication'\nexport const TOOL: string = 'tool'\nexport const GENERIC_CARD: string = 'GENERIC_CARD'\nexport const COMPUTATIONAL: string = 'computational'\nexport const EXPERIMENTAL: string = 'experimental'\nexport const CLINICAL: string = 'clinical'\nexport const PROJECT: string = 'Project'\nexport const PAGE_SIZE: number = 25\n// For User Profile Cards\nexport const SMALL_USER_CARD: UserCardSize = 'SMALL USER CARD'\nexport const MEDIUM_USER_CARD: UserCardSize = 'MEDIUM USER CARD'\nexport const LARGE_USER_CARD: UserCardSize = 'LARGE USER CARD'\nexport const SEPERATOR = 'SEPERATOR'\nexport const AUTHENTICATED_USERS = 'AUTHENTICATED_USERS' \n// For internal testing only\nexport const _TIME_DELAY = 75\nexport const SRC_SIGN_IN_CLASS = 'SRC-SIGN-IN-CLASS'","import { BatchFileResult } from './jsonResponses/BatchFileResult'\nimport { Entity } from './jsonResponses/Entity'\nimport { FileHandleResults } from './jsonResponses/FileHandleResults'\nimport { UserGroupHeaderResponsePage } from './jsonResponses/UserGroupHeaderResponsePage'\nimport { SynapseVersion } from './jsonResponses/SynapseVersion'\nimport { QueryResultBundle } from './jsonResponses/Table/QueryResultBundle'\nimport { WikiPage } from './jsonResponses/WikiPage'\nimport { UserBundle } from './jsonResponses/UserBundle'\nimport { AsyncJobId } from './jsonResponses/Table/AsyncJobId'\nimport { MultipartUploadRequest } from './jsonResponses/MultipartUploadRequest'\nimport { BatchPresignedUploadUrlRequest } from './jsonResponses/BatchPresignedUploadUrlRequest'\nimport { BatchPresignedUploadUrlResponse } from './jsonResponses/BatchPresignedUploadUrlResponse'\nimport { MultipartUploadStatus } from './jsonResponses/MultipartUploadStatus'\nimport { FileUploadComplete } from './jsonResponses/FileUploadComplete'\nimport { AddPartResponse } from './jsonResponses/AddPartResponse'\nimport { EntityLookupRequest } from './jsonResponses/EntityLookupRequest'\nimport { FileEntity } from './jsonResponses/FileEntity'\nimport { UserProfile } from './jsonResponses/UserProfile'\nimport { AccessControlList } from './jsonResponses/AccessControlList'\nimport { Submission } from './jsonResponses/Submission'\nimport { DownloadFromTableRequest } from './jsonResponses/Table/DownloadFromTableRequest'\nimport { DownloadFromTableResult } from './jsonResponses/Table/DownloadFromTableResult'\nimport { ReferenceList } from './jsonResponses/ReferenceList'\nimport { EntityHeader } from './jsonResponses/EntityHeader'\nimport { PaginatedResults } from './jsonResponses/PaginatedResults'\nimport { QueryBundleRequest } from './jsonResponses/Table/QueryBundleRequest'\nimport { OIDCAuthorizationRequest } from './jsonResponses/OIDCAuthorizationRequest'\nimport { OIDCAuthorizationRequestDescription } from './jsonResponses/OIDCAuthorizationRequestDescription'\nimport { AccessCodeResponse } from './jsonResponses/AccessCodeResponse'\nimport { OAuthClientPublic } from './jsonResponses/OAuthClientPublic'\nimport { BatchFileRequest } from './jsonResponses/BatchFileRequest'\nimport { QueryTableResults } from './jsonResponses/EvaluationQueryTable/QueryTableResults'\nimport { FormGroup, FormData, ListRequest, ListResponse, FormChangeRequest, FormRejection } from './jsonResponses/Forms'\nimport { FileHandle } from './jsonResponses/FileHandle'\nimport { ProjectFilesStatisticsRequest, ProjectFilesStatisticsResponse } from './jsonResponses/Statistics'\nimport SparkMD5 from 'spark-md5'\n\n// TODO: Create JSON response types for all return types\nexport const IS_OUTSIDE_SYNAPSE_ORG = window.location.hostname.toLowerCase().includes('.synapse.org') ? false : true\nexport const SESSION_TOKEN_COOKIE_KEY = 'org.sagebionetworks.security.user.login.token'\nexport const DEFAULT_ENDPOINT: string = 'https://repo-prod.prod.sagebase.org/'\nexport const DEFAULT_SWC_ENDPOINT = 'https://www.synapse.org/'\n// Max size file that we will allow the caller to read into memory (5MB)\nconst MAX_JS_FILE_DOWNLOAD_SIZE = 5242880\nexport const AUTH_PROVIDER = 'GOOGLE_OAUTH_2_0'\n// This corresponds to the Synapse-managed S3 storage location:\nexport const SYNAPSE_STORAGE_LOCATION_ID = 1\nexport const getRootURL = () => {\n  const portString = window.location.port ? `:${window.location.port}` : ''\n  return `${window.location.protocol}//${window.location.hostname}${portString}/`\n}\n\nexport function delay(t: any) {\n  return new Promise((resolve) => {\n    setTimeout(resolve.bind(null, {}), t)\n  })\n}\nfunction parseJSON(response: any) {\n  return response.text()\n  .then((text: string) => {\n    let parsedJson = ''\n    try {\n      parsedJson = JSON.parse(text)\n    } catch (err) {\n      console.log('Caught exception with parsing json ', err)\n      parsedJson = text\n    }\n    return parsedJson ? parsedJson : {}\n  }).catch(\n    // this should never happen!\n    (err: string) => {\n      console.log('Caught exception loading response text ', err)\n      return {}\n    }\n  )\n}\nconst fetchWithExponentialTimeout = <T>(url: string, options: any, delayMs: any, retries: number): Promise<T> => {\n  return fetch(url, options)\n    .then((resp) => {\n      if (resp.status > 199 && resp.status < 300) {\n        if (resp.status === 204) {\n          // the response is empty, don't try to parse an empty response\n          return resp\n        }\n        // ok!\n        return parseJSON(resp)\n      }\n      if (resp.status === 429 || resp.status === 0) {\n        // TOO_MANY_REQUESTS_STATUS_CODE, or network connection is down.  Retry after a couple of seconds.\n        if (retries === 1) {\n          return Promise.reject({\n            reason: resp.statusText,\n            statusCode: resp.status\n          })\n        }\n        return delay(delayMs).then(() => {\n          return fetchWithExponentialTimeout(url, options, delayMs * 2, retries - 1)\n        })\n      }\n      // error status that indicates no more retries\n      return resp\n        .json()\n        .then((json) => {\n          // on okay response return json, o.w. reject with json and\n          // send to catch block\n          const error = {\n            reason: json.reason,\n            status: resp.status\n          }\n          return resp.ok ? json : Promise.reject(error)\n        })\n        .catch((error) => {\n          // call failed above\n          if (error.reason && error.status) {\n            // successfull return from server but invalid call\n            // the call was recieved, but staus wasn't ok-- return the json response from above\n            // from the response directly\n            return Promise.reject({\n              reason: error.reason,\n              statusCode: error.status\n            })\n          }\n          return Promise.reject({\n            reason: resp.statusText,\n            statusCode: resp.status\n          })\n        })\n    })\n    .catch((error) => {\n      // this should never happen\n      return Promise.reject(error)\n    })\n}\n\nexport const doPost = (\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: string | undefined,\n  endpoint: string\n  ): Promise<any> => {\n  const options: any = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    mode: 'cors',\n    credentials: initCredentials\n  }\n  if (initCredentials) {\n    options.credentials = initCredentials\n  }\n  if (sessionToken) {\n    options.headers.sessionToken = sessionToken\n  }\n  return fetchWithExponentialTimeout(endpoint + url, options, 1000, 5)\n}\nexport const doGet = <T>(\n                      url: string,\n                      sessionToken: string | undefined,\n                      initCredentials: string | undefined,\n                      endpoint: string) => {\n  const options: any = {\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken'\n    },\n    method: 'GET',\n    mode: 'cors'\n  }\n  if (initCredentials) {\n    options.credentials = initCredentials\n  }\n  if (sessionToken) {\n    options.headers.sessionToken = sessionToken\n  }\n  return fetchWithExponentialTimeout<T>(endpoint + url, options, 1000, 5)\n}\n\nexport const doDelete = (\n  url: string,\n  sessionToken: string | undefined,\n  initCredentials: string | undefined,\n  endpoint: string) => {\n  const options: any = {\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken'\n    },\n    method: 'DELETE',\n    mode: 'cors',\n    credentials: initCredentials\n  }\n  if (initCredentials) {\n    options.credentials = initCredentials\n  }\n  if (sessionToken) {\n    options.headers.sessionToken = sessionToken\n  }\n  return fetchWithExponentialTimeout(endpoint + url, options, 1000, 5)\n}\n\nexport const doPut = (\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: string | undefined,\n  endpoint: string\n): Promise<any> => {\n  const options: any = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'PUT',\n    mode: 'cors'\n  }\n  if (initCredentials) {\n    options.credentials = initCredentials\n  }\n  if (sessionToken) {\n    options.headers.sessionToken = sessionToken\n  }\n  return fetchWithExponentialTimeout(endpoint + url, options, 1000, 5)\n}\n\nexport const putRefreshSessionToken = (sessionToken: string, endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPut('/auth/v1/session', { sessionToken }, undefined, undefined, endpoint)\n}\n\nexport const getVersion = (endpoint: string = DEFAULT_ENDPOINT): Promise<SynapseVersion> => {\n  return doGet<SynapseVersion>('/repo/v1/version', undefined, undefined, endpoint)\n}\n\n/**\n * https://docs.synapse.org/rest/POST/entity/id/table/download/csv/async/start.html\n */\nexport const getDownloadFromTableRequest = (\n  request: DownloadFromTableRequest,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT,\n  updateParentState?: any,\n) => {\n  return doPost(`/repo/v1/entity/${request.entityId}/table/download/csv/async/start`, request, sessionToken, undefined, endpoint)\n  .then((resp: AsyncJobId) => {\n    const requestUrl = `/repo/v1/entity/${request.entityId}/table/download/csv/async/get/${resp.token}`\n    return getAsyncResultFromJobId<DownloadFromTableResult>(requestUrl, sessionToken, endpoint, updateParentState)\n  })\n  .catch((error: any) => {\n    throw error\n  })\n}\n\n/**\n* https://docs.synapse.org/rest/GET/fileHandle/handleId.html\n* Get a FileHandle using its ID.\n* Note: Only the user that created the FileHandle can access it directly.\n* @return FileHandle\n**/\nexport const getFileHandleById = (\n  handleId: string,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT,\n): Promise<FileHandle> => {\n  return doGet<FileHandle>(`file/v1/fileHandle/${handleId}`, sessionToken, undefined, endpoint)\n}\n\n/**\n* https://docs.synapse.org/rest/GET/fileHandle/handleId/url.html\n* @return a short lived presignedURL to be redirected with\n**/\nexport const getFileHandleByIdURL = (\n  handleId: string,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT,\n) => {\n  // get the presigned URL for this file handle\n  return doGet<string>(`file/v1/fileHandle/${handleId}/url?redirect=false`, sessionToken, undefined, endpoint)\n}\n\nexport const getAsyncResultFromJobId = <T>(\n  urlRequest: string,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT,\n  updateParentState?: any\n): Promise<T> => {\n  return doGet(urlRequest, sessionToken, undefined, endpoint)\n  .then((resp: any) => {\n    // is this the job status?\n    if (resp.jobState && resp.jobState !== 'FAILED') {\n      updateParentState && updateParentState({\n        asyncJobStatus: resp\n      })\n      // still processing, wait for a second and try again\n      return delay(500).then(() => {\n        return getAsyncResultFromJobId<T>(urlRequest, sessionToken, endpoint, updateParentState)\n      })\n    }\n    // these must be the query results!\n    return resp\n  })\n  .catch((error) => {\n    throw error\n  })\n}\n\n/**\n * http://docs.synapse.org/rest/POST/entity/id/table/query/nextPage/async/start.html\n * @param {*} queryBundleRequest\n * @param {*} sessionToken\n * @param {*} endpoint\n */\nexport const getQueryTableResults = (\n  queryBundleRequest: QueryBundleRequest,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n  endpoint: string = DEFAULT_ENDPOINT,\n): Promise<QueryResultBundle> => {\n  return doPost(`/repo/v1/entity/${queryBundleRequest.entityId}/table/query/async/start`, queryBundleRequest, sessionToken, undefined, endpoint)\n  .then((resp) => {\n    return getAsyncResultFromJobId<QueryResultBundle>(`/repo/v1/entity/${queryBundleRequest.entityId}/table/query/async/get/${resp.token}`, sessionToken, endpoint, updateParentState)\n  })\n  .catch((error: any) => {\n    throw error\n  })\n}\n/**\n *  Run and return results from queryBundleRequest, queryBundle request must be of the\n *  form:\n *     {\n *        concreteType: String,\n *        query: {\n *           sql: String,\n *           isConsistent: Boolean,\n *           partMask: Number\n *        }\n *     }\n * @param {*} queryBundleRequest\n * @param {*} [sessionToken=undefined]\n * @param {boolean} [onlyGetFacets=false] Specify if the query only needs facets and no\n * data-- (internally this limits the row count to 1 on the request)\n * @returns Full dataset from synapse table query\n */\nexport const getFullQueryTableResults = async (queryBundleRequest: any,\n                                               sessionToken: string | undefined = undefined)\n                                               : Promise<QueryResultBundle> => {\n  // TODO: Find out why theres a bug causing the query limit\n  const { query, ...rest } = queryBundleRequest\n  let data: any = {}\n  let maxPageSize: number = 150\n  const queryRequest: any = {\n    ...rest,\n    query: { ...query, limit: maxPageSize }\n  }\n  // Have to make two \"sets\" of calls for query, the first one tells us the maximum size per page of data\n  // we can get, the following uses that maximum and offsets to the appropriate location to get the data\n  // afterwards, the process repeats\n  await getQueryTableResults(queryRequest, sessionToken).then(\n    async (initData: QueryResultBundle) => {\n      let queryCount: any = initData.queryResult.queryResults.rows.length\n      let currentQueryCount: number = queryCount\n      data = initData\n      // Get the subsequent data, note- although the function calls itself, it runs\n      // iteratively due to the await\n      const getData = async () => {\n        if (queryCount === maxPageSize) {\n          maxPageSize = initData.maxRowsPerPage!\n          const queryRequestWithMaxPageSize = {\n            ...rest,\n            query: { ...query, limit: maxPageSize, offset: currentQueryCount }\n          }\n          await getQueryTableResults(queryRequestWithMaxPageSize, sessionToken)\n            .then((postData: any) => {\n              queryCount += postData.queryResult.queryResults.rows.length\n              if (queryCount > 0) {\n                currentQueryCount += queryCount\n                data.queryResult.queryResults.rows.push(\n                  ...postData.queryResult.queryResults.rows // ... spread operator to push all elements on\n                )\n              }\n              return getData()\n            })\n            .catch((err) => {\n              console.log('Error on getting table results ', err)\n            })\n        } else {\n          // set data to this plots sql in the query data\n          return data\n        }\n      }\n      return getData()\n    })\n  return data\n}\n\n/**\n *  Log-in using the given username and password.  Will return a session token that must be used in\n *  authenticated requests.\n *  http://docs.synapse.org/rest/POST/login.html\n */\nexport const login = (username: string, password: string, endpoint = DEFAULT_ENDPOINT) => {\n  return doPost('/auth/v1/login', { username, password }, undefined, undefined, endpoint)\n}\n/**\n * Get redirect url\n * https://docs.synapse.org/rest/POST/oauth2/authurl.html\n * @param {*} provider\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport let oAuthUrlRequest = (provider: string, redirectUrl: string, endpoint = DEFAULT_ENDPOINT) => {\n  return doPost('/auth/v1/oauth2/authurl', { provider, redirectUrl }, undefined, undefined, endpoint)\n}\n/**\n * Get session token from SSO\n * https://docs.synapse.org/rest/POST/oauth2/session.html\n * @param {*} provider\n * @param {*} authenticationCode\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport let oAuthSessionRequest = (provider: string,\n                                  authenticationCode: string | number,\n                                  redirectUrl: string,\n                                  endpoint: any = DEFAULT_ENDPOINT) => {\n  return doPost(\n    '/auth/v1/oauth2/session',\n    { provider, authenticationCode, redirectUrl }, undefined, undefined, endpoint)\n}\n/**\n * Create an entity (Project, Folder, File, Table, View)\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createEntity = (entity: any, sessionToken: string | undefined, endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost('/repo/v1/entity', entity, sessionToken, undefined, endpoint)\n}\n/**\n * Create a project with the given name.\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createProject = (name: string,\n                              sessionToken: string | undefined,\n                              endpoint: string = DEFAULT_ENDPOINT)\n                              : Promise<Response> => {\n  return createEntity(\n    {\n      name,\n      concreteType: 'org.sagebionetworks.repo.model.Project'\n    },\n    sessionToken,\n    endpoint\n  )\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfile = (sessionToken: string | undefined, endpoint = DEFAULT_ENDPOINT) => {\n  return doGet<UserProfile>('/repo/v1/userProfile', sessionToken, undefined, endpoint)\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfileById = (\n  sessionToken: string | undefined, ownerId: string, endpoint = DEFAULT_ENDPOINT) => {\n  return doGet<UserProfile>(`/repo/v1/userProfile/${ownerId}`, sessionToken, undefined, endpoint)\n}\n\n/**\n * Return this user's profile bundle\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserBundle.html\n */\nexport const getUserBundle = (\n  id: string, mask: number, sessionToken: string | undefined, endpoint = DEFAULT_ENDPOINT\n): Promise<UserBundle> => {\n  return doGet<UserBundle>(`repo/v1/user/${id}/bundle?mask=${mask}`, sessionToken, undefined, endpoint)\n}\n\n/**\n * Return batch of user group headers\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserGroupHeaderResponsePage.html\n */\nexport const getGroupHeadersBatch = (\n  ids: string [], sessionToken: string | undefined, endpoint = DEFAULT_ENDPOINT\n): Promise<UserGroupHeaderResponsePage> => {\n  return doGet<UserGroupHeaderResponsePage>(`repo/v1/userGroupHeaders/batch?ids=${ids.join(',')}`, sessionToken, undefined, endpoint)\n}\n\nexport type UserProfileList = { list: UserProfile [] }\n/**\n * Return the User Profiles for the given list of user IDs\n * http://docs.synapse.org/rest/POST/userProfile.html\n */\nexport const getUserProfiles =\n  (\n    list: string[],\n    sessionToken: string | undefined = undefined,\n    endpoint: string = DEFAULT_ENDPOINT\n  ): Promise<UserProfileList> => {\n    return doPost('/repo/v1/userProfile', { list }, sessionToken, undefined, endpoint)\n  }\n\n/**\n * Return the children (Files/Folders) of the given entity (Project or Folder).\n * http://docs.synapse.org/rest/POST/entity/children.html\n */\nexport const getEntityChildren = (request: any,\n                                  sessionToken: string | undefined = undefined,\n                                  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost('/repo/v1/entity/children', request, sessionToken, undefined, endpoint)\n}\n/**\n * Retrieve an entityId for a given parent ID and entity name.\n * https://docs.synapse.org/rest/POST/entity/child.html\n */\nexport const lookupChildEntity = (\n  request: EntityLookupRequest,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost('/repo/v1/entity/child', request, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get a batch of pre-signed URLs and/or FileHandles for the given list of FileHandleAssociations.\n * http://docs.synapse.org/rest/POST/fileHandle/batch.html\n */\nexport const getFiles = (request: BatchFileRequest,\n                         sessionToken: string | undefined = undefined,\n                         endpoint: string = DEFAULT_ENDPOINT): Promise<BatchFileResult> => {\n  return doPost('/file/v1/fileHandle/batch', request, sessionToken, undefined, endpoint)\n}\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and associated\n * objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html\n */\ntype GetEntity = <T extends Entity>(sessionToken: string | undefined, entityId: string | number, endpoint?: string) => Promise<T>\n\nexport const getEntity: GetEntity = <T>(sessionToken: string | undefined = undefined,\n                          entityId: string | number,\n                          endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = `/repo/v1/entity/${entityId}`\n  return doGet(url, sessionToken, undefined, endpoint) as Promise<T>\n}\n\n/**\n * Get the EntityHeader for a list of references with a POST. \n * If any item in the batch fails (e.g., with a 404) it will be EXCLUDED in the result set.\n * https://docs.synapse.org/rest/POST/entity/header.html\n */\nexport const getEntityHeader = (references: ReferenceList,\n  sessionToken: string | undefined = undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost('repo/v1/entity/header', { references }, sessionToken, undefined, endpoint) as Promise<PaginatedResults<EntityHeader>>\n}\n\nexport const updateEntity = (\n  entity: Entity,\n  sessionToken: string | undefined = undefined,\n  endpoint = DEFAULT_ENDPOINT): Promise<Entity> => {\n  const url = `/repo/v1/entity/${entity.id}`\n  return doPut(url, entity, sessionToken, undefined, endpoint)\n}\n\nexport const deleteEntity: GetEntity = <T>(sessionToken: string | undefined = undefined,\n  entityId: string | number,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = `/repo/v1/entity/${entityId}`\n  return doDelete(url, sessionToken, undefined, endpoint) as Promise<T>\n}\n\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and\n * associated objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * http://docs.synapse.org/rest/GET/entity/id/version/versionNumber/bundle.html\n */\nexport const getEntityBundleForVersion = (\n  entityId: string | number,\n  version: string | number | undefined,\n  partsMask: string | number,\n  sessionToken: string | undefined = undefined,\n  endpoint = DEFAULT_ENDPOINT\n) => {\n  let url = `/repo/v1/entity/${entityId}`\n  if (version) {\n    url += `/version/ + ${version}`\n  }\n  url += `/bundle?mask= ${partsMask}`\n  return doGet(url, sessionToken, undefined, endpoint) as Promise<any>\n}\n/**\n * Get Wiki page contents, call is of the form:\n * http://docs.synapse.org/rest/GET/entity/ownerId/wiki.html\n */\nexport const getEntityWiki = (sessionToken: string | undefined,\n                              ownerId: string | undefined,\n                              wikiId: string | undefined,\n                              endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = `/repo/v1/entity/${ownerId}/wiki/${wikiId}`\n  return doGet(url, sessionToken, undefined, endpoint) as Promise<WikiPage>\n}\n\n/**\n * Returns synapse user favorites list given their session token\n * http://docs.synapse.org/rest/GET/favorite.html\n */\nexport const getUserFavorites = (sessionToken: string | undefined, endpoint = DEFAULT_ENDPOINT) => {\n  const url = 'repo/v1/favorite?offset=0&limit=200'\n  return doGet(url, sessionToken, undefined, endpoint) as Promise<any>\n}\n/**\n *  http://docs.synapse.org/rest/GET/projects/type.html\n *  @param {String} projectDetails Can be \"MY_PROJECTS\", \"MY_CREATED_PROJECTS\" or \"MY_PARTICIPATED_PROJECTS\"\n */\nexport const getUserProjectList = (sessionToken: string | undefined,\n                                   projectDetails: string,\n                                   endpoint = DEFAULT_ENDPOINT) => {\n  const url = `repo/v1/projects/${projectDetails}?offset=0&limit=200`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see - http://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserProfile.html\n */\nexport const getUserTeamList = (sessionToken: string | undefined, id: string | number, endpoint = DEFAULT_ENDPOINT) => {\n  const url = `repo/v1/user/${id}/team?offset=0&limit=200`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see -https://docs.synapse.org/rest/GET/teamMembers/id.html\n * @param {*} fragment (optional) a prefix of the user's first or last name or email address (optional)\n * @param {*} limit    (optional) the maximum number of members to return (default 10, max limit 50)\n * @param {*} offset   (optional) the starting index of the returned results (default 0)\n *\n */\nexport const getTeamList = (\n  sessionToken: string | undefined,\n  id: string | number,\n  fragment: string = '',\n  limit: number = 10,\n  offset: number = 0,\n  endpoint: string = DEFAULT_ENDPOINT\n) => {\n  const url = `repo/v1/teamMembers/${id}?limit=${limit}&offset=${offset}${fragment ? `&fragment=${fragment}` : ''}`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n\nexport const getWikiAttachmentsFromEntity =\n    (\n      sessionToken: string | undefined,\n      id: string | number,\n      wikiId: string | number,\n      endpoint: string = DEFAULT_ENDPOINT): Promise<FileHandleResults> => {\n      const url = `repo/v1/entity/${id}/wiki/${wikiId}/attachmenthandles`\n      return doGet(url, sessionToken, undefined, endpoint)\n    }\nexport const getWikiAttachmentsFromEvaluation = (sessionToken: string | undefined,\n                                                 id: string | number,\n                                                 wikiId: string | number,\n                                                 endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = `repo/v1/evaluation/${id}/wiki/${wikiId}/attachmenthandles`\n  return doGet(url, sessionToken, undefined, endpoint)\n}\n/**\n * Set the session token cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n *\n * @param {*} token Session token.  If undefined, then call should instruct the browser to delete the cookie.\n */\nexport const setSessionTokenCookie = (token: string | undefined, swcEndpoint: string = DEFAULT_SWC_ENDPOINT) => {\n  if (!IS_OUTSIDE_SYNAPSE_ORG) {\n    return doPost('Portal/sessioncookie', { sessionToken: token }, undefined, 'include', swcEndpoint)\n  }\n  // else not on a synapse.org subdomain, no Synapse SSO\n  setCookie(SESSION_TOKEN_COOKIE_KEY, token, 1)\n  return Promise.resolve()\n}\n/**\n * Get the current session token from a cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n */\nexport const getSessionTokenFromCookie = (swcEndpoint: string = DEFAULT_SWC_ENDPOINT) => {\n  if (!IS_OUTSIDE_SYNAPSE_ORG) {\n    return doGet<string>('Portal/sessioncookie', undefined, 'include', swcEndpoint)\n  }\n  // else (is not on a synapse.org subdomain)\n  return Promise.resolve(getCookie(SESSION_TOKEN_COOKIE_KEY))\n}\n\nexport const getPrincipalAliasRequest = (sessionToken: string | undefined,\n                                         alias: string,\n                                         type: string,\n                                         endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = 'repo/v1/principal/alias'\n  return doPost(url, { alias, type }, sessionToken, undefined, endpoint)\n}\n\n/*\nDuring SSO login, the authorization provider (Google) will\nsend the user back to the portal with an authorization code,\nwhich can be exchanged for a Synapse user session.\nThis function should be called whenever the root App is initialized\n(to look for this code parameter and complete the round-trip).\n*/\nexport const detectSSOCode = (endpoint: string = DEFAULT_ENDPOINT, swcEndpoint: string = DEFAULT_SWC_ENDPOINT) => {\n  const redirectURL = getRootURL()\n  // 'code' handling (from SSO) should be preformed on the root page, and then redirect to original route.\n  let code: URL | null | string = new URL(window.location.href)\n  // in test environment the searchParams isn't defined\n  const { searchParams } = code\n  if (!searchParams) {\n    return\n  }\n  code = searchParams.get('code')\n  if (code) {\n    oAuthSessionRequest(AUTH_PROVIDER, code, `${redirectURL}?provider=${AUTH_PROVIDER}`, endpoint)\n      .then((synToken: any) => {\n        setSessionTokenCookie(synToken.sessionToken, swcEndpoint).then(() => {\n          // go back to original route after successful SSO login\n          const originalUrl = localStorage.getItem('after-sso-login-url')\n          localStorage.removeItem('after-sso-login-url')\n          if (originalUrl) {\n            window.location.replace(originalUrl)\n          }\n        }).catch((errSetSession) => {\n          console.error('Error on set sesion token cookie ', errSetSession)\n        })\n      })\n      .catch((err: any) => {\n        if (err.statusCode === 404) {\n          // Synapse account not found, send to registration page\n          window.location.replace('https://www.synapse.org/#!RegisterAccount:0')\n        }\n        console.error('Error on sso sign in ', err)\n      })\n  }\n}\n\nexport const signOut = (swcEndpoint: string = DEFAULT_SWC_ENDPOINT) => {\n  if (!IS_OUTSIDE_SYNAPSE_ORG) {\n    setSessionTokenCookie(undefined, swcEndpoint).then(() => {\n      window.location.reload()\n    }).catch((err) => {\n      console.error('err when clearing the session cookie ', err)\n    })\n  } else {\n    // is not on a synapse.org subdomain\n    removeCookie(SESSION_TOKEN_COOKIE_KEY)\n    window.location.reload()\n  }\n}\n\n/**\n * Upload file.  Note that this currently only supports Synapse storage (Sage s3 bucket)\n * @param sessionToken\n * @param file\n * @param endpoint\n */\nexport const uploadFile = (\n  sessionToken: string | undefined,\n  filename: string,\n  file: Blob,\n  endpoint: string = DEFAULT_ENDPOINT,\n) => {\n  return new Promise<FileUploadComplete>((fileUploadResolve, fileUploadReject) => {\n    const partSize: number = Math.max(5242880, (file.size / 10000))\n    const request: MultipartUploadRequest = {\n      contentType: file.type,\n      fileName: filename,\n      fileSizeBytes: file.size,\n      partSizeBytes: partSize,\n      storageLocationId: SYNAPSE_STORAGE_LOCATION_ID\n    }\n    calculateMd5(file).then((md5: string) => {\n      request.contentMD5Hex = md5\n      startMultipartUpload(sessionToken, filename, file, request, fileUploadResolve, fileUploadReject, endpoint)\n    })\n  })\n}\n\nconst calculateMd5 = (\n  fileBlob: File | Blob\n): Promise<string> => {\n\n  // code taken from md5 example from library\n  return new Promise((resolve, reject) => {\n    let blobSlice = File.prototype.slice,\n        file = fileBlob,\n        chunkSize = 2097152, // Read in chunks of 2MB\n        chunks = Math.ceil(file.size / chunkSize),\n        currentChunk = 0,\n        spark = new SparkMD5.ArrayBuffer(),\n        fileReader = new FileReader()\n\n    fileReader.onload = function (e) {\n        console.log('read chunk nr', currentChunk + 1, 'of', chunks)\n        spark.append(fileReader.result as ArrayBuffer) // Append array buffer\n        currentChunk++\n\n        if (currentChunk < chunks) {\n            loadNext();\n        } else {\n            console.log('finished loading');\n            let md5:string = spark.end()\n            console.info('computed hash', md5);  // Compute hash\n            resolve(md5)\n        }\n    };\n\n    fileReader.onerror = function () {\n        console.warn('oops, something went wrong.');\n        reject(fileReader.error)\n    };\n\n    let loadNext = () => {\n        let start = currentChunk * chunkSize,\n            end = ((start + chunkSize) >= file.size) ? file.size : start + chunkSize;\n\n        fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n    }\n    loadNext();\n  })\n}\n\nconst processFilePart = (\n  partNumber: number,\n  multipartUploadStatus: MultipartUploadStatus,\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n  endpoint: string = DEFAULT_ENDPOINT\n) => {\n  if (multipartUploadStatus.clientSidePartsState![partNumber - 1]) {\n    // no-op. this part has already been processed!\n    return\n  }\n\n  const uploadId = multipartUploadStatus.uploadId\n  const presignedUploadUrlRequest: BatchPresignedUploadUrlRequest = {\n    uploadId,\n    contentType: 'application/octet-stream', // each part is binary\n    partNumbers: [partNumber],\n  }\n  const presignedUrlUrl = `/file/v1/file/multipart/${uploadId}/presigned/url/batch`\n  doPost(presignedUrlUrl, presignedUploadUrlRequest, sessionToken, undefined, endpoint).then(\n    async (presignedUrlResponse: BatchPresignedUploadUrlResponse) => {\n      const presignedUrl = presignedUrlResponse.partPresignedUrls[0].uploadPresignedUrl\n      // calculate the byte range\n      const startByte = (partNumber - 1) * request.partSizeBytes\n      let endByte = partNumber * request.partSizeBytes - 1\n      if (endByte >= request.fileSizeBytes) {\n        endByte = request.fileSizeBytes - 1\n      }\n      const fileSlice = file.slice(startByte, endByte + 1, presignedUploadUrlRequest.contentType)\n      await uploadFilePart(presignedUrl, fileSlice, presignedUploadUrlRequest.contentType)\n      // uploaded the part.  calculate md5 of the part and add the part to the upload\n      calculateMd5(fileSlice).then((md5: string) => {\n        const addPartUrl = `/file/v1/file/multipart/${uploadId}/add/${partNumber}?partMD5Hex=${md5}`\n        doPut(addPartUrl, undefined, sessionToken, undefined, endpoint).then(\n          (addPartResponse: AddPartResponse) => {\n            if (addPartResponse.addPartState === 'ADD_SUCCESS') {\n              // done with this part!\n              multipartUploadStatus.clientSidePartsState![partNumber - 1] = true\n              checkUploadComplete(\n                multipartUploadStatus,\n                fileName,\n                sessionToken,\n                fileUploadResolve,\n                fileUploadReject,\n                endpoint)\n            } else {\n              // retry after a brief delay\n              delay(1000).then(() => {\n                processFilePart(\n                  partNumber,\n                  multipartUploadStatus,\n                  sessionToken,\n                  fileName,\n                  file,\n                  request,\n                  fileUploadResolve,\n                  fileUploadReject,\n                  endpoint)\n              })\n            }\n          })\n      })\n    })\n}\nexport const checkUploadComplete = (\n  status: MultipartUploadStatus,\n  fileHandleName: string,\n  sessionToken: string | undefined,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  // if all client-side parts are true (uploaded), then complete the upload and get the file handle!\n  if (status.clientSidePartsState!.every((v) => { return v })) {\n    const url = `/file/v1/file/multipart/${status.uploadId}/complete`\n    doPut(url, undefined, sessionToken, undefined, endpoint).then((newStatus: MultipartUploadStatus) => {\n      // success!\n      fileUploadResolve({ fileHandleId: newStatus.resultFileHandleId, fileName: fileHandleName })\n    }).catch((error) => {\n      fileUploadReject(error)\n    })\n  }\n}\nconst uploadFilePart = async (presignedUrl: string, file: any, contentType: string) => {\n  // TODO: could try using axios to get upload progress, then update the client-side part state (change to numbers from 0-1)\n  // This would give progress for the single file (across all parts).\n  // The parent would still need to figure out progress (for the total file set).\n  await fetch(presignedUrl, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': contentType\n    },\n    body: file\n  })\n}\nexport const startMultipartUpload = (\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  const url = 'file/v1/file/multipart'\n  doPost(url, request, sessionToken, undefined, endpoint).then(async (status: MultipartUploadStatus) => {\n    // started the upload\n    // keep track of the part state client-side\n    const clientSidePartsState: boolean[] = status.partsState.split('').map(bit => bit === '1')\n    status.clientSidePartsState = clientSidePartsState\n    for (let i = 0; i < clientSidePartsState.length; i = i + 1) {\n      if (!clientSidePartsState[i]) {\n        // upload this part.  note that partNumber is always the index+1\n        await processFilePart(\n          i + 1,\n          status,\n          sessionToken,\n          fileName,\n          file,\n          request,\n          fileUploadResolve,\n          fileUploadReject,\n          endpoint)\n      }\n    }\n    // in case there is no upload work to do!\n    checkUploadComplete(status, fileName, sessionToken, fileUploadResolve, fileUploadReject, endpoint)\n  }).catch((error) => {\n    fileUploadReject(error)\n  })\n}\n\n/**\n * Return the content of the file (latest version) associated to the given FileEntity.\n * Be aware that if the target file size > 5MB, this method will throw an error.\n * @param sessionToken\n * @param fileEntity\n * @param endpoint\n */\nexport const getFileEntityContent = (\n  sessionToken: string,\n  fileEntity: FileEntity,\n  endpoint: string = DEFAULT_ENDPOINT\n): Promise<any> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    const fileHandleAssociationList = [\n      {\n        associateObjectId: fileEntity.id,\n        associateObjectType: 'FileEntity',\n        fileHandleId: fileEntity.dataFileHandleId\n      }\n    ]\n    const request: any = {\n      includeFileHandles: true,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList\n    }\n    getFiles(request, sessionToken, endpoint).then(\n      (data: BatchFileResult) => {\n        const presignedUrl: string = data.requestedFiles[0].preSignedURL\n        const fileHandle: FileHandle = data.requestedFiles[0].fileHandle\n        return getFileHandleContent(fileHandle, presignedUrl).then((content: string) => {\n          resolve(content)\n        })\n      }\n    ).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport const getFileHandleContentFromID = (\n  fileHandleId: string,\n  sessionToken: string,\n  endpoint: string = DEFAULT_ENDPOINT\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    // get the file handle and url\n    const getFileHandleByIdPromise = getFileHandleById(fileHandleId, sessionToken, endpoint)\n    const getFileHandlePresignedUrlPromis = getFileHandleByIdURL(fileHandleId, sessionToken, endpoint)\n    Promise.all([getFileHandleByIdPromise, getFileHandlePresignedUrlPromis]).then((values) => {\n      const fileHandle: FileHandle = values[0]\n      const presignedUrl: string = values[1]\n      return getFileHandleContent(fileHandle, presignedUrl).then((content: string) => {\n        resolve(content)\n      })\n    }).catch((err) => {\n      reject(err)\n    })\n  })\n}\n\nexport const getFileHandleContent = (\n  fileHandle: FileHandle,\n  presignedUrl: string\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n      // sanity check!  must be less than 5MB\n      if (fileHandle.contentSize < MAX_JS_FILE_DOWNLOAD_SIZE) {\n        fetch(presignedUrl, {\n          method: 'GET',\n          mode: 'cors',\n          cache: 'no-cache',\n          headers: {\n            'Content-Type': fileHandle.contentType,\n          }\n        }).then((response) => {\n          response.text().then((text) => {\n            resolve(text)\n          })\n        })\n      } else {\n        reject('File size exceeds max (5MB)')\n      }\n  })\n}\n\n/**\n * Create an ACL\n * https://docs.synapse.org/rest/POST/entity/id/acl.html\n */\nexport const createACL = (\n  entityId: string,\n  acl: AccessControlList,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost(`/repo/v1/entity/${entityId}/acl`, acl, sessionToken, undefined, endpoint)\n}\n\n/**\n * Submit an entity to an evaluation queue\n * https://docs.synapse.org/rest/POST/evaluation/submission.html\n */\nexport const submitToEvaluation = (\n  submission: Submission,\n  etag: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doPost(`/repo/v1/evaluation/submission?etag=${etag}`, submission, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get an evaluation queue\n * https://docs.synapse.org/rest/GET/evaluation/evalId.html\n */\nexport const getEvaluation = (\n  evalId: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n  return doGet(`/repo/v1/evaluation/${evalId}`, sessionToken, undefined, endpoint)\n}\n\n/**\n * Executes a user-defined query over the Submissions of a specific Evaluation.\n * https://docs.synapse.org/rest/GET/evaluation/submission/query.html\n */\nexport const getEvaluationSubmissions = (\n  query: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<QueryTableResults>=> {\n  return doGet(`/repo/v1/evaluation/submission/query?query=${encodeURI(query)}`, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get user-friendly OAuth2 request information (to present to the user so they can choose if they want to give consent).\n */\nexport const getOAuth2RequestDescription = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<OIDCAuthorizationRequestDescription> => {\n  return doPost('/auth/v1/oauth2/description', oidcAuthRequest, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get OAuth2 Client information (available to the public)\n */\nexport const getOAuth2Client = (\n  clientId: string,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<OAuthClientPublic> => {\n  return doGet(`/auth/v1/oauth2/client/${clientId}`, undefined, undefined, endpoint)\n}\n\n/**\n * User consents to the given OIDCAuthorizationRequest (after being presented with all information returned by getOAuth2RequestDescription())\n * @param oidcAuthRequest\n * @param sessionToken \n * @param endpoint \n */\nexport const consentToOAuth2Request = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<AccessCodeResponse>=> {\n  return doPost('/auth/v1/oauth2/consent', oidcAuthRequest, sessionToken, undefined, endpoint)\n}\n\n\n/***********************\n * FORM SERVICES\n * https://docs.synapse.org/rest/#org.sagebionetworks.repo.web.controller.FormController\n *************************/\n/**\n * Create a FormGroup\n * https://docs.synapse.org/rest/POST/form/group.html\n * @param name\n * @param sessionToken\n * @param endpoint\n */\nexport const createFormGroup = (\n  name: string,\n  sessionToken: string,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<FormGroup> => {\n  return doPost(`/repo/v1/form/group?name=${encodeURI(name)}`, undefined, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get FormGroup ACL\n * https://docs.synapse.org/rest/GET/form/group/id/acl.html\n */\nexport const getFormACL = (\n  formGroupId: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<AccessControlList> => {\n  return doGet(`/repo/v1/form/group/${formGroupId}/acl`, sessionToken, undefined, endpoint)\n}\n\n/**\n * Update FormGroup ACL\n * https://docs.synapse.org/rest/PUT/form/group/id/acl.html\n */\nexport const updateFormACL = (\n  formGroupId: string,\n  newAcl: AccessControlList,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<AccessControlList> => {\n  return doPut(`/repo/v1/form/group/${formGroupId}/acl`, newAcl, sessionToken, undefined, endpoint)\n}\n\n/**\n * Create a new FormData object\n * https://docs.synapse.org/rest/POST/form/data.html\n * @param formGroupId\n * @param name\n * @param sessionToken\n * @param endpoint\n */\nexport const createFormData = (\n  formGroupId: string,\n  name: string,\n  dataFileHandleId: string,\n  sessionToken: string,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<FormData> => {\n    const newFormData: FormChangeRequest = {\n      name,\n      fileHandleId: dataFileHandleId\n    }\n  return doPost(`/repo/v1/form/data?groupId=${formGroupId}`, newFormData, sessionToken, undefined, endpoint)\n}\n\n/**\n * Update FormData object\n * https://docs.synapse.org/rest/PUT/form/data.html\n */\nexport const updateFormData = (\n  formDataId: string,\n  name: string,\n  dataFileHandleId: string,  \n  sessionToken: string,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<FormData> => {\n    const updatedFormData: FormChangeRequest = {\n      name,\n      fileHandleId: dataFileHandleId\n    }\n    return doPut(`/repo/v1/form/data/${formDataId}`, updatedFormData, sessionToken, undefined, endpoint)\n}\n\n/**\n * Delete FormData object\n * https://docs.synapse.org/rest/DELETE/form/data.html\n */\nexport const deleteFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) => {\n    return doDelete(`/repo/v1/form/data/${formDataId}`, sessionToken, undefined, endpoint)\n}\n\n/**\n * Submit the identified FormData for review.\n * https://docs.synapse.org/rest/POST/form/data/id/submit.html\n */\nexport const submitFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<FormData>=> {\n    return doPost(`/repo/v1/form/data/${formDataId}/submit`, undefined, sessionToken, undefined, endpoint)\n}\n\n/**\n * List FormData objects and their associated status that match the filters of the provided request that are \n * owned by the caller. Note: Only objects owned by the caller will be returned.\n * https://docs.synapse.org/rest/POST/form/data/list.html\n */\nexport const listFormData = (\n  request: ListRequest,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<ListResponse>=> {\n    return doPost(`/repo/v1/form/data/list`, request, sessionToken, undefined, endpoint)\n}\n\n/**\n * List FormData objects and their associated status that match the filters of the provided request for the entire \n * group. This is used by service accounts to process submissions. \n * https://docs.synapse.org/rest/POST/form/data/list/reviewer.html\n */\nexport const listFormDataAsFormAdmin = (\n  request: ListRequest,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<ListResponse>=> {\n    return doPost(`/repo/v1/form/data/list/reviewer`, request, sessionToken, undefined, endpoint)\n}\n\n/**\n * Called by the form processing service to accept a submitted data.\n * https://docs.synapse.org/rest/PUT/form/data/id/accept.html\n */\nexport const acceptFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<FormData>=> {\n    return doPut(`/repo/v1/form/data/${formDataId}/accept`, undefined, sessionToken, undefined, endpoint)\n}\n\n/**\n * Called by the form processing service to reject a submitted data.\n * https://docs.synapse.org/rest/PUT/form/data/id/reject.html\n */\nexport const rejectFormData = (\n  formDataId: string,\n  reason: string,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<FormData>=> {\n    const formRejection: FormRejection = {\n      reason\n    }\n    return doPut(`/repo/v1/form/data/${formDataId}/reject`, formRejection, sessionToken, undefined, endpoint)\n}\n\n/**\n * Get Statistics\n * https://docs.synapse.org/rest/POST/statistics.html\n * Generic endpoint to retrieve statistics about objects. The user should have VIEW_STATISTICS access on the object referenced by the objectId in the request.\n */\nexport const getProjectStatistics = (\n  request: ProjectFilesStatisticsRequest,\n  sessionToken: string | undefined,\n  endpoint: string = DEFAULT_ENDPOINT) : Promise<ProjectFilesStatisticsResponse>=> {\n    return doPost(`/repo/v1/statistics`, request, sessionToken, undefined, endpoint)\n}\n\nconst setCookie = (name: string, value: string | undefined, days: number) => {\n  if (!value) {return}\n  let expires = ''\n  if (days) {\n    const date = new Date()\n    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000))\n    expires = `; expires=${date.toUTCString()}`\n  }\n  document.cookie = `${name}=${value || ''}${expires}; path=/`\n}\nconst getCookie = (name: string) => {\n  const nameEQ = `${name}=`\n  const ca = document.cookie.split(';');\n  for (let i = 0; i < ca.length; i++) {\n    let c = ca[i];\n    while (c.charAt(0) == ' ') c = c.substring(1, c.length);\n    if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);\n  }\n  return null;\n}\nconst removeCookie = (name: string) => {\n  document.cookie = `${name}=; Max-Age=-99999999;`;\n}","import * as React from 'react'\nimport ButtonContent from '../assets/ButtonContent'\nimport GoogleIcon from '../assets/GoogleIcon'\nimport { SynapseClient } from '../utils'\n\ntype State = {\n  username: string\n  password: string\n  email: string\n  isSignedIn: boolean\n  hasLoginInFailed: boolean\n  errorMessage: string\n}\n\ntype Props = {\n  token: string | undefined\n  theme: string\n  icon: boolean\n  repoEndpoint?: string\n  swcEndpoint?: string\n  googleRedirectUrl?: string  \n}\n\n/**\n *  Demo of user session, show login screen and handling user login submission.\n *\n *  To support Google SSO in your portal, you must add your domain to the Authorized Redirect URIs\n *  for Synapse authentication.\n *  This can be done by contacting synapseInfo@sagebionetworks.org to form a collaboration.\n *  Synapse engineers must add your redirect URL in the Google API console found at https://console.cloud.google.com/ for this functionality to work.\n *\n * @class Login\n * @extends {React.Component}\n */\nclass Login extends React.Component<Props, State> {\n\n    /**\n     * Creates a user session, maintaining credentials\n     * @param {*} props\n     * @memberof Login\n     */\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      email: '',\n      errorMessage: '',\n      hasLoginInFailed: false,\n      isSignedIn: false,\n      password: '',\n      username: ''\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleLogin = this.handleLogin.bind(this)\n    this.getTokenView = this.getTokenView.bind(this)\n    this.getLoginFailureView = this.getLoginFailureView.bind(this)\n    this.onSignIn = this.onSignIn.bind(this)\n  }\n    /**\n     * Updates internal state with the event that was triggered\n     *\n     * @param {*} event Form update\n     */\n  public handleChange(event: React.FormEvent<HTMLInputElement>): void {\n    const target = event.currentTarget\n    const name = target.name\n    const value = target.value\n    const newState: (Pick<any, any>) = { [name]: value }\n    this.setState(newState)\n  }\n    /**\n     * Handle user login on click\n     *\n     * @param {*} clickEvent Userclick event\n     */\n  public handleLogin(clickEvent: React.FormEvent<HTMLElement>) {\n    clickEvent.preventDefault() // avoid page refresh\n    const repoEndpoint = this.props.repoEndpoint ? this.props.repoEndpoint : SynapseClient.DEFAULT_ENDPOINT\n    const swcEndpoint = this.props.swcEndpoint ? this.props.swcEndpoint : SynapseClient.DEFAULT_SWC_ENDPOINT\n    SynapseClient.login(this.state.username, this.state.password, repoEndpoint)\n            .then((data: any) => {\n              SynapseClient.setSessionTokenCookie(data.sessionToken, swcEndpoint).then(() => {\n                // on session change, reload the page so that all components get the new token from the cookie\n                window.location.reload()\n              }).catch((errSetSession) => {\n                console.log('Could not set session token cookie!', errSetSession)\n                this.setState({\n                  errorMessage: errSetSession.reason,\n                  hasLoginInFailed: true,\n                  isSignedIn: false\n                })\n              })\n            })\n            .catch((err: any) => {\n              console.log('Handle login failed with err = ', err)\n              this.setState({\n                errorMessage: err.reason,\n                hasLoginInFailed: true,\n                isSignedIn: false\n              })\n            })\n  }\n\n    /**\n     * Shows user session token if they've signed in\n     *\n     * @returns View displaying user session on login, otherwise null.\n     */\n  public getTokenView(): (JSX.Element | boolean) {\n    if (this.state.isSignedIn && this.props.token !== '' && !this.state.hasLoginInFailed) {\n      return <p> Your session token is {this.props.token} </p>\n    }\n    return false\n  }\n    /**\n     * Shows user login failure view on login failure\n     *\n     * @returns view to be displayed on user sign in error.\n     */\n  public getLoginFailureView(): (JSX.Element | boolean) {\n    if (this.state.hasLoginInFailed) {\n      return (\n                <div>\n                    <small className=\"form-text text-danger\"> {this.state.errorMessage} </small>\n                    <div className=\"invalid-feedback\" />\n                </div>\n      )\n    }\n    return false\n  }\n    /**\n     * Show whether user is signed in or not, display banner on login success\n     *\n     * @returns View corresponding to whether the user is signed in, whether they've dismissed\n     * sign in banner\n     */\n  public getSignInStateView(): (JSX.Element | boolean) {\n    if (!this.state.isSignedIn) {\n      return (\n                <p>\n                    {' '}\n                    You are currently{' '}\n                    <strong>\n                        {' '}\n                        <i> not </i>{' '}\n                    </strong>{' '}\n                    signed in to Synpase{' '}\n                </p>\n      )\n    }\n    return false\n  }\n  public onSignIn(event: React.MouseEvent<HTMLButtonElement>) {\n    // save current route (so that we can go back here after SSO)\n    localStorage.setItem('after-sso-login-url', window.location.href)\n    event.preventDefault()\n    const redirectUrl = this.props.googleRedirectUrl ? this.props.googleRedirectUrl : `${SynapseClient.getRootURL()}?provider=${SynapseClient.AUTH_PROVIDER}`\n    SynapseClient.oAuthUrlRequest(SynapseClient.AUTH_PROVIDER, redirectUrl)\n            .then((data: any) => {\n              const authUrl = data.authorizationUrl\n              window.location = authUrl // ping the url\n            })\n            .catch((err: any) => {\n              console.log('Error on oAuth url ', err)\n            })\n  }\n  public render() {\n    const { theme, icon } = this.props\n    const swcEndpoint = this.props.swcEndpoint ? this.props.swcEndpoint : SynapseClient.DEFAULT_SWC_ENDPOINT\n    const googleTheme = theme === 'dark' ? 'SRC-google-button-dark-color' : 'SRC-google-button-light-color'\n    return (\n      <div id=\"loginPage\" className=\"container loginContainer SRC-syn-border-spacing\">\n        <form>\n          <button onClick={this.onSignIn} className={`SRC-google-button ${googleTheme} SRC-marginBottomTen`}>\n          <GoogleIcon key={1} active={true} />\n          <ButtonContent icon={icon} key={2}>\n              Sign in with Google\n          </ButtonContent>\n          </button>\n        </form>\n        <div className=\"SRC-center-text SRC-deemphasized-text SRC-marginBottomTen\">or</div>\n\n        <div className=\"SRC-centerAndJustifyContent SRC-marginBottomTen\">\n          <img \n            height=\"20px\"\n            style={{marginRight: '10px'}}\n            alt={'sage bionetworks logo'}\n            src=\"https://s3.amazonaws.com/static.synapse.org/sage-bionetworks-logo.svg\" \n          />\n          Sign in with your Sage Bionetworks Synapse account\n        </div>\n        <form onSubmit={this.handleLogin} className=\"form-group\">\n          <input\n            autoComplete=\"username\"\n            placeholder=\"username or email\"\n            className=\"form-control SRC-marginBottomTop\"\n            id=\"exampleEmail\"\n            name=\"username\"\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n          <input\n            autoComplete=\"password\"\n            placeholder=\"password\"\n            className=\"form-control SRC-marginBottomTop\"\n            id=\"examplePassword\"\n            name=\"password\"\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n          {this.getLoginFailureView()}\n          <button\n            onSubmit={this.handleLogin}\n            type=\"submit\"\n            className=\"btn SRC-primary-background-color SRC-hoverWhiteText\n              SRC-whiteText m-1 SRC-google-button SRC-marginBottomTen\"\n          >\n            <ButtonContent icon={icon}>\n              Sign in\n            </ButtonContent>\n          </button>\n        </form>\n        <div>\n          <a\n            href={`${swcEndpoint}#!PasswordReset:0`}\n            className=\"SRC-floatLeft SRC-primary-text-color\"\n          >\n            Forgot password?\n          </a>\n          <span className=\"SRC-deemphasized-text SRC-floatRight\">&nbsp;It's free!</span>\n          <a\n            href={`${swcEndpoint}#!RegisterAccount:0`}\n            className=\"SRC-floatRight SRC-primary-text-color\"\n          >\n            Register\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Login\n","\nconst COLOR_PALETTE_EVEN: string [] = [\n  'rgb(91,176,181)',\n  'rgb(124,192,196)',\n  'rgb(157,208,211)',\n  'rgb(189,223,225)',\n  'rgb(222,239,240)',\n  'rgb(217,229,236)',\n  'rgb(179,202,217)',\n  'rgb(140,176,198)',\n  'rgb(102,149,179)',\n  'rgb(64,123,160)',\n  'rgb(201,66,129)',\n  'rgb(212,104,154)',\n  'rgb(223,142,179)',\n  'rgb(233,179,205)',\n  'rgb(244,217,230)',\n  'rgb(218,214,229)',\n  'rgb(181,173,203)',\n  'rgb(145,133,177)',\n  'rgb(108,92,151)',\n  'rgb(71,51,125)',\n  'rgb(222,154,31)',\n  'rgb(229,174,76)',\n  'rgb(235,194,121)',\n  'rgb(242,215,165)',\n  'rgb(248,235,210)',\n  'rgb(207,234,231)',\n  'rgb(159,212,207)',\n  'rgb(112,191,184)',\n  'rgb(64,169,160)',\n  'rgb(16,148,136)',\n  'rgb(60,74,99)',\n  'rgb(99,110,130)',\n  'rgb(138,146,161)',\n  'rgb(177,183,193)',\n  'rgb(216,219,224)',\n  'rgb(246,226,210)',\n  'rgb(238,197,165)',\n  'rgb(229,167,120)',\n  'rgb(221,138,75)',\n  'rgb(212,109,30)',\n  'rgb(88,161,88)',\n  'rgb(121,180,121)',\n  'rgb(155,199,155)',\n  'rgb(188,217,188)',\n  'rgb(222,236,222)',\n  'rgb(220,227,242)',\n  'rgb(185,198,230)',\n  'rgb(151,170,217)',\n  'rgb(116,141,205)',\n  'rgb(81,113,192)',\n  'rgb(178,36,42)',\n  'rgb(193,80,85)',\n  'rgb(209,124,127)',\n  'rgb(224,167,170)',\n  'rgb(240,211,212)',\n  'rgb(222,239,240)',\n  'rgb(189,223,225)',\n  'rgb(157,208,211)',\n  'rgb(124,192,196)',\n  'rgb(91,176,181)',\n  'rgb(64,123,160)',\n  'rgb(102,149,179)',\n  'rgb(140,176,198)',\n  'rgb(179,202,217)',\n  'rgb(217,229,236)',\n  'rgb(244,217,230)',\n  'rgb(233,179,205)',\n  'rgb(223,142,179)',\n  'rgb(212,104,154)',\n  'rgb(201,66,129)',\n  'rgb(71,51,125)',\n  'rgb(108,92,151)',\n  'rgb(145,133,177)',\n  'rgb(181,173,203)',\n  'rgb(218,214,229)',\n  'rgb(248,235,210)',\n  'rgb(242,215,165)',\n  'rgb(235,194,121)',\n  'rgb(229,174,76)',\n  'rgb(222,154,31)',\n  'rgb(16,148,136)',\n  'rgb(64,169,160)',\n  'rgb(112,191,184)',\n  'rgb(159,212,207)',\n  'rgb(207,234,231)',\n  'rgb(216,219,224)',\n  'rgb(177,183,193)',\n  'rgb(138,146,161)',\n  'rgb(99,110,130)',\n  'rgb(60,74,99)',\n  'rgb(212,109,30)',\n  'rgb(221,138,75)',\n  'rgb(229,167,120)',\n  'rgb(238,197,165)',\n  'rgb(246,226,210)',\n  'rgb(222,236,222)',\n  'rgb(188,217,188)',\n  'rgb(155,199,155)',\n  'rgb(121,180,121)',\n  'rgb(88,161,88)',\n  'rgb(81,113,192)',\n  'rgb(116,141,205)',\n  'rgb(151,170,217)',\n  'rgb(185,198,230)',\n  'rgb(220,227,242)',\n  'rgb(240,211,212)',\n  'rgb(224,167,170)',\n  'rgb(209,124,127)',\n  'rgb(193,80,85)',\n  'rgb(178,36,42)'\n]\n\nconst COLOR_PALETTE_ODD: string [] = [\n  'rgb(64,123,160)',\n  'rgb(102,149,179)',\n  'rgb(140,176,198)',\n  'rgb(179,202,217)',\n  'rgb(217,229,236)',\n  'rgb(244,217,230)',\n  'rgb(233,179,205)',\n  'rgb(223,142,179)',\n  'rgb(212,104,154)',\n  'rgb(201,66,129)',\n  'rgb(71,51,125)',\n  'rgb(108,92,151)',\n  'rgb(145,133,177)',\n  'rgb(181,173,203)',\n  'rgb(218,214,229)',\n  'rgb(248,235,210)',\n  'rgb(242,215,165)',\n  'rgb(235,194,121)',\n  'rgb(229,174,76)',\n  'rgb(222,154,31)',\n  'rgb(16,148,136)',\n  'rgb(64,169,160)',\n  'rgb(112,191,184)',\n  'rgb(159,212,207)',\n  'rgb(207,234,231)',\n  'rgb(216,219,224)',\n  'rgb(177,183,193)',\n  'rgb(138,146,161)',\n  'rgb(99,110,130)',\n  'rgb(60,74,99)',\n  'rgb(212,109,30)',\n  'rgb(221,138,75)',\n  'rgb(229,167,120)',\n  'rgb(238,197,165)',\n  'rgb(246,226,210)',\n  'rgb(222,236,222)',\n  'rgb(188,217,188)',\n  'rgb(155,199,155)',\n  'rgb(121,180,121)',\n  'rgb(88,161,88)',\n  'rgb(81,113,192)',\n  'rgb(116,141,205)',\n  'rgb(151,170,217)',\n  'rgb(185,198,230)',\n  'rgb(220,227,242)',\n  'rgb(240,211,212)',\n  'rgb(224,167,170)',\n  'rgb(209,124,127)',\n  'rgb(193,80,85)',\n  'rgb(178,36,42)',\n  'rgb(91,176,181)',\n  'rgb(124,192,196)',\n  'rgb(157,208,211)',\n  'rgb(189,223,225)',\n  'rgb(222,239,240)',\n  'rgb(217,229,236)',\n  'rgb(179,202,217)',\n  'rgb(140,176,198)',\n  'rgb(102,149,179)',\n  'rgb(64,123,160)',\n  'rgb(201,66,129)',\n  'rgb(212,104,154)',\n  'rgb(223,142,179)',\n  'rgb(233,179,205)',\n  'rgb(244,217,230)',\n  'rgb(218,214,229)',\n  'rgb(181,173,203)',\n  'rgb(145,133,177)',\n  'rgb(108,92,151)',\n  'rgb(71,51,125)',\n  'rgb(222,154,31)',\n  'rgb(229,174,76)',\n  'rgb(235,194,121)',\n  'rgb(242,215,165)',\n  'rgb(248,235,210)',\n  'rgb(207,234,231)',\n  'rgb(159,212,207)',\n  'rgb(112,191,184)',\n  'rgb(64,169,160)',\n  'rgb(16,148,136)',\n  'rgb(60,74,99)',\n  'rgb(99,110,130)',\n  'rgb(138,146,161)',\n  'rgb(177,183,193)',\n  'rgb(216,219,224)',\n  'rgb(246,226,210)',\n  'rgb(238,197,165)',\n  'rgb(229,167,120)',\n  'rgb(221,138,75)',\n  'rgb(212,109,30)',\n  'rgb(88,161,88)',\n  'rgb(121,180,121)',\n  'rgb(155,199,155)',\n  'rgb(188,217,188)',\n  'rgb(222,236,222)',\n  'rgb(220,227,242)',\n  'rgb(185,198,230)',\n  'rgb(151,170,217)',\n  'rgb(116,141,205)',\n  'rgb(81,113,192)',\n  'rgb(178,36,42)',\n  'rgb(193,80,85)',\n  'rgb(209,124,127)',\n  'rgb(224,167,170)',\n  'rgb(240,211,212)',\n  'rgb(222,239,240)',\n  'rgb(189,223,225)',\n  'rgb(157,208,211)',\n  'rgb(124,192,196)',\n  'rgb(91,176,181)'\n]\n\nexport { COLOR_PALETTE_EVEN, COLOR_PALETTE_ODD }\n","import { COLOR_PALETTE_EVEN, COLOR_PALETTE_ODD } from './colorPalette'\n\nexport function getColorPallette(start: number, end: number): {colorPalette: string [], textColors: string []} {\n  let colorPalleteSelection = []\n  const textColors = []\n  let offset = -1\n\n  if (start % 2 === 0) {\n    colorPalleteSelection = COLOR_PALETTE_EVEN\n    offset = start * 5\n  } else {\n    colorPalleteSelection = COLOR_PALETTE_ODD\n    offset = (start - 1) * 5\n  }\n\n  const colorPalette: string [] = []\n\n  for (let i = 0; i < end; i += 1) {\n    const textColor: string = i % 10 < 2 || i % 10 > 7 ? 'white' : 'black'\n    const color: string =  `${colorPalleteSelection[(offset + i) % colorPalleteSelection.length]}`\n    colorPalette.push(color)\n    textColors.push(textColor)\n  }\n  return { colorPalette, textColors }\n}\n\nexport default getColorPallette\n","// This file is used for any import modules that have to be\n// rewritten due rollup import nuances\n\nimport * as cloneDeepProxy from 'lodash.clonedeep'\n\n// wonky syntax explained here - https://github.com/rollup/rollup/issues/670#issuecomment-281139978\nexport function cloneDeep <T>(x : T): T {\n  const fn = ((cloneDeepProxy as any).default) || cloneDeepProxy\n  return fn(x)\n}\n","import { QueryBundleRequest } from '../jsonResponses/Table/QueryBundleRequest'\nimport { SynapseClient, SynapseConstants } from '../'\nimport { QueryResultBundle } from '../jsonResponses/Table/QueryResultBundle'\nimport { cloneDeep } from './rollupCompatibleModules'\n\ntype PartialStateObject = {\n  hasMoreData: boolean,\n  data: QueryResultBundle,\n}\n\n/**\n * Grab the next page of data, pulling in 25 more rows.\n *\n * @param {*} queryRequest Query request as specified by\n *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n */\nexport const getNextPageOfData = async (queryRequest: QueryBundleRequest, data: QueryResultBundle, token?: string) => {\n  return await SynapseClient.getQueryTableResults(queryRequest, token)\n    .then(\n    (newData: QueryResultBundle) => {\n      const oldData: QueryResultBundle = cloneDeep(data)!\n      // push on the new data retrieved from the API call\n      const hasMoreData = newData\n                          .queryResult\n                          .queryResults\n                          .rows\n                          .length === SynapseConstants.PAGE_SIZE\n      oldData.queryResult.queryResults.rows.push(...newData.queryResult.queryResults.rows)\n      const newState: PartialStateObject = {\n        hasMoreData,\n        data: oldData,\n      }\n      return newState\n    }\n    ).catch((err) => {\n      console.log('Failed to get data ', err)\n      return {} as PartialStateObject\n    })\n}\n","import { FacetSelection } from '../../containers/QueryWrapper'\nimport { QueryBundleRequest } from '../jsonResponses/Table/QueryBundleRequest'\nimport { FacetColumnValuesRequest } from '../jsonResponses/Table/FacetColumnRequest'\nimport { SELECT_SINGLE_FACET } from '../../containers/Facets'\nimport { FacetColumnResultValueCount } from '../jsonResponses/Table/FacetColumnResult'\n\n/**\n *  Calculates the state of a specific facet value given the current state\n *  of the application.\n *\n * @param\n *     isLoading: boolean | undefined,\n *     lastFacetSelection: FacetSelection | undefined,\n *     curFacetSelection: any,\n *     columnName: string\n * @returns boolean\n */\n\nexport const getIsValueSelected = ({\n  isLoading,\n  lastFacetSelection,\n  curFacetSelection,\n  columnName\n} : {\n  isLoading: boolean | undefined,\n  lastFacetSelection: FacetSelection | undefined,\n  curFacetSelection: FacetColumnResultValueCount,\n  columnName: string\n}) => {\n  if (isLoading && columnName === lastFacetSelection!.columnName) {\n    // indicates there is a selection made with this current facet value\n    if (lastFacetSelection!.facetValue === curFacetSelection.value) {\n      return !curFacetSelection.isSelected\n    }\n    if (lastFacetSelection!.selector === SELECT_SINGLE_FACET) {\n      return false\n    }\n  }\n  /*\n    else, the information has come back from the server and we can\n    rely on that\n  */\n  return curFacetSelection.isSelected\n\n}\n\nexport type SyntheticHTMLInputElement = {\n  value: string\n  checked: boolean\n}\n\n/**\n * Function reads over a set of checkboxes and then returns a corresponding\n * queryRequest given the state of the prior queryRequest\n *   htmlCheckboxes: any,\n *   selector : string,\n *   queryRequest: QueryBundleRequest,\n *   facet: string,\n *   value?: string\n * }\n * @returns\n */\nexport const readFacetValues = ({\n  htmlCheckboxes,\n  selector,\n  queryRequest,\n  facet,\n  value\n}: {\n  htmlCheckboxes: SyntheticHTMLInputElement [],\n  selector : string,\n  queryRequest: QueryBundleRequest,\n  facet: string,\n  value?: string\n}) => {\n  const facetValues: string[] = []\n\n  if (!selector) {\n    // no selector was clicked -- read over facet values as normal and see what was clicked\n    for (let i = 0; i < htmlCheckboxes.length; i += 1) {\n      const checkbox = htmlCheckboxes[i]\n      const isSelected = checkbox.checked\n      if (isSelected) {\n        facetValues.push(checkbox.value)\n      }\n    }\n  } else if (selector === SELECT_SINGLE_FACET) {\n    // SELECT_SINGLE_FACET acts as a radio selection, thats the only selection\n    facetValues.push(value!)\n  } // else selector === SELECT_ALL, we don't add any values, empty is treated as SELECT_ALL\n  const newQueryRequest: QueryBundleRequest = queryRequest\n  const { selectedFacets = [] } = newQueryRequest.query\n\n  const specificFacet = selectedFacets!.find(el => el.columnName === facet)!\n  if (!specificFacet) {\n    const facetColumnValuesRequest: FacetColumnValuesRequest =  {\n      facetValues,\n      concreteType: 'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n      columnName: facet\n    }\n    selectedFacets.push(facetColumnValuesRequest)\n    // align the reference to selectedFacets\n    newQueryRequest.query.selectedFacets = selectedFacets\n  } else {\n    specificFacet.facetValues = facetValues\n  }\n\n  return { newQueryRequest }\n}\n","import * as React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faLongArrowAltUp, faLongArrowAltDown } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { DOI_REGEX } from '../../../containers/GenericCard'\nlibrary.add(faLongArrowAltUp)\nlibrary.add(faLongArrowAltDown)\n\ntype State = {\n  isShowMoreOn: boolean\n  isDesktop: boolean\n}\n\ntype CardFooterProps = {\n  values: any [],\n  isHeader: boolean\n  secondaryLabelLimit?: number\n}\n\n// regex to see if string is url - https://stackoverflow.com/a/3809435\nconst URL_REGEX = /[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)?/gi;\n\nclass CardFooter extends React.Component<CardFooterProps, State> {\n\n  constructor(props: CardFooterProps) {\n    super(props)\n    this.state = {\n      isShowMoreOn: false,\n      isDesktop: false\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n    this.updatePredicate = this.updatePredicate.bind(this)\n  }\n\n  toggleShowMore() {\n    this.setState({\n      isShowMoreOn: !this.state.isShowMoreOn\n    })\n  }\n\n  componentDidMount() {\n    this.updatePredicate()\n    window.addEventListener('resize', this.updatePredicate)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updatePredicate)\n  }\n\n  updatePredicate() {\n    this.setState({ isDesktop: window.innerWidth > 600 })\n  }\n\n  renderRowValue = (columnName: string, value: string) => {\n    let textColorClass = this.props.isHeader ? 'SRC-lightLink' : ''\n    if (!value.match) {\n      // value can sometimes be a react element, so it doesn't have a .match function, interestingly I didn't \n      // see typeof return 'object' for that case which would be a better check.\n      return value\n    }\n    if (value.match(DOI_REGEX)) {\n      return  (\n        <a className={textColorClass} data-search-handle={columnName} target=\"_blank\" rel=\"noopener noreferrer\"  href={`https://dx.doi.org/${value}`}>\n          {value}\n        </a>\n      )\n    } else if (value.match(URL_REGEX)) {\n      return  (\n        <a className={textColorClass} data-search-handle={columnName} target=\"_blank\" rel=\"noopener noreferrer\"  href={value}>\n          {value}\n        </a>\n      ) \n    }\n    return value\n  }\n\n  renderRows = (values: string [][], limit: number, isDesktop: boolean) => {\n    return values.map((kv, index) => {\n      const hideClass =  (index >= limit ? 'SRC-hidden' : '')\n      const columnName = kv[0]\n      const value = this.renderRowValue(columnName, kv[1])\n      if (isDesktop) {\n        return (\n          <tr className={\"SRC-cardRowDesktop \" + hideClass} key={index}>\n            <td className={'SRC-verticalAlignTop SRC-row-label'}> {columnName} </td>\n            <td data-search-handle={columnName} className={\"SRC-row-data SRC-limitMaxWidth \"}> {value} </td>\n          </tr>\n        )\n      }\n      return (\n        <React.Fragment key={index}>\n          <tr className={\"SRC-cardRowMobile \" + hideClass}>\n            <td className={'SRC-verticalAlignTop SRC-row-label'}> {columnName} </td>\n          </tr>\n          <tr className={\"SRC-cardRowMobile \" + hideClass}>\n            <td data-search-handle={columnName} className=\"SRC-row-data SRC-limitMaxWidth\"> {value} </td>\n          </tr>\n        </React.Fragment>\n      )\n    })\n  }\n\n  render() {\n    const { values, secondaryLabelLimit = 3 } = this.props\n    const { isShowMoreOn, isDesktop } = this.state\n    let valuesFiltered = values.filter(el => el[1])\n    const hasMoreValuesThanLimit = valuesFiltered.length > secondaryLabelLimit\n    const limit = !hasMoreValuesThanLimit || isShowMoreOn ? Infinity: secondaryLabelLimit\n    return (\n      <div className=\"SRC-cardMetadata\">\n        <table>\n          <tbody>\n            {this.renderRows(valuesFiltered, limit, isDesktop)}\n            {\n              hasMoreValuesThanLimit &&\n                <tr className=\"SRC-cardRow\">\n                  <td>\n                  <button\n                    style={{ textAlign: 'left', margin: 0, padding: 0 }}\n                    className=\"SRC-primary-text-color SRC-basicButton\"\n                    onClick={this.toggleShowMore}\n                  >\n                    Show {isShowMoreOn ?  'Less' : 'More'}\n                    <FontAwesomeIcon\n                      style={{ marginLeft: '5px' }}\n                      icon={isShowMoreOn ? 'long-arrow-alt-up' : 'long-arrow-alt-down'}\n                    />\n                  </button>\n                  </td>\n                </tr>\n            }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\nexport default CardFooter\n","import * as React from 'react'\n\ntype ChipContainerProps = {\n  chips: any []\n}\n\nconst ChipContainer: React.SFC<ChipContainerProps> = ({ chips }) => {\n  const chipsFormatted = chips.map((el, index) => {\n    if (!el) {\n      return false\n    }\n    return <span key={index}> {el}</span>\n  })\n  return (\n        <React.Fragment>\n            {chipsFormatted}\n        </React.Fragment>\n  )\n}\nexport default ChipContainer\n","import * as React from 'react'\nimport {\n  DATASET,\n  FUNDER,\n  PUBLICATION,\n  STUDY_ACTIVE,\n  STUDY_COMPLETE,\n  TOOL,\n  STUDY,\n  EXPERIMENTAL,\n  COMPUTATIONAL,\n  CLINICAL,\n  PROJECT\n} from '../../../utils/SynapseConstants'\n\nimport PublicationSvg from '../../../assets/icons/Publication.svg'\nimport Data2Svg from '../../../assets/icons/Data2.svg'\nimport studyActiveSvg from '../../../assets/icons/study-active.svg'\nimport studySvg from '../../../assets/icons/study.svg'\nimport studyCompleteSvg from '../../../assets/icons/study-complete.svg'\nimport DNA_TwoSvg from '../../../assets/icons/DNA_Two.svg'\nimport ToolClinicalSvg from '../../../assets/icons/ToolClinical.svg'\nimport ToolComputationalSvg from '../../../assets/icons/ToolComputational.svg'\nimport ToolExperimentalSvg from '../../../assets/icons/ToolExperimental.svg'\nimport projectSvg from '../../../assets/icons/project.svg'\n\nimport { KeyValue } from '../../../../lib/utils/modules/sqlFunctions'\n\ntype IconProps = {\n  type: string\n  iconOptions?: KeyValue\n  value?: string\n}\n\nconst defaultIcons = {\n  [PUBLICATION]: PublicationSvg,\n  [DATASET]: Data2Svg,\n  [FUNDER]: Data2Svg,\n  [STUDY_ACTIVE]: studyActiveSvg,\n  [STUDY_COMPLETE]: studyCompleteSvg,\n  [STUDY]: studySvg,\n  [TOOL]: DNA_TwoSvg,\n  [EXPERIMENTAL]: ToolExperimentalSvg,\n  [COMPUTATIONAL]: ToolComputationalSvg,\n  [CLINICAL]: ToolClinicalSvg,\n  [PROJECT]: projectSvg\n}\nconst Icon: React.FunctionComponent<IconProps> = ({ type, value = '', iconOptions }) => {\n  const iconSet = { ...defaultIcons, ...iconOptions }\n  // see if the value has a corresponding icon, e.g. 'Active' in a studies table\n  // or if the type of card has a corresponding icon, e.g. 'Publication'\n  const icon = iconSet[value] || iconSet[type]\n  // TODO: get rid of dataset icon class, none of the icons should be special cased\n  const datasetIconClass = (value === DATASET) || (type === DATASET) ? 'SRC-datasetIcon' : ''\n  return (<img className={`iconImg  ${datasetIconClass}`} src={icon} />)\n}\nexport default Icon\n","import * as React from 'react'\nconst CHAR_COUNT_CUTOFF = 400\n\ntype ShowMoreState = {\n  showMore: boolean\n}\n\ntype ShowMoreProps = {\n  summary: string\n}\n\nexport default class ShowMore extends React.Component<ShowMoreProps, ShowMoreState> {\n\n  constructor(props: ShowMoreProps) {\n    super(props)\n    this.state = {\n      showMore: false\n    }\n    this.toggleShowMore = this.toggleShowMore.bind(this)\n  }\n\n  public toggleShowMore(event: React.MouseEvent<HTMLAnchorElement>) {\n    event.preventDefault()\n    this.setState({\n      showMore: true\n    })\n  }\n\n  getCutoff = (summary: string ) => {\n    let previewText = ''\n    if (!summary) { \n      return { previewText}\n    }\n    let hiddenText = ''\n    const summarySplit = summary!.split(' ')\n    // find num words to join such that its >= char_count_cutoff\n    let i = 0\n    while (previewText.length < CHAR_COUNT_CUTOFF && i < summarySplit.length) {\n      previewText += `${summarySplit[i]} `\n      i += 1\n    }\n    if (i < summarySplit.length - 1 ) {\n      hiddenText = summarySplit.slice(i).join(' ')\n    }\n    return { previewText, hiddenText}\n  }\n\n  public render() {\n    const { summary } = this.props\n    const meetsCharRequirements = summary && summary.length >= CHAR_COUNT_CUTOFF\n    let { previewText, hiddenText } = this.getCutoff(summary)\n    const showMoreButton =  (\n        meetsCharRequirements &&\n        (\n        <a\n          style={{ fontSize: '14px', cursor: 'pointer', marginLeft: '1px' }}\n          className=\"SRC-primary-text-color\"\n          onClick={this.toggleShowMore}\n        >\n           ...Show More\n        </a>\n        )\n    )\n    return (\n      <React.Fragment>\n        <span>\n          {previewText}\n          <span className={this.state.showMore ? '': 'SRC-hidden'}>\n            {hiddenText}\n          </span>\n        </span>\n        {!this.state.showMore && showMoreButton}\n      </React.Fragment>\n    )\n  }\n}\n","import * as React from 'react'\nimport { CardFooter, Icon } from './row_renderers/utils'\n\nexport type IconOptions = {\n  [index: string]: string\n}\nexport type HeaderCardProps = {\n  iconOptions?: IconOptions\n  backgroundColor?: string\n  type: string\n  title: string\n  subTitle: string\n  description: string\n  iconValue: string\n  secondaryLabelLimit?: number\n  values?: string [][]\n}\n\nconst HeaderCard:React.FunctionComponent<HeaderCardProps> = ({\n  type,\n  title,\n  subTitle,\n  description,\n  iconOptions,\n  iconValue,\n  backgroundColor,\n  values,\n  secondaryLabelLimit\n}) => {\n  const style: React.CSSProperties = {\n    background: backgroundColor,\n  }\n  return (\n    <div\n      style={style}\n      className={'SRC-portalCardHeader'}\n    >\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-md-1 iconContainer\">\n            <Icon value={iconValue} iconOptions={iconOptions} type={type} />\n          </div>\n          <div className=\"SRC-cardContent col-md-10\">\n            <div className=\"SRC-type\">{type}</div>\n            <div >\n              <h3 className=\"SRC-boldText SRC-blackText\" style={{ margin: 'none' }}>\n                {title}\n              </h3>\n            </div>\n            {subTitle && <div className=\"SRC-author\"> {subTitle} </div>}\n            <span className=\"SRC-font-size-base\">\n              {description}\n            </span>\n            <div style={{ borderTop: '1px solid rgba(26, 28, 41, 0.2)', marginTop: '15px', paddingTop: '5px' }}>\n              {values && <CardFooter isHeader={true} secondaryLabelLimit={secondaryLabelLimit} values={values}/>}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default HeaderCard\n","import * as React from 'react'\nimport HeaderCard from './HeaderCard'\nimport { CardFooter, Icon } from './row_renderers/utils'\nimport { CardLink, LabelLinkConfig, LabelLink } from './CardContainerLogic'\n\nexport type KeyToAlias = {\n  key: string\n  alias?: string\n}\n\nexport type KeyToAliasMap = {\n  [index: number]: KeyToAlias\n  [index: string]: KeyToAlias\n}\n\nexport type GenericCardSchema = {\n  type: string\n  title: string\n  subTitle?: string\n  description?: string\n  icon?: string\n  secondaryLabels?: any []\n  link?: string\n}\n\nexport type IconOptions = {\n  [index: string]: string\n}\n\nexport type GenericCardProps = {\n  facetAliases?: {}\n  iconOptions?: IconOptions\n  backgroundColor?: string\n  isHeader?: boolean\n  genericCardSchema: GenericCardSchema,\n  schema: any,\n  data: any\n  secondaryLabelLimit?: number\n  titleLinkConfig?: CardLink\n  labelLinkConfig?: LabelLinkConfig\n}\n\nexport type GenericCardState = {\n  showMoreDescription: boolean\n}\n\nconst CHAR_COUNT_CUTOFF = 400\nexport const CARD_SHORT_DESCRIPTION_CSS = 'SRC-short-description'\nexport const CARD_LONG_DESCRIPTION_CSS = 'SRC-long-description'\n\n// doi regex here - https://www.crossref.org/blog/dois-and-matching-regular-expressions/\n// note - had to add an escape character for the second slash in the regex above\nexport const DOI_REGEX = /^10.\\d{4,9}\\/[-._;()/:a-z0-9]+$/\n// check for 'syn' followed and ended by a digit of unlimited length, must also begin the line\nexport const SYNAPSE_REGX = /^syn\\d+$/\n\nexport default class GenericCard extends React.Component<GenericCardProps, GenericCardState> {\n\n  constructor(props: GenericCardProps) {\n    super(props)\n    this.state = {\n      showMoreDescription: false\n    }\n    this.createTitleLink = this.createTitleLink.bind(this)\n    this.createLabelLink = this.createLabelLink.bind(this)\n  }\n\n  public createTitleLink (link: string, titleLink?: CardLink, data?: string [], schema?: any) {\n    let linkDisplay = link\n    let target = '_self'\n    if (link.match(SYNAPSE_REGX)) {\n      // its a synId\n      linkDisplay = `https://www.synapse.org/#!Synapse:${link}`\n    } else if (link.match(DOI_REGEX)) {\n      target = '_blank'\n      linkDisplay = `https://dx.doi.org/${link}`\n    } else if (!titleLink) {\n      target = '_blank'\n    } else if (titleLink) {\n      if (!data || !schema) {\n        throw Error('Must specify CardLink and data for linking to work')\n      }\n      const urlParams = titleLink.URLColumnNames.map(\n        (el) => {\n          if (!schema.hasOwnProperty(el)) {\n            console.error(`Could not find match for data: ${data} with columnName ${el}`)\n          }\n          return `${el}=${data[schema[el]]}`\n        }\n      ).join('&')\n      // tested this link on the browser, there's no need to encode the URL, the browser picks up on that automatically\n      linkDisplay = `#/${titleLink.baseURL}?${urlParams}`\n    }\n    return { linkDisplay, target }\n  }\n\n  getCutoff = (summary: string ) => {\n    let previewText = ''\n    const summarySplit = summary!.split(' ')\n    // find num words to join such that its >= char_count_cutoff\n    let i = 0\n    while (previewText.length < CHAR_COUNT_CUTOFF && i < summarySplit.length) {\n      previewText += `${summarySplit[i]} `\n      i += 1\n    }\n    previewText = previewText.trim()\n    return { previewText }\n  }\n\n  toggleShowMore = () => {\n    this.setState({\n      showMoreDescription: true\n    })\n  }\n\n  public createLabelLink (value: string, labelLink: LabelLink, isHeader: boolean) {\n    const split = value.split(',')\n    let className = ''\n    let style: React.CSSProperties = {}\n    if (isHeader) {\n      className = 'SRC-lightLink'\n    } else {\n      className = 'SRC-primary-text-color'\n    }\n    return split.map(\n      (el, index) => {\n        const { baseURL } = labelLink\n        const urlParams = labelLink.URLColumnNames.map(\n          urlColumn => {\n            return `${urlColumn}=${el}`\n          }\n        ).join('&')\n        const href = `#/${baseURL}?${urlParams}`\n        return (\n          <React.Fragment key={el}>\n            <a \n              href={href}\n              key={el}\n              className={className}\n              style={style}\n            >\n              {el}\n            </a>\n            {index < split.length - 1 && <span style={{marginRight: 4}}> , </span>}\n          </React.Fragment>\n        )\n      }\n    )\n  }\n\n  render() {\n    const {\n      schema,\n      data,\n      genericCardSchema,\n      secondaryLabelLimit,\n      backgroundColor,\n      iconOptions,\n      isHeader = false,\n      titleLinkConfig,\n      labelLinkConfig,\n      facetAliases = {}\n    } = this.props\n    const { showMoreDescription } = this.state\n    const { link = '' } = genericCardSchema\n    const type = genericCardSchema.type\n    const title = data[schema[genericCardSchema.title]]\n    const subTitle = genericCardSchema.subTitle && data[schema[genericCardSchema.subTitle]]\n    const description = data[schema[genericCardSchema.description || '']]\n    const iconValue = data[schema[genericCardSchema.icon || '']]\n    // wrap link in parens because undefined would throw an error\n    const linkValue: string = data[schema[link]] || ''\n    const { linkDisplay, target } = this.createTitleLink(linkValue, titleLinkConfig, data, schema)\n    const values: string [][] = []\n    const { secondaryLabels = [] } = genericCardSchema\n    for (let i = 0; i < secondaryLabels.length; i += 1) {\n      const columnName =  secondaryLabels[i]\n      let value = data[schema[columnName]]\n      if (value) {\n        const labelLink = labelLinkConfig && labelLinkConfig.find(el => el.matchColumnName === columnName)\n        if (labelLink) {\n          // create link for this column\n          value = this.createLabelLink(value, labelLink, isHeader)\n        }\n        const columnDisplayName = facetAliases[columnName] || columnName\n        const keyValue = [columnDisplayName, value]\n        values.push(keyValue)\n      }\n    }\n\n    const showFooter = values.length > 0\n\n    const style: React.CSSProperties = {\n      background: backgroundColor,\n      // undefined, take default value from class\n      marginTop: isHeader ? '0px' : undefined,\n      marginBottom: isHeader ? '0px' : undefined,\n      paddingBottom: showFooter ? undefined : '15px'\n    }\n\n    if (isHeader) {\n      return (\n        <HeaderCard\n          type={type}\n          title={title}\n          subTitle={subTitle}\n          backgroundColor={backgroundColor}\n          description={description}\n          iconValue={iconValue}\n          iconOptions={iconOptions}\n          values={values}\n          secondaryLabelLimit={secondaryLabelLimit}\n        />\n      )\n    }\n\n    const titleSearchHandle =facetAliases[genericCardSchema.title] || genericCardSchema.title\n    const stubTitleSearchHandle = facetAliases[genericCardSchema.subTitle || ''] || genericCardSchema.subTitle\n    const descriptionSubTitle = facetAliases[genericCardSchema.description || ''] || genericCardSchema.description\n    return (\n      <div\n        style={style}\n        className={'SRC-portalCard'}\n      >\n        <div className=\"SRC-cardThumbnail\">\n          <Icon iconOptions={iconOptions} value={iconValue} type={type} />\n        </div>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">{type}</div>\n          <div >\n            <h3 className=\"SRC-boldText SRC-blackText\" style={{ margin: 'none' }}>\n              {linkDisplay ?\n                <a data-search-handle={titleSearchHandle} className=\"SRC-primary-text-color\" target={target} href={linkDisplay}>\n                  {title}\n                </a>\n                :\n                <span data-search-handle={titleSearchHandle}> {title} </span>\n              }\n            </h3>\n          </div>\n          {subTitle && <div data-search-handle={stubTitleSearchHandle} className=\"SRC-author\"> {subTitle} </div>}\n          {/* \n            Below is a hack that allows word highlighting to work, the Search componenet insert's\n            html elements outside of the React DOM which if detected would break the app,\n            but as written below this avoids that reconcilliation process.\n          */}\n          {\n            description &&\n            <div className={showMoreDescription ? 'SRC-hidden' : ''}>\n              <span data-search-handle={descriptionSubTitle} className={`SRC-font-size-base ${CARD_SHORT_DESCRIPTION_CSS} SRC-short-description`}>\n                {this.getCutoff(description).previewText}\n              </span>\n              {\n                description.length >= CHAR_COUNT_CUTOFF\n                &&\n                <a\n                  style={{ fontSize: '14px', cursor: 'pointer', marginLeft: '3px' }}\n                  className=\"SRC-primary-text-color\"\n                  onClick={this.toggleShowMore}\n                >\n                  ...Show More{' '}\n                </a>\n              }\n            </div>\n          }\n          {\n            description &&\n            <div className={showMoreDescription ? '' : 'SRC-hidden'}>\n              <span data-search-handle={descriptionSubTitle} className={`SRC-font-size-base ${CARD_LONG_DESCRIPTION_CSS}`}>\n                {description}\n              </span>\n            </div>\n          }\n        </div>\n        {showFooter && <CardFooter isHeader={false} secondaryLabelLimit={secondaryLabelLimit} values={values}/>}\n      </div>\n    )\n  }\n}\n","import { lexer, parser } from 'sql-parser'\nimport { SYNAPSE_REGX } from '../../containers/GenericCard'\n\nexport type KeyValue = {\n  [index: string]: string\n}\n\nexport type SQLOperator = 'LIKE' | '='\n\n// look for \"group by\", multi-line and case insensitive\nconst GROUP_BY_REGEX = /group by/mi\nexport const isGroupByInSql =(sql: string): boolean => {\n  return GROUP_BY_REGEX.test(sql)\n}\nconst WITHOUT_SYN_PREFIX = 3\n\nconst generateTokenUsingOperator = (literal: string, operator: SQLOperator, match: string) => {\n  let usedMatchForLike = match\n  if (match.match(SYNAPSE_REGX)) {\n    // If we use a LIKE statement with a synId the backend will look for a string with the first three\n    // characters being 'syn', however, it stores synIds without 'syn', so the query will fail\n    // The backend usually parses 'syn' out, but not with the LIKE clause since its expecting a regex, so we\n    // parse this out. This will cause a bug if something matches the synId regex but is in free text. \n    usedMatchForLike = match.substring(WITHOUT_SYN_PREFIX)\n  }\n  switch (operator) {\n    case 'LIKE':\n      return [\n        ['LITERAL', literal, '1'],\n        ['OPERATOR', operator, '1'],\n        ['STRING', `%${usedMatchForLike}%`, '1'], \n      ]\n    case '=':\n      return [\n        ['LITERAL', literal, '1'],\n        ['OPERATOR', operator, '1'],\n        ['STRING', match, '1'], \n      ]\n  } \n}\n\n// This will construct a sql query by adding the conditions in searchParams\n// to the WHERE clause, preserving all other clauses\nexport const insertConditionsFromSearchParams = (searchParams: KeyValue, sql: string, operator: SQLOperator = 'LIKE') => {\n  const tokens: string[][] = lexer.tokenize(sql)\n  // we want to either create a where clause or insert into the where clause\n  const foundIndex = tokens.findIndex(el => el[0] === 'WHERE')\n  const whereClauseIndex = foundIndex === -1 ? (tokens.findIndex(el => el[0] === 'FROM') + 2) : foundIndex\n  const indexAfterWhereClause = whereClauseIndex + 1\n  if (foundIndex === -1) {\n    // insert a where clause\n    tokens.splice(whereClauseIndex, 0, ['WHERE', 'WHERE', '1'])\n  } else {\n    // if this is inserting into a where clause then we have to make sure that the logic is chained\n    tokens.splice(indexAfterWhereClause, 0, ['CONDITIONAL', 'AND', '1'])\n  }\n  const searchParamsLen = Object.keys(searchParams).length\n  Object.keys(searchParams).forEach(\n    (key, index) => {\n      const token = generateTokenUsingOperator(key, operator, searchParams[key])\n      if (index < searchParamsLen - 1) {\n        // make sure to chain the ANDs until the last one\n        token.unshift(['CONDITIONAL', 'AND', '1'])\n      }\n      tokens.splice(indexAfterWhereClause, 0, ...token)\n    }\n  )\n  return formatSQLFromParser(tokens)\n}\n\nexport const formatSQLFromParser = (tokens: string [][]) => {\n  // remove backtick from output sql (for table name): `syn1234` becomes syn1234\n  const synId = tokens[tokens.findIndex(el => el[0] === 'FROM') + 1][1]\n  const newSql = parser.parse(tokens).toString()\n  const splitString = `\\`${synId}\\``\n  return newSql.split(splitString).join(synId)\n}\n","import { UiSchema } from 'react-jsonschema-form'\nimport { JSONSchema6 } from 'json-schema'\n\nexport const writeHeaderOption = \"First line is the columns names.\"\nexport const includeRowIdAndRowVersionOption = \"Include row metadata (Row Id and Row Version).\"\nexport const csvOption = \"Comma Separated Values (CSV)\"\nexport const tsvOption = \"Tab Separated Values (TSV)\"\n\n// Step 1\nconst stepOneFormSchema: JSONSchema6 = {\n  title: 'Download query results',\n  type: 'object',\n  properties: {\n    'File Type'  : {\n      type: \"string\",\n      oneOf: [\n        {\n          const: csvOption,\n          title: csvOption\n        },\n        {\n          const: tsvOption,\n          title: tsvOption\n        }\n      ],\n    },\n    Contents : {\n      type: \"array\",\n      title: 'Contents',\n      items: {\n        type: 'string',\n        enum: [writeHeaderOption, includeRowIdAndRowVersionOption],\n      },\n      uniqueItems: true\n    }\n  }\n}\n\nconst stepOneFormUISchema: UiSchema = {\n  'File Type': {\n    \"ui:widget\": \"radio\"\n  },\n  Contents: {\n    'ui:widget': 'checkboxes'\n  }\n}\n\n// Step 2\nconst stepTwoFormSchema: JSONSchema6 = {\n  title: 'Download query results',\n  description: 'File is ready for download. Select the download button to download the file.',\n  type: 'object',\n}\n\nconst stepTwoFormUISchema: UiSchema = {\n}\n\nexport const formSchemaArray = [stepOneFormSchema, stepTwoFormSchema]\nexport  const formSchemaUIArray = [stepOneFormUISchema, stepTwoFormUISchema]","import * as React from 'react'\nimport Form, { IChangeEvent } from 'react-jsonschema-form'\nimport { formSchemaArray, formSchemaUIArray, writeHeaderOption, includeRowIdAndRowVersionOption, csvOption } from './ModalDownload.FormSchema'\nimport { DownloadFromTableRequest } from '../utils/jsonResponses/Table/DownloadFromTableRequest'\nimport { SynapseClient } from '../utils'\nimport { DownloadFromTableResult } from '../utils/jsonResponses/Table/DownloadFromTableResult'\nimport { SortItem } from '../utils/jsonResponses/Table/Query'\nimport { FacetColumnRequest } from '../utils/jsonResponses/Table/FacetColumnRequest'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { library } from '@fortawesome/fontawesome-svg-core'\n\nlibrary.add(faTimes)\n\nexport type ModalDownloadState = {\n  isLoading: boolean\n  step: number,\n  data?: DownloadFromTableResult\n  formData: {}\n}\n\nexport type ModalDownloadProps = {\n  entityId: string\n  sql: string\n  onClose: (...args: any []) => void\n  token?: string\n  includeEntityEtag?: boolean\n  selectedFacets?: FacetColumnRequest [] // The selected facet filters.\n  isConsistent?: boolean\n  offset?: number\n  limit?: number\n  sort?: SortItem []\n}\n\nexport default class ModalDownload extends React.Component<ModalDownloadProps, ModalDownloadState> {\n\n  constructor(props: ModalDownloadProps) {\n    super(props)\n    this.state = {\n      isLoading: false,\n      step: 0,\n      formData: {\n        'File Type': csvOption,\n        Contents: [writeHeaderOption, includeRowIdAndRowVersionOption]\n      }\n    }\n  }\n\n  handleSubmit = (event: IChangeEvent ) => {\n    if (this.state.step === 0) {\n      this.handleDownloadSetup(event)\n    } else {\n      this.onDownload()\n    }\n  }\n\n  handleDownloadSetup = (event: IChangeEvent) => {\n    this.setState({\n      isLoading: true\n    })\n    const { formData } = event\n    const fileType = formData['File Type']\n    const contents = formData.Contents as string []\n    const { token, onClose, ...rest } = this.props\n    const separator = fileType === csvOption ? ',': '\\t'\n    const writeHeader = contents.includes(writeHeaderOption)\n    const includeRowIdAndRowVersion = contents.includes(includeRowIdAndRowVersionOption)\n    const downloadFromTableRequest: DownloadFromTableRequest = {\n      ...rest,\n      concreteType: 'org.sagebionetworks.repo.model.table.DownloadFromTableRequest',\n      writeHeader,\n      includeRowIdAndRowVersion,\n      csvTableDescriptor: { separator },\n    }\n    SynapseClient.getDownloadFromTableRequest(downloadFromTableRequest, token).then(\n      data => {\n        this.setState({\n          isLoading: false,\n          step: 1,\n          data\n        })\n      }\n    ).catch(err => {\n      console.log('Error getDownloadFromTableRequest: ', err)\n    })\n  }\n\n  onDownload = () => {\n    const { data } = this.state\n    const { token } = this.props\n    // data will always be defined if calling this function\n    SynapseClient.getFileHandleByIdURL(data!.resultsFileHandleId, token).then(\n      url => {\n        window.location.href = url\n        this.props.onClose()\n      }\n    )\n  }\n\n  handleChange = (event: IChangeEvent) => {\n    const { formData } = event\n    this.setState({\n      formData\n    })\n  }\n\n  render() {\n    const closeBtn: React.CSSProperties = {\n      position: 'absolute',\n      top: 10,\n      right: 10,\n      zIndex: 10\n    }\n    const submitBtn: React.CSSProperties = {\n      padding: '6px 10px',\n      borderRadius: 6\n    }\n    const spinnerStyle: React.CSSProperties = {\n      height: 50,\n      width: 50,\n      backgroundSize: 50\n    }\n    return (\n      <React.Fragment>\n        <div className=\"custom-checkbox-container modal fade in SRC-block\" role=\"dialog\" tabIndex={-1}>\n          <div className=\"modal-dialog\" role=\"document\">\n            <div className=\"modal-content\">\n              <button style={closeBtn} onClick={this.props.onClose}>\n                <FontAwesomeIcon style={{fontSize: '21px'}} icon=\"times\" />\n              </button>\n              <div className=\"modal-body\">\n              <Form\n                schema={formSchemaArray[this.state.step]}\n                uiSchema={formSchemaUIArray[this.state.step]}\n                onChange={this.handleChange}\n                formData={this.state.formData}\n                onSubmit={this.handleSubmit}\n              >\n              {\n                this.state.isLoading\n                &&\n                <div className=\"SRC-centerAndJustifyContent\">\n                  <div className=\"SRC-center-text\">\n                    <p> Creating the File </p>\n                    <div style={spinnerStyle} className=\"spinner\" />\n                    <p> Loading... </p>\n                  </div>\n                </div>\n                }\n                <hr/>\n                <div style={{textAlign: 'right'}}>\n                  <button id=\"cancelBtn\" onClick={this.props.onClose} className=\"SRC-primary-text-color SRC-roundBorder SRC-underline-on-hover \" type=\"button\"> Cancel </button>\n                  <button id=\"submitBtn\" style={submitBtn} className=\"SRC-primary-background-color SRC-roundBorder SRC-whiteText\" type=\"submit\">{this.state.step === 0 ? 'Next': 'Download' }</button>\n                </div>\n              </Form>\n              </div>\n            </div>\n          </div>\n      </div>\n      <div className=\"modal-backdrop in\"/>\n      </React.Fragment>\n   )\n  }\n}","import * as React from 'react'\nimport { EntityHeader } from '../utils/jsonResponses/EntityHeader'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { \n  faLink,\n  faFolder,\n  faFile,\n  faListAlt,\n  faTable,\n  faThList,\n  faArchive \n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nlibrary.add(faLink)\nlibrary.add(faFolder)\nlibrary.add(faFile)\nlibrary.add(faListAlt)\nlibrary.add(faTable)\nlibrary.add(faThList)\nlibrary.add(faArchive)\n\ntype IconType = 'FileEntity' | 'Folder' | 'Link' | 'Project' | 'TableEntity' | 'EntityView'\n\nconst getIconTypeForEntity = (name: IconType) => {\n  switch(name) {\n    case 'Link':\n      return 'link'\n    case 'Folder':\n      return 'folder'\n    case 'FileEntity':\n      return 'file'\n    case 'TableEntity':\n      return 'table'\n    case 'Project':\n      return 'list-alt'\n    case 'EntityView':\n      return 'th-list'\n    default:\n      return ''\n  }\n}\n\ntype EntityTypeIconProps = {\n  type: string\n}\nconst EntityTypeIcon: React.SFC<EntityTypeIconProps> = ({ type }) => {\n  const splitType = type.split('.')\n  const name = splitType[splitType.length - 1] as IconType\n  const iconType = getIconTypeForEntity(name)\n  const iconStyle: React.CSSProperties = {\n    marginRight: 5\n  }\n  if (iconType === '') {\n    console.log('Entity Type not mapped = ', type)\n    return <React.Fragment />\n  }\n  return <FontAwesomeIcon style={iconStyle} icon={iconType}/>\n}\n\ntype EntityLinkProps = {\n  entityHeader: EntityHeader\n  className?: string\n}\n\nexport const EntityLink: React.SFC<EntityLinkProps> = ({ entityHeader, className }) => {\n  const { id, name, type } = entityHeader\n  return (\n    <a className={className} target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.synapse.org/#!Synapse:${id}`}>\n      <p className={className}>\n        <EntityTypeIcon type={type} />\n        {name}\n      </p>\n    </a>\n  )\n} \n","import * as React from 'react'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\n\nexport type TotalQueryResultsProps = {\n  data?: QueryResultBundle\n  facet?: string\n  isLoading: boolean\n  style?: React.CSSProperties\n  unitDescription: string\n  frontText: string\n}\n\ntype State = {\n  total: number  \n}\n\n// This is a stateful component so that during load the component can hold onto the previous \n// total instead of showing 0 results for the intermittent loading state.\nexport default class TotalQueryResults extends React.Component<TotalQueryResultsProps, State> {\n\n  constructor(props: TotalQueryResultsProps) {\n    super(props)\n    this.state = {\n      total: 0\n    }\n  }\n\n  componentDidMount() {\n    this.calculateTotal()\n  }\n\n  componentDidUpdate(prevProps: TotalQueryResultsProps) {\n    // check that its done loading\n    if (!this.props.isLoading && prevProps.isLoading) {\n      this.calculateTotal()\n    }\n  }\n\n  calculateTotal() {\n    const { data, facet } = this.props \n    let { total } = this.state\n    if (data) {\n      if (facet) {\n        const { facets = [] } = data\n        const curFacetsIndex = facets.findIndex(el => el.facetType === 'enumeration' && el.columnName === facet)\n        // calculate the values chosen\n        const curFacets = facets[curFacetsIndex]\n        // edge case -- if they are all false then they are considered all true..\n        // sum up the counts of data\n        let anyTrue = false\n        let totalAllFalseCase = 0\n        let totalStandardCase = 0\n    \n        if (curFacets) {\n          for (const key of curFacets.facetValues) {\n            anyTrue = anyTrue || key.isSelected\n            totalAllFalseCase += key.count\n            totalStandardCase += key.isSelected ? key.count : 0\n          }\n        }\n        total = anyTrue ? totalStandardCase : totalAllFalseCase\n        if (data.queryResult.queryResults.rows.length === 0) {\n          // we override the statements above if there are zero results because the current UI\n          // would be showing zero results\n          total = 0\n        }\n      } else {\n        if (data.queryCount === undefined) {\n          throw Error('Failed to specify either a facet or query count in part mask')\n        }\n        total = data.queryCount\n      }\n     }\n     this.setState({\n       total\n     })\n  }\n\n  render() {\n    const { isLoading, style, unitDescription, frontText } = this.props \n    const { total } =  this.state\n    const loader = <span style={{ marginLeft: '2px' }} className={'spinner'}/> \n    return (\n      <p style={style} className=\"SRC-boldText SRC-text-title SRC-centerContent\">\n        {frontText} {total} {unitDescription} {isLoading && loader}\n      </p>\n    )\n   }\n}\n","import { SynapseClient } from '../utils'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\n\n/*\n  Utility functions for UserCards\n*/\n\nfunction getUserProfileWithProfilePicAttached(principalIds: string [], token?: string) {\n  return SynapseClient.getUserProfiles(principalIds).then(\n    (data) => {\n      // people will either have a profile pic file handle id\n      // or they won't. Have to break this down into two groups.\n      const withProfilePic = data.list.filter(\n        (value: any) => {\n          return value.profilePicureFileHandleId !== undefined\n        }\n      )\n      if (withProfilePic.length === 0) {\n        return data\n      }\n      const fileHandleAssociationList = withProfilePic.map(\n        (value) => {\n          return {\n            associateObjectId: value.ownerId,\n            associateObjectType: 'UserProfileAttachment',\n            fileHandleId: value.profilePicureFileHandleId\n          }\n        })\n      const request: any = {\n        includeFileHandles: false,\n        includePreSignedURLs: true,\n        includePreviewPreSignedURLs: false,\n        requestedFiles: fileHandleAssociationList\n      }\n      return SynapseClient.getFiles(request, token)\n        .then(\n          (fileHandleList) => {\n            // we retrieve all the persons with profile pic file handles\n            // so we next loop through them, find the original person in the data.list\n            // and add a field with their pre-signed url\n            fileHandleList.requestedFiles.forEach(\n              (fileHandle) => {\n                const matchingPersonIndex = data.list.findIndex(\n                  (el) => {\n                    return fileHandle.fileHandleId === el.profilePicureFileHandleId\n                  }\n                )\n                data.list[matchingPersonIndex].clientPreSignedURL = fileHandle.preSignedURL\n              })\n            return Promise.resolve(data)\n          })\n        .catch((err) => {\n          return err\n        })\n    })\n}\n\ntype UserProfileAndImg = {\n  userProfile: UserProfile\n  preSignedURL: string\n}\nfunction getUserProfileWithProfilePic(ownerId: string, token?: string): Promise<UserProfileAndImg> {\n  return SynapseClient.getUserProfileById(token, ownerId).then(\n    (userProfile: UserProfile) => {\n      // people will either have a profile pic file handle id\n      // or they won't. Have to break this down into two groups.\n      if (!userProfile.profilePicureFileHandleId) {\n        return Promise.resolve({ userProfile }) as any\n      }\n\n      const fileHandleAssociationList = [{\n        associateObjectId: ownerId,\n        associateObjectType: 'UserProfileAttachment',\n        fileHandleId: userProfile.profilePicureFileHandleId\n      }]\n\n      const request: any = {\n        includeFileHandles: false,\n        includePreSignedURLs: true,\n        includePreviewPreSignedURLs: false,\n        requestedFiles: fileHandleAssociationList\n      }\n\n      return SynapseClient.getFiles(request, token)\n        .then(\n          (fileHandleList) => {\n            // we retrieve all the persons with profile pic file handles\n            // so we next loop through them, find the original person in the data.list\n            // and add a field with their pre-signed url\n            const firstElement = fileHandleList.requestedFiles[0]\n            return Promise.resolve({\n              userProfile,\n              preSignedURL: firstElement.preSignedURL\n            })\n          })\n        .catch((err) => {\n          console.log({ err })\n        })\n    })\n}\n\nconst COLORS: string[] = [\n  'chocolate',\n  'black',\n  'firebrick',\n  'maroon',\n  'olive',\n  'green',\n  'forestgreen',\n  'darkturquoise',\n  'teal',\n  'blue',\n  'navy',\n  'darkmagenta',\n  'purple',\n  'blue',\n  'orangered',\n  'blueviolet'\n]\n\nconst hash = (userName: string) => {\n  const val = userName\n  .split('')\n  .reduce((prevHash, currVal) => (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0, 0)\n  return Math.abs(val)\n}\n\nconst getColor = (userName: string) => {\n  const hashedUserName = hash(userName)\n  return COLORS[hashedUserName % COLORS.length]\n}\n\nexport { getUserProfileWithProfilePicAttached, getColor, getUserProfileWithProfilePic }\nexport default { getUserProfileWithProfilePicAttached, getColor, getUserProfileWithProfilePic }\n","import * as React from 'react'\n// ignore because this is rollup requiring imports be named a certain way\n// tslint:disable-next-line\nimport ReactTooltip from \"react-tooltip\"\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle,  } from '@fortawesome/free-solid-svg-icons'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { getColor } from './getUserData'\n\nlibrary.add(faCircle)\n\nexport type UserCardSmallProps = {\n  userProfile: UserProfile\n  preSignedURL?: string\n  hideText?: boolean\n  hideTooltip?: boolean\n  link?: string\n}\n\nexport const UserCardSmall: React.FunctionComponent<UserCardSmallProps> = (\n  { userProfile, hideText = false, hideTooltip = false, preSignedURL, link }\n) => {\n  const linkLocation = link ? link : `https://www.synapse.org/#!Profile:${userProfile.ownerId}`\n  let img\n  let marginLeft\n  let label = ''\n  if (!hideTooltip) {\n    if (userProfile.displayName) {\n      label += userProfile.displayName\n    } else if (userProfile.firstName && userProfile.lastName) {\n      label += (`${userProfile.firstName} ${userProfile.lastName}`)\n    }\n    if (userProfile.userName) {\n      label += ` (${userProfile.userName})`\n    }\n    if (userProfile.position) {\n      label += ` <br/>${userProfile.position}`\n    }\n    if (userProfile.location) {\n      label += ` <br/>${userProfile.location}`\n    }\n  }\n\n  if (preSignedURL) {\n    marginLeft = '3px'\n    img = (\n      <div\n        className=\"SRC-userImgSmall\"\n        style={{ backgroundImage: `url(${preSignedURL})` }}\n        data-for={label}\n        data-tip={label}\n      />\n    )\n  } else {\n    const color = getColor(userProfile.userName)\n    marginLeft = '3px'\n    img = (\n      <div style={{ background: color }} className=\"SRC-userImgSmall SRC-centerContentInline\">\n        {(userProfile.firstName && userProfile.firstName[0]) || userProfile.userName[0]}\n      </div>\n    )\n  }\n  return (\n    <a\n      href={linkLocation}\n      className=\"SRC-userCard SRC-primary-text-color SRC-no-underline-on-hover\"\n    >\n      {img}\n        <ReactTooltip delayShow={1000} id={label} multiline={true}/>\n        {!hideText && <span className=\"SRC-primary-text-color SRC-underline-on-hover\" style={{ marginLeft, whiteSpace: 'nowrap' }}>{`@${userProfile.userName}`}</span>}\n    </a>\n  )\n}\n","import * as React from 'react'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { SEPERATOR } from '../utils/SynapseConstants'\n\nexport type MenuAction = {\n  field: string\n  callback?: (userProfile: UserProfile) => void\n}\n\nexport type UserCardContextMenuProps = {\n  userProfile : UserProfile\n  menuActions: MenuAction []\n}\n\nconst UserCardContextMenu:React.SFC<UserCardContextMenuProps> = (props: UserCardContextMenuProps) => {\n  const { menuActions = [], userProfile } = props\n  return (\n    <div className=\"dropdown open\">\n      <ul className=\"dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenu1\">\n        {\n          menuActions.map(\n            (menuAction, index) => {\n              const callback = () => menuAction.callback!(userProfile)\n              if (menuAction.field === SEPERATOR) {\n                return <hr className=\"SRC-break\" key={menuAction.field + index}/>\n              }\n              return (\n                <li\n                  key={menuAction.field}\n                  style={{ listStyle: 'none' }}\n                  className=\"SRC-menu-item SRC-table-dropdown-list SRC-primary-background-color-hover\"\n                  onClick={callback}\n                  onKeyPress={callback}\n                >\n                  <button className=\"SRC-menuAction\">\n                    {menuAction.field}\n                  </button>\n                </li>\n              )\n            }\n          )\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default UserCardContextMenu\n","import * as React from 'react'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle, faEllipsisV, faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\n\nlibrary.add(faCircle)\nlibrary.add(faEllipsisV)\nlibrary.add(faCopy)\n\ntype UserCardLargeProps = {\n  userProfile: UserProfile\n}\n\n/**\n * UserCardLarge wraps around UserCardMedium\n *\n * @export UserCardLarge\n * @param {UserCardLargeProps} { userProfile }\n */\n// Disable function name because compiler has to know that its a class\n// tslint:disable-next-line:function-name\nexport function UserCardLarge({ userProfile }: UserCardLargeProps) {\n\n  const {\n    summary,\n    industry,\n    location,\n    url\n  } = userProfile\n\n  return (\n    <div className=\"SRC-cardMetaData\">\n      {\n        summary && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> Bio </p>\n            <p>\n              {summary}\n            </p>\n          </div>\n        )\n      }\n      {\n        url && (\n          <div>\n            <p className=\"SRC-card-metadata-title\"> More Info </p>\n            <p>\n              {url}\n            </p>\n          </div>\n        )\n      }\n      {\n        industry &&\n        <div>\n            <p className=\"SRC-card-metadata-title\"> Industry </p>\n            <p>\n              {industry}\n            </p>\n          </div>\n      }\n      {\n        location &&\n        <div>\n            <p className=\"SRC-card-metadata-title\"> Location </p>\n            <p>\n              {location}\n            </p>\n          </div>\n      }\n    </div>\n  )\n}\n","import * as React from 'react'\n\nconst svg = (\n  <svg width=\"12\" height=\"14\" viewBox=\"0 0 12 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path\n      // tslint:disable-next-line:max-line-length\n      d=\"M10.7368 12.7273H3.78947V3.81818H10.7368V12.7273ZM10.7368 2.54545H3.78947C3.45446 2.54545 3.13317 2.67954 2.89629 2.91823C2.6594 3.15691 2.52632 3.48063 2.52632 3.81818V12.7273C2.52632 13.0648 2.6594 13.3885 2.89629 13.6272C3.13317 13.8659 3.45446 14 3.78947 14H10.7368C11.0719 14 11.3931 13.8659 11.63 13.6272C11.8669 13.3885 12 13.0648 12 12.7273V3.81818C12 3.48063 11.8669 3.15691 11.63 2.91823C11.3931 2.67954 11.0719 2.54545 10.7368 2.54545V2.54545ZM8.8421 0H1.26316C0.928148 0 0.606858 0.134091 0.36997 0.372773C0.133082 0.611456 0 0.935179 0 1.27273V10.1818H1.26316V1.27273H8.8421V0Z\"\n      fill=\"#DCDCDC\"\n    />\n  </svg>\n)\nexport default svg\n","import * as React from 'react'\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faCircle, faEllipsisV, faCopy } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { getColor } from './getUserData'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport UserCardContextMenu, { MenuAction } from './UserCardContextMenu'\nimport { UserCardLarge } from './UserCardLarge'\nimport IconCopy  from '../assets/icons/IconCopy'\n\nlibrary.add(faCircle)\nlibrary.add(faEllipsisV)\nlibrary.add(faCopy)\n\ntype UserCardState = {\n  showModal: boolean\n  isContextMenuOpen: boolean\n}\n\nexport type UserCardMediumProps = {\n  userProfile: UserProfile\n  menuActions?: MenuAction []\n  preSignedURL?: string\n  hideEmail?: boolean\n  isLarge?: boolean\n  link?: string\n  disableLink?: boolean\n}\n\nexport default class UserCardMedium extends React.Component<UserCardMediumProps, UserCardState> {\n\n  public htmlDivRef = React.createRef<HTMLDivElement>()\n\n  constructor(props: UserCardMediumProps) {\n    super(props)\n    this.state = {\n      showModal: false,\n      isContextMenuOpen: false\n    }\n  }\n\n  /**\n   * Function handles copying to clipboard the user's email address\n   *\n   * @param {string} value the email address of the user\n   * @returns\n   */\n  public copyToClipboard = (value: string) => (event: React.SyntheticEvent) => {\n    event.preventDefault()\n    // https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\n    // this copies the email to the clipoard\n    const el = document.createElement('textarea')\n    el.value = value\n    el.setAttribute('readonly', '')\n    el.style.position = 'absolute'\n    el.style.left = '-9999px'\n    this.htmlDivRef.current!.appendChild(el)\n    el.select()\n    document.execCommand('copy')\n    this.htmlDivRef.current!.removeChild(el)\n    // show modal and hide after 4 seconds, the timing is per Material Design\n    this.setState({ showModal: true })\n    // hide after 4 seconds\n    setTimeout(\n      () => {\n        this.setState({ showModal: false })\n      },\n      4000\n    )\n  }\n\n  public toggleContextMenu = (_event: any) => {\n    this.setState({ isContextMenuOpen: !this.state.isContextMenuOpen })\n  }\n\n  public componentDidMount() {\n    // SWC-4778: https://stackoverflow.com/questions/23821768/how-to-listen-for-click-events-that-are-outside-of-a-component\n    window.addEventListener('mouseup', this.pageClick, false)\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('mouseup', this.pageClick, false)\n  }\n\n  public pageClick = (_event: any) => {\n    if (!this.state.isContextMenuOpen) {\n      return\n    }\n    // hide content menu (deferred, to allow menu action to process)\n    setTimeout(\n      () => {\n        if (this.state.isContextMenuOpen) {\n          this.toggleContextMenu(_event)\n        }\n      },\n      10\n    )\n  }\n\n  render () {\n    const {\n      userProfile,\n      menuActions,\n      isLarge = false,\n      preSignedURL,\n      hideEmail = false,\n      disableLink = false,\n      link\n    } = this.props\n    const { isContextMenuOpen, showModal } = this.state\n    const {\n      displayName,\n      userName,\n      firstName,\n      lastName,\n      position,\n      company\n    } = userProfile\n    let img\n    let name = ''\n    const linkLocation = link ? link : `https://www.synapse.org/#!Profile:${userProfile.ownerId}`\n    // linkLocation is overriden by custom click handler\n    const email = `${userName}@synapse.org`\n    if (displayName) {\n      name = displayName\n    } else if (firstName && lastName) {\n      name = `${firstName} ${lastName}`\n    } else if (userName) {\n      name = userName\n    }\n    if (preSignedURL) {\n      img = (\n        <div\n          style={{ backgroundImage: `url(${preSignedURL})` }}\n          className=\"SRC-userImg\"\n        />\n      )\n    } else {\n      img = (\n        <div style={{ background: getColor(userName) }} className=\"SRC-userImg SRC-centerContentInline\">\n          {userProfile.firstName && (userProfile.firstName[0] || userProfile.userName[0])}\n        </div>\n      )\n    }\n    const mediumCard = (\n      <React.Fragment>\n        {\n          !hideEmail\n          &&\n          <TransitionGroup>\n          {\n            showModal\n            &&\n            <CSSTransition\n              key={email}\n              classNames=\"SRC-card\"\n              timeout={{ enter: 500, exit: 300 }}\n            >\n            <div key={email} className=\"SRC-modal\"> Email address copied to clipboard </div>\n            </CSSTransition>\n          }\n          </TransitionGroup>\n        }\n        {\n          disableLink\n          &&\n          img\n        }\n        {\n          !disableLink\n          &&\n          <a\n            href={linkLocation}\n            className={`SRC-no-underline-on-hover ${isLarge ? 'SRC-isLargeCard' : ''}`}\n          >\n            {img}\n          </a>\n        }\n        <div className=\"SRC-cardContent\">\n          <p className=\"SRC-eqHeightRow SRC-userCardName\">\n            {/*\n              if its a medium component the header should be clickable (unless disableLink is set),\n              if its large then it should NOT be clickable\n            */}\n            {/* make SRC-whiteText overridable with a good name! */}\n            {(isLarge || disableLink) ?\n              <span className={isLarge ? 'SRC-whiteText' :  'SRC-blackText'}> {name} </span>\n              :\n                // consolidate click events\n                <a\n                  href={linkLocation}\n                  tabIndex={0}\n                  className={'SRC-hand-cursor SRC-primary-text-color'}\n                >\n                  {name}\n                </a>}\n          </p>\n          {\n            (position || company) &&\n            <p className={`${isLarge ? 'SRC-whiteText' : ''}`}>\n              {position} {position ? ' / ' : ''} {company}\n            </p>\n          }\n          {\n            !hideEmail\n            &&\n            <p\n              className={`${isLarge ? 'SRC-whiteText' : 'SRC-primary-text-color SRC-primary-color-hover'}\n              SRC-hand-cursor SRC-eqHeightRow SRC-inlineFlex SRC-emailText SRC-cardSvg`}\n              onClick={this.copyToClipboard(email)}\n              onKeyPress={this.copyToClipboard(email)}\n              tabIndex={0}\n              ref={this.htmlDivRef}\n            >\n              <span style={{ paddingRight: '5px' }}>\n              {`${userName}@synapse.org`}\n              </span>\n              {IconCopy}\n            </p>\n          }\n        </div>\n        {/* conditionally render menu actions, if its not defined then we don't show the button */}\n        {\n          menuActions &&\n          <React.Fragment>\n            <span\n              className={`SRC-extraPadding SRC-hand-cursor SRC-primary-background-color-hover SRC-inlineBlock\n              SRC-cardMenuButton ${isContextMenuOpen ? 'SRC-primary-background-color' : ''}`}\n              style={{ outline: 'none' }}\n              tabIndex={0}\n              onClick={this.toggleContextMenu}\n              onKeyPress={this.toggleContextMenu}\n            >\n              <FontAwesomeIcon\n                className={isContextMenuOpen || isLarge ? 'SRC-whiteText' : 'SRC-primary-text-color'}\n                icon=\"ellipsis-v\"\n                fixedWidth={true}\n              />\n            </span>\n            {\n              isContextMenuOpen\n              &&\n              <UserCardContextMenu menuActions={menuActions} userProfile={userProfile}/>\n            }\n            </React.Fragment>\n        }\n        {\n          !menuActions &&\n          <span\n            style={{ padding: '0px 0px 0px 35px' }}\n          />\n        }\n      </React.Fragment>\n    )\n\n    if (!isLarge) {\n      return (\n        <div\n          style={{ border: '1px solid #DDDDDF' }}\n          className={`SRC-userCard SRC-userCardMediumUp ${isContextMenuOpen ? 'SRC-hand-cursor' : ''}`}\n          onClick={isContextMenuOpen ? this.toggleContextMenu : undefined}\n        >\n          {mediumCard}\n        </div>\n      )\n    }\n    // else return medium card inside large component\n    // when the component is large we have to set the click handler to wrap both the top and bottom portion\n    return (\n      <div\n        style={{ boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)' }}\n        className={isContextMenuOpen ? 'SRC-hand-cursor' : ''}\n        onClick={isContextMenuOpen ? this.toggleContextMenu : undefined}\n      >\n        <div className={`SRC-primary-background-color SRC-userCard SRC-userCardMediumUp ${isContextMenuOpen ? 'SRC-hand-cursor' : ''}`}>\n          {mediumCard}\n        </div>\n        {isLarge ? <UserCardLarge userProfile={userProfile}/> : false}\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { getUserProfileWithProfilePic } from './getUserData'\nimport { getPrincipalAliasRequest } from '../utils/SynapseClient'\nimport { MenuAction } from './UserCardContextMenu'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { SynapseConstants } from '../utils/'\nimport { UserCardSmall } from './UserCardSmall'\nimport UserCardMedium from './UserCardMedium'\n\ntype UserCardState = {\n  userProfile: UserProfile | undefined\n  preSignedURL: string\n  isLoading: boolean\n}\n\nexport type UserCardSize = 'SMALL USER CARD' |'MEDIUM USER CARD' |'LARGE USER CARD'\n\nexport type UserCardProps = {\n  // Note - either specify userProfile OR (alias or ownerId)\n  userProfile?: UserProfile\n  loadingScreen?: JSX.Element\n  hideEmail?: boolean\n  preSignedURL?: string\n  alias?: string\n  ownerId?: string\n  size: UserCardSize\n  hideText?: boolean\n  hideTooltip?: boolean\n  menuActions? : MenuAction[]\n  link?: string\n  disableLink?: boolean\n}\n\nexport default class UserCard extends React.Component<UserCardProps, UserCardState> {\n  constructor(props: any) {\n    super(props)\n    this.state = { userProfile: undefined, isLoading: true, preSignedURL: '' }\n    this.getUserProfile = this.getUserProfile.bind(this)\n  }\n\n  public componentDidMount() {\n    const { userProfile, ownerId, alias } = this.props\n    if (userProfile) {\n      return\n    }\n    if (alias) {\n      getPrincipalAliasRequest('', alias, 'USER_NAME')\n      .then(\n        (aliasData: any) => {\n          this.getUserProfile(aliasData.principalId!)\n        }\n      )\n    } else {\n      // check for ownerId!\n      this.getUserProfile(ownerId!)\n    }\n  }\n\n  public getUserProfile(ownerId: string) {\n    getUserProfileWithProfilePic(ownerId!, '')\n    .then(\n      (data) => {\n        const { userProfile, preSignedURL } = data\n        this.setState({ userProfile, preSignedURL, isLoading: false })\n      }\n    ).catch(\n      (err) => {\n        console.log('failed to get user bundle ', err)\n      }\n    )\n  }\n\n  public render() {\n    const { userProfile, loadingScreen = <span/>, preSignedURL, size, ...rest } = this.props\n    let userProfileAtRender\n    let preSignedURLAtRender\n    if (!userProfile) {\n      // userProfile wans't passed in from props\n      if (this.state.isLoading) {\n        // still making the API call\n        return loadingScreen\n      }\n      userProfileAtRender = this.state.userProfile\n      preSignedURLAtRender = this.state.preSignedURL\n    } else {\n      // otherwise we have the profile from props\n      userProfileAtRender = userProfile\n      preSignedURLAtRender = preSignedURL\n    }\n    const propsForChild = {\n      userProfile: userProfileAtRender!,\n      preSignedURL: preSignedURLAtRender,\n      ...rest\n    }\n    switch (size) {\n      case SynapseConstants.SMALL_USER_CARD:\n        return <UserCardSmall {...propsForChild}/>\n      case SynapseConstants.MEDIUM_USER_CARD:\n        return <UserCardMedium {...propsForChild}/>\n      case SynapseConstants.LARGE_USER_CARD:\n        return <UserCardMedium isLarge={true} {...propsForChild} />\n      default:\n        return <span/>\n    }\n  }\n}\n","import { IconProp, library } from '@fortawesome/fontawesome-svg-core'\nimport { \n  faCheck,\n  faColumns,\n  faFilter,\n  faSort,\n  faSortAmountDown,\n  faSortAmountUp,\n  faTimes,\n  faDownload,\n  faUsers,\n  faGlobeAmericas,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as React from 'react'\nimport ReactTooltip from \"react-tooltip\"\nimport { FacetColumnResult,\n  FacetColumnResultValueCount,\n  FacetColumnResultValues\n} from '../utils/jsonResponses/Table/FacetColumnResult'\nimport ColumnsSvg from '../assets/icons/columns.svg'\nimport ExpandSvg from '../assets/icons/expand.svg'\nimport ShrinkSvg from '../assets/icons/shrink.svg'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { Row } from '../utils/jsonResponses/Table/QueryResult'\nimport { SelectColumn, EntityColumnType } from '../utils/jsonResponses/Table/SelectColumn'\nimport { getColorPallette } from './ColorGradient'\nimport { QueryWrapperChildProps, FacetSelection } from './QueryWrapper'\nimport { cloneDeep } from '../utils/modules/'\nimport { SortItem } from '../utils/jsonResponses/Table/Query'\nimport { getIsValueSelected, readFacetValues } from '../utils/modules/facetUtils'\nimport { lexer } from 'sql-parser'\nimport { formatSQLFromParser, isGroupByInSql } from '../utils/modules/sqlFunctions'\nimport ModalDownload from './ModalDownload'\nimport { SynapseClient } from '../utils'\nimport { ReferenceList } from '../utils/jsonResponses/ReferenceList'\nimport { EntityHeader } from '../utils/jsonResponses/EntityHeader'\nimport { EntityLink } from './EntityLink'\nimport TotalQueryResults from './TotalQueryResults'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\nimport UserCard from './UserCard'\nimport { AUTHENTICATED_USERS } from '../utils/SynapseConstants'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { getUserProfileWithProfilePicAttached } from './getUserData'\nimport { UserGroupHeader } from '../utils/jsonResponses/UserGroupHeader'\nimport { Modal } from 'react-bootstrap'\n\nconst MIN_SPACE_FACET_MENU = 700\n\n// Add all icons to the library so you can use it in your page\nlibrary.add(faColumns)\nlibrary.add(faSort)\nlibrary.add(faSortAmountUp)\nlibrary.add(faSortAmountDown)\nlibrary.add(faCheck)\nlibrary.add(faTimes)\nlibrary.add(faFilter)\nlibrary.add(faDownload)\nlibrary.add(faUsers)\nlibrary.add(faGlobeAmericas)\n// Hold constants for next and previous button actions\nconst NEXT = 'NEXT'\nconst PREVIOUS = 'PREVIOUS'\nexport const SELECT_ALL = 'SELECT_ALL'\nexport const DESELECT_ALL = 'DESELECT_ALL'\nexport const DOWNLOAD_FILES_MENU_TEXT = 'Download Files'\n// double check these icons!\nexport const ICON_STATE: string [] = ['sort-amount-down', 'sort-amount-down', 'sort-amount-up']\ntype Direction = ''|'ASC'|'DESC'\nexport const SORT_STATE: Direction [] = ['', 'DESC', 'ASC']\nexport const DOWNLOAD_OPTIONS_CONTAINER_CLASS = 'SRC-download-options-container' \nexport const EXPAND_CLASS = 'SRC-expand-class'\ntype Info = {\n  index: number\n  name: string\n}\ninterface Dictionary<T> {\n  [key: string]: T;\n}\nexport type SynapseTableState = {\n  sortedColumnSelection: SortItem []\n  isDropdownColumnMenuOpen: boolean\n  isColumnSelected: boolean[]\n  columnIconSortState: number[],\n  activeFilterIndex: number\n  activeFilterClass: string,\n  isMenuWallOpen: boolean,\n  isModalDownloadOpen: boolean\n  isExpanded: boolean\n  mapEntityIdToHeader: Dictionary<EntityHeader>\n  mapUserIdToHeader: Dictionary<Partial<UserGroupHeader & UserProfile>>\n  isDropdownDownloadOptionsOpen: boolean\n}\nexport type SynapseTableProps = {\n  visibleColumnCount?: number\n  synapseId: string\n  title: string\n  loadingScreen?: JSX.Element\n}\n\nconst TOOLTIP_DELAY_SHOW = 500\n\n// This is a convenient way to categorize all the dropdown state variables, although problematic\n// if any state variable mapping to a boolean does NOT represent a dropdown\ntype BooleanKeys<T> = { [k in keyof T]: T[k] extends boolean ? k : never }[keyof T];\n\nexport default class SynapseTable extends React.Component<QueryWrapperChildProps &\n                                                          SynapseTableProps, SynapseTableState> {\n\n  constructor(props: QueryWrapperChildProps & SynapseTableProps) {\n    super(props)\n    this.handleColumnSortPress = this.handleColumnSortPress.bind(this)\n    this.handlePaginationClick = this.handlePaginationClick.bind(this)\n    this.findSelectionIndex = this.findSelectionIndex.bind(this)\n    this.toggleColumnSelection = this.toggleColumnSelection.bind(this)\n    this.advancedSearch = this.advancedSearch.bind(this)\n    this.getLengthOfPropsData = this.getLengthOfPropsData.bind(this)\n    this.configureFacetDropdown = this.configureFacetDropdown.bind(this)\n    this.closeAllDropdowns = this.closeAllDropdowns.bind(this)\n    this.applyChanges = this.applyChanges.bind(this)\n    this.toggleFilterDropdown = this.toggleFilterDropdown.bind(this)\n    // store the offset and sorted selection that is currently held\n    this.state = {\n      /* columnIconSortState tells what icon to display for a table\n         header. There are three states for a particular header-\n          0 - show descending icon but *deselected*\n          1 - show descending icon selected\n          2 - show ascending icon selected\n      */\n      columnIconSortState: [],\n      activeFilterClass: '',\n      isColumnSelected: [],\n      activeFilterIndex: -1,\n      isDropdownColumnMenuOpen: false,\n      isMenuWallOpen: false,\n      isModalDownloadOpen: false,\n      isDropdownDownloadOptionsOpen: false,\n      isExpanded: false,\n      // sortedColumnSelection contains the columns which are\n      // selected currently and their sort status as eithet\n      // off, desc, or asc.\n      sortedColumnSelection: [],\n      mapEntityIdToHeader: {},\n      mapUserIdToHeader: {}\n    }\n    this.renderFacetSelection = this.renderFacetSelection.bind(this)\n    this.getEntityHeadersInData = this.getEntityHeadersInData.bind(this)\n    this.getColumnIndiciesWithType = this.getColumnIndiciesWithType.bind(this)\n  }\n\n  componentDidMount() {\n    this.getEntityHeadersInData()\n  }\n\n  componentDidUpdate() {\n    this.getEntityHeadersInData()\n  }\n\n  public async getEntityHeadersInData() {\n    const { data, token } = this.props\n    if (!data) {\n      return\n    }\n    const mapEntityIdToHeader = cloneDeep(this.state.mapEntityIdToHeader)\n    const mapUserIdToHeader = cloneDeep(this.state.mapUserIdToHeader)\n    const entityIdColumnIndicies = this.getColumnIndiciesWithType('ENTITYID')\n    const userIdColumnIndicies = this.getColumnIndiciesWithType('USERID')\n    const distinctEntityIds = this.getUniqueEntities(data, mapEntityIdToHeader, entityIdColumnIndicies)\n    const distinctUserIds = this.getUniqueEntities(data, mapUserIdToHeader, userIdColumnIndicies)\n    // Make call to resolve entity ids\n    if (distinctEntityIds.size > 0) {\n      const referenceList: ReferenceList = Array.from(distinctEntityIds).map(id => { return { targetId: id }})\n      try {\n        const data = await SynapseClient.getEntityHeader(referenceList, token)\n        const { results } = data\n        results.forEach(\n          el => {\n            mapEntityIdToHeader[el.id] = el\n          }\n        )\n      } catch (err) {\n        console.error('Error on retrieving entity header list , ', err)\n      }\n    }\n    if (distinctUserIds.size === 0) {\n      if (distinctEntityIds.size > 0) {\n       this.setState({mapEntityIdToHeader}) \n      }\n      return\n    }\n    // Make call to get group headers and user profiles\n    const ids = Array.from(distinctUserIds)\n    const idsWithUserProfiles: string [] = []\n    // TODO: Grab Team Badge\n    try {\n      const data = await SynapseClient.getGroupHeadersBatch(ids, token)\n      data.children.forEach(\n        (el) => {\n          if (el.isIndividual) {\n            idsWithUserProfiles.push(el.ownerId)\n          } else {\n            mapUserIdToHeader[el.ownerId] = el\n          }\n        }\n      )\n    } catch (err) {\n      console.error('Error on getGroupHeaders batch: ', err)\n    }\n    if (idsWithUserProfiles.length > 0) {\n      try {\n        const data = await getUserProfileWithProfilePicAttached(idsWithUserProfiles, token)\n        data.list.forEach(\n          (el: UserProfile) => {\n            mapUserIdToHeader[el.ownerId] = el\n          }\n        )\n      } catch (err) {\n        console.error('Error on getUserProfile : ', err)\n      }\n    }\n    if (distinctEntityIds.size > 0 || distinctUserIds.size > 0) {\n      this.setState({\n        mapEntityIdToHeader,\n        mapUserIdToHeader\n      })\n    }\n  }\n\n  public getUniqueEntities(data: QueryResultBundle, mapIdToHeader: {}, indicies: number []) {\n    const distinctEntities = new Set<string>()\n    data!.queryResult.queryResults.rows.forEach((row) => {\n      row.values.forEach((el: any, colIndex: number) => {\n        // make sure this is a column of type entity and that we haven't retrieved this entity's information prior\n        if (indicies.includes(colIndex) && !Object.prototype.hasOwnProperty.call(mapIdToHeader,el) && el) {\n          distinctEntities.add(el)\n        }\n      })\n    })\n    return distinctEntities\n  }\n\n  public getColumnIndiciesWithType(columnType: EntityColumnType) {\n    const { data } = this.props\n    const columnsOfTypeEntity: number [] = []\n    data && data.selectColumns && data.selectColumns.forEach((el, index) => {\n      if (el.columnType === columnType) {\n        columnsOfTypeEntity.push(index)\n      } \n    })\n    return columnsOfTypeEntity\n  }\n\n  public toggleStateVariables = (...values: BooleanKeys<SynapseTableState> []) => (_event: React.SyntheticEvent) => {\n    const updatedState = {} \n    values.forEach(\n      el => updatedState[el] = !this.state[el]\n    )\n    this.setState(updatedState)\n  }\n\n  /**\n   * Display the view\n   */\n  public render() {\n    if (this.props.data === undefined) {\n      return this.props.loadingScreen || <div/>\n    }\n    // unpack all the data\n    const { data, isLoading = true, unitDescription, token, synapseId, facet, showBarChart } = this.props\n    const { queryResult } = data\n    const { queryResults } = queryResult\n    const { rows } = queryResults\n    const { headers } = queryResults\n    const { facets = [] } = data\n    const { isMenuWallOpen, isModalDownloadOpen, isExpanded } = this.state\n    const queryRequest = this.props.getLastQueryRequest!()\n    const {\n      sql,\n      selectedFacets\n    } = queryRequest.query\n    const style: React.CSSProperties = {}\n    if (showBarChart) {\n      style.marginTop = 15\n      style.marginBottom = 15\n    } else {\n      style.marginTop = -10\n    }\n    const content = (\n        <>\n         <div className=\"SRC-centerContent\" style={{ height:'20px', textAlign: 'left', ...style}}>\n          {\n            unitDescription && !isGroupByInSql(queryRequest.query.sql)\n            &&\n            <TotalQueryResults \n              facet={facet}\n              data={data}\n              isLoading={isLoading}\n              style={{fontSize: 15}}\n              unitDescription={unitDescription}\n              frontText={'Showing'}\n            />\n          }\n        </div>\n        {this.renderTableTop(headers)}\n        {this.renderTable(headers, facets, rows)}\n        {/* its intentional that the menu-wall is placed here because of the way that z-index works*/}\n        {isMenuWallOpen && <button onClick={this.closeAllDropdowns} className='SRC-menu-wall' />}\n      </>\n    )\n    return (\n      <React.Fragment>\n        {\n          // modal can render anywhere, this is not a particular location\n          isModalDownloadOpen\n          &&\n          <ModalDownload\n            onClose={this.toggleStateVariables('isModalDownloadOpen', 'isDropdownDownloadOptionsOpen', 'isMenuWallOpen')}\n            sql={sql}\n            selectedFacets={selectedFacets}\n            token={token}\n            entityId={synapseId}\n          />\n        }\n        {\n          isExpanded\n          &&\n          <Modal         \n            animation={false}\n            centered={true}\n            show={true}\n            // @ts-ignore\n            onHide={this.toggleStateVariables('isExpanded')}\n            dialogClassName={'modal-90w'}\n          >\n            <Modal.Header \n              // @ts-ignore\n              onHide={this.toggleStateVariables('isExpanded')} \n              closeButton={true}\n            >\n            </Modal.Header>\n            <Modal.Body>\n              {content}\n            </Modal.Body>\n          </Modal>\n        }\n        {\n          !isExpanded\n          &&\n          content\n        }\n    </React.Fragment>\n    )\n  }\n\n  private showGroupRowData = (selectedRow: Row) => (_event: React.MouseEvent<HTMLAnchorElement>) => {\n    // magic happens - parse query, deep copy query bundle request, modify, encode, send to Synapse.org.  Easy!\n    const queryCopy = cloneDeep(this.props.getLastQueryRequest!().query)\n    const parsed = this.getSqlUnderlyingDataForRow(\n      selectedRow,\n      queryCopy.sql)\n    queryCopy.sql = parsed.newSql\n    const queryJSON = JSON.stringify(queryCopy)\n    // encode this copy of the query (json)\n    const encodedQuery = btoa(queryJSON)\n    // open this in a new window on synapse.org\n    window.open(`https://www.synapse.org/#!Synapse:${parsed.synId}/tables/query/${encodedQuery}`, '_self')\n  }\n\n  private renderDropdownDownloadOptions = () => {\n    const { isDropdownDownloadOptionsOpen, isExpanded } = this.state\n    const tooltipAdvancedSearchId = 'openAdvancedSearch'\n    const tooltipDownloadId = 'download'\n    const toggleStateArgs: BooleanKeys<SynapseTableState> [] = ['isModalDownloadOpen']\n    // we don't want two modals to show at once, so we close out the expanded view if its already showing\n    if (isExpanded) {\n      toggleStateArgs.push('isExpanded')\n    }\n    return (\n      <span className={`dropdown ${DOWNLOAD_OPTIONS_CONTAINER_CLASS} ${isDropdownDownloadOptionsOpen ? 'open' : ''}`}>\n        <button \n          style={{ marginLeft: '10px' }}\n          data-for={tooltipDownloadId} \n          data-tip=\"Download Options\"\n          className=\"SRC-primary-background-color-hover SRC-extraPadding SRC-hand-cursor\" \n          onClick={this.toggleStateVariables('isDropdownDownloadOptionsOpen', 'isMenuWallOpen')}\n        >\n          <FontAwesomeIcon size=\"1x\" color=\"white\" icon=\"download\" />\n        </button>\n        <ReactTooltip \n          delayShow={TOOLTIP_DELAY_SHOW}\n          place=\"top\"\n          type=\"dark\"\n          effect=\"solid\"\n          id={tooltipAdvancedSearchId} \n        />\n        <ul className=\"SRC-table-dropdown-zindex dropdown-menu dropdown-menu-right\" aria-labelledby=\"dropdownMenu1\">\n          <li\n            style={{ listStyle: 'none' }}\n            className=\"SRC-table-dropdown-list SRC-primary-background-color-hover\"\n            onClick={this.toggleStateVariables(...toggleStateArgs)}\n          >\n            <a href=\"javascript:void\">\n              Export Metadata\n            </a>\n          </li>\n          <li\n            style={{ listStyle: 'none' }}\n            className=\"SRC-table-dropdown-list SRC-primary-background-color-hover\"\n            onClick={this.advancedSearch}\n          >\n            <a href=\"javascript:void\">\n              { DOWNLOAD_FILES_MENU_TEXT }\n            </a>\n          </li>\n        </ul>\n      </span>\n    )\n  }\n\n  private renderDropdownColumnMenu = (headers: SelectColumn[]) => {\n    const { isDropdownColumnMenuOpen } = this.state\n    const tooltipColumnSelectionId = 'addAndRemoveColumns'\n    let addRemoveColClasses  = 'SRC-inlineFlex SRC-primary-background-color-hover  dropdown-toggle SRC-hand-cursor'\n    addRemoveColClasses += (isDropdownColumnMenuOpen ? 'SRC-primary-background-color' : '')\n    return (\n      <span style={{marginLeft: 10, height: 30, width: 34, padding: 1}} className={`dropdown ${isDropdownColumnMenuOpen ? 'open' : ''}`}>  \n        <span \n          tabIndex={0} \n          data-for={tooltipColumnSelectionId} \n          data-tip=\"Add / Remove Columns\" \n          className={addRemoveColClasses} \n          onKeyPress={this.toggleStateVariables('isDropdownColumnMenuOpen', 'isMenuWallOpen')} \n          onClick={this.toggleStateVariables('isDropdownColumnMenuOpen', 'isMenuWallOpen')} \n          id=\"dropdownMenu1\"\n        >\n          <img alt=\"columns selection\" src={ColumnsSvg}/>\n        </span>\n        <ReactTooltip \n          delayShow={TOOLTIP_DELAY_SHOW} \n          place=\"top\" \n          type=\"dark\" \n          effect=\"solid\" \n          id={tooltipColumnSelectionId} \n        />\n        <ul className=\"SRC-table-dropdown-zindex dropdown-menu dropdown-menu-right SRC-column-menu\" aria-labelledby=\"dropdownMenu1\">\n          {this.renderDropdownColumnMenuItems(headers)}\n        </ul>\n      </span>\n    )\n  }\n\n  private renderTable = (headers: SelectColumn[], facets: FacetColumnResult[], rows: Row[]) => {\n    // handle displaying the previous button -- if offset is zero then it\n    // shouldn't be displayed\n    const pastZero: boolean = this.props.getLastQueryRequest!().query.offset! > 0\n    const previous = (\n      <button\n        onClick={this.handlePaginationClick(PREVIOUS)}\n        className=\"SRC-light-button SRC-standard-button-shape pull-right\"\n        type=\"button\"\n      >\n        Previous\n      </button>\n    )\n\n    const hasMoreData = this.props.hasMoreData\n    const next = (\n      (\n        <button\n          onClick={this.handlePaginationClick(NEXT)}\n          className=\"SRC-light-button SRC-standard-button-shape pull-right\"\n          type=\"button\"\n        >\n          Next\n        </button>\n      )\n    )\n\n    /* min height ensure if no rows are selected that a dropdown menu is still accessible */\n    return (\n      <div style={{ minHeight: '300px' }} className=\"SRC-overflowAuto\">\n        <table className=\"table table-striped table-condensed\">\n          <thead className=\"SRC_borderTop\">\n            <tr>\n              {this.createTableHeader(headers, facets)}\n            </tr>\n          </thead>\n          <tbody>{this.createTableRows(rows, headers)}</tbody>\n        </table>\n        {hasMoreData && next}\n        {pastZero && previous}\n      </div>\n    )\n  }\n\n  private renderTableTop = (headers: SelectColumn[] ) => {\n    const {\n      title,\n    } = this.props\n    const { isExpanded } = this.state\n    const tooltipExpandId = 'expand'\n    const tooltipAdvancedSearchId = 'openAdvancedSearch'\n    const tooltipDownloadId = 'download'\n    const { colorPalette } = getColorPallette(this.props.rgbIndex!, 1)\n    const backgroundColor = colorPalette[0]\n    return (\n      <div \n        className=\"SRC-centerContent\" \n        style={{ background: backgroundColor, padding: 8 }}\n      >\n        <h3 className=\"SRC-tableHeader\"> {title}</h3>\n        <span \n          className=\"SRC-inlineFlex\"\n          style={{ marginLeft: 'auto' }}\n          >\n            {!isGroupByInSql(this.props.getLastQueryRequest!().query.sql)\n                &&\n                <>\n                  <span \n                    tabIndex={0}\n                    data-for={tooltipAdvancedSearchId}\n                    data-tip=\"Open Advanced Search in Synapse\" \n                    className=\"SRC-primary-background-color-hover SRC-extraPadding SRC-hand-cursor\"\n                    onKeyPress={this.advancedSearch}\n                    onClick={this.advancedSearch}\n                  >\n                    <FontAwesomeIcon \n                      size=\"1x\"\n                      color=\"white\"\n                      icon={'filter'}\n                    />\n                  </span>\n                <ReactTooltip \n                  delayShow={TOOLTIP_DELAY_SHOW} \n                  place=\"top\"\n                  type=\"dark\"\n                  effect=\"solid\"\n                  id={tooltipDownloadId} \n                />\n                {this.renderDropdownDownloadOptions()}\n                {this.renderDropdownColumnMenu(headers)}\n              </>\n            }\n            <span\n              tabIndex={0}\n              data-for={tooltipExpandId} \n              data-tip=\"Expand table in full screen\"\n              className={`SRC-primary-background-color-hover SRC-inlineFlex SRC-extraPadding SRC-hand-cursor ${EXPAND_CLASS}`}\n              onKeyPress={this.toggleStateVariables('isExpanded')} \n              onClick={this.toggleStateVariables('isExpanded')}\n            >\n              {isExpanded ? <img src={ShrinkSvg} alt=\"shrink table\" /> : <img src={ExpandSvg} alt=\"expand table\" />}\n            </span>\n            <ReactTooltip\n              delayShow={TOOLTIP_DELAY_SHOW}\n              place=\"top\"\n              type=\"dark\"\n              effect=\"solid\"\n              id={tooltipExpandId} \n            />\n          </span>\n      </div>\n    )\n  }\n\n  /**\n   * Return the select column indexes for columns that use the aggregate count function.\n   * If sql does not have a GROUP BY, this returns an empty array.\n   * @param originalSql\n   */\n  public getCountFunctionColumnIndexes(originalSql: string): number[] {\n    const indexes: number[] = []\n    if (isGroupByInSql(originalSql)) {\n      const tokens: string[][] = lexer.tokenize(originalSql)\n      const selectIndex = tokens.findIndex(el => el[0] === 'SELECT')\n      const fromIndex = tokens.findIndex(el => el[0] === 'FROM')\n      let columnIndex = 0\n      for (let index = selectIndex + 1; index < fromIndex - selectIndex - 1; index += 1) {\n        const token = tokens[index]\n        if (token[0] === 'FUNCTION' && token[1].toLowerCase() === 'count') {\n          // found a count column!\n          indexes.push(columnIndex)\n        } else if (token[0] === 'SEPARATOR') {\n          // next column\n          columnIndex += 1\n        }\n      }\n    }\n    return indexes\n  }\n\n  public getSqlUnderlyingDataForRow(\n    selectedRow: Row,\n    originalSql: string\n  ): { synId: string, newSql: string } {\n    let tokens: string[][] = lexer.tokenize(originalSql)\n    const selectIndex = tokens.findIndex(el => el[0] === 'SELECT')\n    const fromIndex = tokens.findIndex(el => el[0] === 'FROM')\n\n    // gather all of the column names literals between select and from (and their indices)\n    const columnReferences: ColumnReference[] = []\n    let columnIndex = 0\n    let foundFunctionForColumn = false\n    for (let index = selectIndex + 1; index < fromIndex - selectIndex - 1; index += 1) {\n      const token = tokens[index]\n      // parsing error.  concat function is reported as a LITERAL instead of a function\n      if (token[0] === 'FUNCTION' || token[1].toLocaleLowerCase() === 'concat') {\n        foundFunctionForColumn = true\n      } else if (token[0] === 'LITERAL' && !foundFunctionForColumn) {\n        // found a column\n        columnReferences.push({index: columnIndex, name: token[1]})\n      } else if (token[0] === 'SEPARATOR') {\n        // next column\n        columnIndex += 1\n        // reset \"found function\"\n        foundFunctionForColumn = false\n      }\n    }\n\n    // remove all tokens after (and including) group\n    tokens = tokens.slice(0, tokens.findIndex(el => el[0] === 'GROUP'))\n    // replace all columns with *\n    tokens.splice(selectIndex + 1, fromIndex - selectIndex - 1, ['STAR', '*', '1'])\n    // add new items to where clause, but only if the column name corresponds to a real column in the table/view!\n    // use row.values\n    if (this.props.data === undefined) {\n      return { synId: '', newSql: '' }\n    }\n    const whereIndex = tokens.findIndex(el => el[0] === 'WHERE')\n    if (whereIndex === -1) {\n      // does not contain a where clause\n      tokens.push(\n        ['WHERE', 'WHERE', '1'],\n      )\n    } else {\n      // alreay contains a where clause, add the first AND\n      tokens.push(\n        ['CONDITIONAL', 'AND', '1'],\n      )\n    }\n    \n    // look for headers in column models, if they match then add a where clause\n    columnReferences.forEach((value: ColumnReference, index: number) => {\n      const rowValue = selectedRow.values[value.index]\n      // PORTALS-712: support null values\n      if (rowValue) {\n        tokens.push(\n          ['LITERAL', value.name, '1'],\n          ['OPERATOR', '=', '1'],\n          ['STRING', rowValue, '1'],\n          ['CONDITIONAL', 'AND', '1'],\n        )\n      } else {\n        tokens.push(\n          ['LITERAL', value.name, '1'],\n          ['OPERATOR', 'IS', '1'],\n          ['BOOLEAN', 'null', '1'],\n          ['CONDITIONAL', 'AND', '1'],\n        )\n      }\n    })\n    // remove the last AND\n    tokens.pop()\n    // remove backtick from output sql (for table name): `syn1234` becomes syn1234\n    const synId = tokens[tokens.findIndex(el => el[0] === 'FROM') + 1][1]\n    tokens.push(['EOF', '', '1'])\n    return { synId, newSql: formatSQLFromParser(tokens) }\n  }\n\n  /**\n   * Handle a click on next or previous\n   *\n   * @memberof SynapseTable\n   */\n  private handlePaginationClick = (eventType: string) => (_event: React.MouseEvent<HTMLButtonElement>) => {\n    const queryRequest = this.props.getLastQueryRequest!()\n    let currentOffset = queryRequest.query.offset!\n        // if its a \"previous\" click subtract from the offset\n        // otherwise its next and we paginate forward\n    if (eventType === PREVIOUS) {\n      currentOffset -= 25\n    }\n    if (eventType === NEXT) {\n      currentOffset += 25\n    }\n    queryRequest.query.offset = currentOffset\n    this.props.executeQueryRequest!(queryRequest)\n  }\n  /**\n   * Handle a column having been selected\n   *\n   * @memberof SynapseTable\n   */\n  public handleColumnSortPress = (dict: Info) => (_: React.SyntheticEvent) => {\n    // by using Synthetic event we can use the handler on both key press and mouse click\n    let columnIconSortState = cloneDeep(this.state.columnIconSortState)\n    if (columnIconSortState.length === 0) {\n      columnIconSortState = Array(this.getLengthOfPropsData()).fill(0)\n    }\n    // get currently sorted items and remove/insert/update this selection\n    const sortedColumnSelection = cloneDeep(this.state.sortedColumnSelection)\n    const index = this.findSelectionIndex(sortedColumnSelection, dict.name)\n    // if its present then remove it\n    if (index !== -1) {\n      sortedColumnSelection.splice(index, 1)\n    }\n    columnIconSortState[dict.index] = (columnIconSortState[dict.index] + 1) % ICON_STATE.length\n    if (columnIconSortState[dict.index] > 0) {\n      sortedColumnSelection.unshift({\n        column: dict.name,\n        direction: SORT_STATE[columnIconSortState[dict.index]]\n      })\n    }\n    const queryRequest = this.props.getLastQueryRequest!()\n    queryRequest.query.sort = sortedColumnSelection\n    this.props.executeQueryRequest!(queryRequest)\n    this.setState({\n      columnIconSortState,\n      sortedColumnSelection\n    })\n  }\n\n  /**\n   * Renders the dropdown menu to the top right of table that allows users\n   * to toggle a columnn from the view of the table\n   *\n   * @private\n   * @param {SelectColumn[]} headers\n   * @returns {React.ReactNode}\n   * @memberof SynapseTable\n   */\n  private renderDropdownColumnMenuItems = (headers: SelectColumn[]) => {\n    return headers.map((header: any, index: number) => {\n      let isColumnSelected: boolean | undefined = this.state.isColumnSelected[index]\n      // if visibleColumnCount is not defined then show all columns\n      const { visibleColumnCount = Infinity } = this.props\n      if (isColumnSelected === undefined) {\n        isColumnSelected = (index < visibleColumnCount)\n      }\n      const iconStyle: any = { width: '11px', marginRight: '10px' }\n      if (!isColumnSelected) {\n        iconStyle.visibility = 'hidden'\n      }\n      const maybeShowPrimaryColor = isColumnSelected ? 'SRC-primary-text-color' : ''\n\n      return (\n        <li\n          style={{ listStyle: 'none' }}\n          className=\"SRC-table-dropdown-list SRC-primary-background-color-hover \"\n          key={header.name}\n          onClick={this.toggleColumnSelection(index)}\n        >\n          <a href=\"javascript:void\">\n            <FontAwesomeIcon\n              style={iconStyle}\n              className={maybeShowPrimaryColor}\n              icon=\"check\"\n            />\n            {header.name}\n          </a>\n        </li>\n      )\n    })\n  }\n  private createTableRows(rows: Row [], headers: SelectColumn[]) {\n    const rowsFormatted: JSX.Element[] = []\n    const { isColumnSelected, mapEntityIdToHeader, mapUserIdToHeader } = this.state\n    const entityColumnIndicies = this.getColumnIndiciesWithType('ENTITYID')\n    const userColumnIndicies = this.getColumnIndiciesWithType('USERID')\n    const isColumnSelectedLen = isColumnSelected.length\n    // find column indices that are COUNT type\n    const countColumnIndexes = this.getCountFunctionColumnIndexes(this.props.getLastQueryRequest!().query.sql)\n    const {\n      visibleColumnCount = Infinity\n    } = this.props\n    rows.forEach((row: any, rowIndex) => {\n      const rowContent = row.values.map(\n        (columnValue: string, colIndex: number) => {\n          const columnName = headers[colIndex].name\n          const index = this.findSelectionIndex(this.state.sortedColumnSelection, columnName)\n          const usedVisibleColumnCount = isGroupByInSql(this.props.getLastQueryRequest!().query.sql) ?  Infinity: visibleColumnCount\n          // on iniital load isColumnSelected is null and we by default show all columns that come\n          // before visibileColumnCount\n          const isColumnActiveInitLoad: boolean = colIndex < usedVisibleColumnCount && isColumnSelectedLen === 0\n          // past the initial load -- when a user has started clicking items, then isColumnSelected is\n          // not null and we verify that this column is part of the selection.\n          const isColumnActivePastInitLoad = isColumnSelectedLen !== 0 && this.state.isColumnSelected[colIndex]\n          const isCountColumn = countColumnIndexes.includes(colIndex)\n          const isBold = index === -1 ? '' : 'SRC-boldText'\n          if (isColumnActiveInitLoad || isColumnActivePastInitLoad) {\n            return (\n              <td className=\"SRC_noBorderTop\" key={`(${rowIndex}${columnValue}${colIndex})`}>\n                  {\n                    isCountColumn &&\n                    <a href=\"javascript:void\" onClick={this.showGroupRowData(row)}>\n                      <p className={isBold}>{columnValue}</p>\n                    </a>\n                  }\n                  {\n                    !isCountColumn &&\n                    this.renderTableCell({ entityColumnIndicies, userColumnIndicies, colIndex, columnValue, isBold, mapEntityIdToHeader, mapUserIdToHeader })\n                  }\n              </td>\n            )\n          }\n          return (<td className=\"SRC-hidden\" key={`(${rowIndex},${colIndex})`}/>)\n        })\n      const rowFormatted = (\n        <tr key={row.rowId}>{rowContent}</tr>\n      )\n      rowsFormatted.push(rowFormatted)\n    })\n    return rowsFormatted\n  }\n\n  // Render table cell, supports Entity's and User Icons\n  public renderTableCell(\n    { \n      entityColumnIndicies,\n      userColumnIndicies,\n      colIndex,\n      columnValue,\n      isBold,\n      mapEntityIdToHeader,\n      mapUserIdToHeader\n    }:{ \n      entityColumnIndicies: number[]; \n      userColumnIndicies: number[];\n      colIndex: number;\n      columnValue: string;\n      isBold: string; \n      mapEntityIdToHeader: Dictionary<EntityHeader>,\n      mapUserIdToHeader: Dictionary<any>\n    }): React.ReactNode {\n    if (entityColumnIndicies.includes(colIndex) &&  Object.prototype.hasOwnProperty.call(mapEntityIdToHeader, columnValue)) {\n      return <EntityLink entityHeader={mapEntityIdToHeader[columnValue]} className={isBold} />\n    } else if (userColumnIndicies.includes(colIndex) && Object.prototype.hasOwnProperty.call(mapUserIdToHeader, columnValue)) {\n      const { ownerId, userName } = mapUserIdToHeader[columnValue]\n      if (mapUserIdToHeader[columnValue].isIndividual === false) {\n        // isUserGroupHeader\n        const icon = userName === AUTHENTICATED_USERS ? 'globe-americas': 'users'\n        if (userName === AUTHENTICATED_USERS) {\n          return <span ><FontAwesomeIcon icon={icon}/> All registered Synapse users </span>\n        }\n        return (<a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.synapse.org/#!Team:${ownerId}`}> <FontAwesomeIcon icon={icon}/> {userName} </a>)\n      } else {\n        // isUserCard\n        return  (\n          <UserCard \n            userProfile={mapUserIdToHeader[columnValue]} \n            preSignedURL={mapUserIdToHeader[columnValue].clientPreSignedURL}\n            size={'SMALL USER CARD'}\n          />\n        )\n      }\n    } else {\n      return (<p className={isBold}> {columnValue} </p>)\n    }\n  }\n\n  private createTableHeader(headers: SelectColumn[], facets: FacetColumnResult[]) {\n    const { isColumnSelected, sortedColumnSelection, columnIconSortState } = this.state\n    const { visibleColumnCount = Infinity, facetAliases = {} } = this.props\n    const usedVisibleColumnCount = isGroupByInSql(this.props.getLastQueryRequest!().query.sql) ? Infinity: visibleColumnCount\n    return headers.map((column: SelectColumn, index: number) => {\n      // two cases when rendering the column headers on init load\n      // of the page we have to show only this.props.visibleColumnCount many\n      // columns, afterwards we rely on the isColumnSelected to get choices\n      const initRender: boolean = index < usedVisibleColumnCount && isColumnSelected.length === 0\n      const subsequentRender = isColumnSelected[index] && isColumnSelected.length !== 0\n      if (initRender || subsequentRender) {\n        // for background color\n        const isSelected: boolean = this.findSelectionIndex(sortedColumnSelection, column.name) !== -1\n        // for icon state\n        const columnIndex: number = columnIconSortState[index] === undefined ? 0 : columnIconSortState[index]\n        // we have to figure out if the current column is a facet selection\n        const facetIndex: number = facets.findIndex((facetColumnResult: FacetColumnResult) => {\n          const facetDisplayValue = facetAliases[facetColumnResult.columnName] || facetColumnResult.columnName\n          return facetDisplayValue === column.name\n        })\n        // the header must be included in the facets and it has to be enumerable for current rendering capabilities\n        const isFacetSelection: boolean = facetIndex !== -1 && facets[facetIndex].facetType === 'enumeration'\n        const isSelectedSpanClass = (isSelected ? 'SRC-primary-background-color SRC-anchor-light' : '')\n        const isSelectedIconClass = isSelected ? 'SRC-selected-table-icon' : 'SRC-primary-text-color'\n        const sortSpanBackgoundClass = `SRC-tableHead SRC-hand-cursor SRC-sortPadding SRC-primary-background-color-hover  ${isSelectedSpanClass}`\n        return (\n          <th key={column.name}>\n            <div className=\"SRC-centerContent\">\n              <span style={{ whiteSpace: 'nowrap' }}>\n              {column.name}\n              </span>\n              {isFacetSelection && this.configureFacetDropdown(index, facets, facetIndex)}\n              <span\n                tabIndex={0}\n                className={sortSpanBackgoundClass}\n                onKeyPress={this.handleColumnSortPress({ index, name: column.name })}\n                onClick={this.handleColumnSortPress({ index, name: column.name })}\n              >\n                <FontAwesomeIcon\n                  className={`SRC-primary-background-color-hover  ${isSelectedIconClass}`}\n                  icon={ICON_STATE[columnIndex] as IconProp}\n                />\n              </span>\n            </div>\n          </th>\n        )\n      } else {\n        return <th className=\"SRC-hidden\" key={column.name} />\n      }\n    })\n  }\n\n  /**\n   * Utility to search through array of objects and find object with key \"column\"\n   * equal to input parameter \"name\"\n   *\n   * @param {*} sortedColumnSelection\n   * @param {*} name\n   * @returns -1 if not present, otherwise the index of the object\n   * @memberof SynapseTable\n   */\n  private findSelectionIndex(sortedColumnSelection: SortItem [], name: string) {\n    if (sortedColumnSelection.length !== 0) {\n      // find if the current selection exists already and remove it\n      return sortedColumnSelection.findIndex((el: SortItem) => el.column === name)\n    }\n    return -1\n  }\n\n  // Direct user to corresponding query on synapse\n  private advancedSearch(event: React.SyntheticEvent) {\n    event && event.preventDefault()\n    const lastQueryRequest = this.props.getLastQueryRequest!()\n    const { query } = lastQueryRequest\n        // base 64 encode the json of the query and go to url with the encoded object\n    const encodedQuery = btoa(JSON.stringify(query))\n    const synTable = this.props.synapseId\n    window.open(`https://www.synapse.org/#!Synapse:${synTable}/tables/query/${encodedQuery}`, '_blank')\n  }\n\n  private getLengthOfPropsData() {\n    const { data } = this.props\n    return data!.queryResult.queryResults.headers.length\n  }\n  /**\n   * Handles the toggle of a column select, this will cause the table to\n   * either show the column or hide depending on the prior state of the column\n   *\n   * @memberof SynapseTable\n   */\n  public toggleColumnSelection = (index: number) => (event: React.MouseEvent<HTMLLIElement>) => {\n    event.preventDefault()\n    let isColumnSelected: boolean []\n    // lazily initialize isColumnSelected, at first it's empty\n    // and then on first column click we set it\n    if (this.state.isColumnSelected.length === 0) {\n      const { visibleColumnCount = Infinity } = this.props\n      // unpack all the data\n      const lengthOfPropsData = this.getLengthOfPropsData()\n      let defaultSelection\n      // fill up to visibleColumnCount with true and the rest as false\n      if (visibleColumnCount === Infinity) {\n        // if set to zero then its all true\n        defaultSelection = Array(lengthOfPropsData).fill(true)\n      } else {\n        // fill in whole array as false\n        defaultSelection = Array(lengthOfPropsData).fill(false)\n        // then fill in up until lengthOfPropsData with true\n        defaultSelection.fill(true, 0, visibleColumnCount)\n      }\n      isColumnSelected = defaultSelection\n    } else {\n      isColumnSelected = cloneDeep(this.state.isColumnSelected)\n    }\n    isColumnSelected[index] = !isColumnSelected[index]\n    this.setState({ isColumnSelected })\n  }\n\n  /**\n   * Show the dropdown menu for a column that has been faceted\n   *\n   * @param {number} index this is column index of the query table data\n   * @param {string} columnName this is the name of the column\n   * @param {FacetColumnResult[]} facetColumnResults\n   * @param {number} facetIndex\n   * @returns\n   * @memberof SynapseTable\n   */\n  public configureFacetDropdown(index: number, facetColumnResults: FacetColumnResult[], facetIndex: number) {\n\n    // this grabs the specific facet selection\n    const facetColumnResult = facetColumnResults[facetIndex] as FacetColumnResultValues\n    const columnName = facetColumnResult.columnName\n\n    // this is related to whether we've selected this column or not\n    const isCurFilterSelected = this.state.activeFilterIndex === index\n\n    const ref: React.RefObject<HTMLSpanElement> = React.createRef()\n    const refOuterDiv: React.RefObject<HTMLDivElement> = React.createRef()\n\n    const applyPrimary = isCurFilterSelected ? 'SRC-primary-background-color' : 'SRC-primary-text-color'\n    const classList = isCurFilterSelected ? this.state.activeFilterClass : ''\n    const style = { alignItems: 'center', marginLeft: '10px', marginRight: '3px', color: 'black', display: 'flex' }\n    const isChecked = this.props.isAllFilterSelectedForFacet![columnName]\n    return (\n      <div\n        ref={refOuterDiv}\n        style={style}\n        className={`SRC-table-dropdown-zindex SRC-table-facet-dropdown btn-group SRC-tableHead ${isCurFilterSelected ? 'open SRC-anchor-light' : ''}`}\n      >\n        <span\n          tabIndex={0}\n          className={`SRC-padding SRC-hand-cursor SRC-primary-background-color-hover ${applyPrimary}`}\n          onKeyPress={this.toggleFilterDropdown(index, isCurFilterSelected, refOuterDiv)}\n          onClick={this.toggleFilterDropdown(index, isCurFilterSelected, refOuterDiv)}\n          style={{ outline: 'none' }}\n        >\n          <FontAwesomeIcon\n            style={{ margin: 'auto' }}\n            size={'1x'}\n            className={applyPrimary}\n            color={isCurFilterSelected ? 'white' : ''}\n            icon=\"filter\"\n          />\n        </span>\n\n        <div style={{paddingLeft: 20}} className={`dropdown-menu dropdown-menu-override SRC-minDropdownWidth ${classList}`}>\n          <ul style={{ listStyleType: 'none' }} className=\"scrollable checkbox\">\n            <label\n              className=\"dropdownList SRC-border-bottom-only SRC-overflowWrap SRC-base-font SRC-fullWidth\"\n              style={{paddingBottom: 10}}\n            >\n            <input\n              onClick={this.applyChanges({ ref, columnName, selector: SELECT_ALL })}\n              checked={isChecked}\n              className=\"SRC-facet-checkboxes\"\n              type=\"checkbox\"\n              />\n              <span> All </span>\n            </label>\n            <span ref={ref}>\n              {this.renderFacetSelection(facetColumnResult, ref, columnName)}\n            </span>\n          </ul>\n        </div>\n      </div>\n    )\n  }\n\n  // This closes out all the dropdowns, since the button calling this method is only rendered if the dropdown\n  // is visible then we can safely close out all dropdowns without checking them\n  public closeAllDropdowns(_: React.SyntheticEvent) {\n    // this ensures all dropdown variables are set to false and any additional dropdowns added are added to this list\n    const dropdownKeys: BooleanKeys<SynapseTableState> [] = [\n      'isDropdownColumnMenuOpen',\n      'isDropdownDownloadOptionsOpen',\n      'isModalDownloadOpen',\n      'isMenuWallOpen'\n    ]\n    const updatedState = {\n      activeFilterClass: '',\n      activeFilterIndex: -1,\n    }\n    dropdownKeys.forEach(\n      el => {\n        updatedState[el] = false\n      }\n    )\n    this.setState(updatedState)\n  }\n\n  public renderFacetSelection(\n    facetColumnResult: FacetColumnResultValues,\n    ref: React.RefObject<HTMLSpanElement>,\n    columnName: string,\n  ): React.ReactNode {\n\n    const { lastFacetSelection, isLoading, isAllFilterSelectedForFacet } = this.props\n    return facetColumnResult.facetValues.map(\n      (facetColumnResultValueCount: FacetColumnResultValueCount) => {\n        const { value: facetValue, count } = facetColumnResultValueCount\n        let displayValue = facetValue\n        if (displayValue === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET') {\n          displayValue = 'unannotated'\n        }\n        const key = columnName + facetValue + count \n        const isValueSelected = isAllFilterSelectedForFacet![columnName] ? false :  getIsValueSelected({\n          columnName,\n          isLoading,\n          lastFacetSelection,\n          curFacetSelection: facetColumnResultValueCount,\n        })\n        return (\n          <li className=\"checkbox SRC-table-checkbox\" key={key}>\n            <label className=\"dropdownList SRC-overflowWrap SRC-base-font SRC-fullWidth\">\n              <input\n                onChange={this.applyChanges({ ref, columnName, facetValue })}\n                checked={isValueSelected}\n                className=\"SRC-facet-checkboxes\"\n                type=\"checkbox\"\n                value={facetValue}\n                />\n              <span>\n                {displayValue}\n                <span style={{ color: '#DDDDDF', marginLeft: '3px' }}> ({count}) </span>\n              </span>\n            </label>\n          </li>\n        )\n      })\n  }\n\n  /**\n   * When the user decides to submit their changes for the dropdown menu with the facet, they have an\n   * apply button, this method handles that submission.\n   *\n   * @memberof SynapseTable\n   */\n  public applyChanges = ({\n      ref,\n      columnName,\n      facetValue = '',\n      selector = '',\n    }: {\n      ref: React.RefObject<HTMLSpanElement>,\n      columnName: string,\n      facetValue?: string,\n      selector?: string,\n    }) => (_: React.SyntheticEvent<HTMLElement>) => {\n      const htmlCheckboxes = Array.from(ref.current!.querySelectorAll('.SRC-facet-checkboxes')) as HTMLInputElement []\n      const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n      const { isAllFilterSelectedForFacet } = this.props\n      const { newQueryRequest } = readFacetValues({\n        htmlCheckboxes,\n        queryRequest,\n        selector,\n        facet: columnName\n      })\n\n      const lastFacetSelection = {\n        columnName,\n        facetValue,\n        selector\n      } as FacetSelection\n      isAllFilterSelectedForFacet![columnName] = selector === SELECT_ALL\n      this.props.updateParentState!({\n        lastFacetSelection,\n        isAllFilterSelectedForFacet\n      })\n\n      this.props.executeQueryRequest!(newQueryRequest)\n    }\n\n  public toggleFilterDropdown =\n   (index: number, isCurFilterSelected: boolean, refOuterDiv: React.RefObject<HTMLDivElement>) => (_event: any) => {\n     // The dropdown is located inside of a scrollable, to know whether the current filter menu item is near the\n     // front of the scrollable we can examine its parent bounding rect -- this gives a relative value\n     // (that changes on scroll) of the filter to a fixed left most point.\n     const tHeadLeftPosition = refOuterDiv.current!.parentElement!.getBoundingClientRect().left\n     const activeFilterClass = tHeadLeftPosition < MIN_SPACE_FACET_MENU ?\n       'SRC-forceLeftDropdown dropdown-menu-left' : 'dropdown-menu-right'\n     // set the class names for this dropdown item\n     this.setState({\n       activeFilterClass,\n       activeFilterIndex: index,\n       isDropdownColumnMenuOpen: false,\n       isMenuWallOpen: !isCurFilterSelected\n     })\n   }\n}\n\ntype ColumnReference = {\n  index: number,\n  name: string\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons'\nimport * as React from 'react'\nimport {\n  FacetColumnResultValues,\n} from '../utils/jsonResponses/Table/FacetColumnResult'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { getColorPallette } from './ColorGradient'\nimport { QueryWrapperChildProps, FacetSelection } from './QueryWrapper'\n\nimport { SELECT_ALL } from './SynapseTable'\nimport { getIsValueSelected, readFacetValues } from '../utils/modules/facetUtils'\nimport TotalQueryResults from './TotalQueryResults'\n\nexport const SELECT_SINGLE_FACET = 'SELECT_SINGLE_FACET'\n// Add all icons to the library so you can use it in your page\nlibrary.add(faTimes)\nlibrary.add(faPlus)\n\ntype CheckboxGroupProps = {\n  isAllFilterSelected: boolean\n  rgbIndex: number\n  facetColumnResult: FacetColumnResultValues\n  applyChanges: (\n    ref: React.RefObject<HTMLSpanElement>,\n    facetValue: string,\n    selector: string,\n  ) =>\n  (\n    _event: React.MouseEvent<HTMLSpanElement>\n  ) => void\n  showAllFacets: boolean\n  lastFacetSelection: FacetSelection\n  isLoading: boolean\n}\n\nexport const FACET_SELECTED_CLASS = 'FACET_SELECTED_CLASS'\nexport const FACET_NOT_SELECTED_CLASS = 'FACET_NOT_SELECTED_CLASS'\n\n/**\n * Checkbox group represents one column's set of checkbox filters\n *\n * @class CheckboxGroup\n * @extends {React.Component}\n */\nconst CheckboxGroup: React.FunctionComponent<CheckboxGroupProps> = (props: CheckboxGroupProps) => {\n\n  const {\n    facetColumnResult,\n    showAllFacets,\n    lastFacetSelection,\n    isLoading,\n    rgbIndex,\n    isAllFilterSelected,\n  } = props\n  const children: any = []\n  const ref: React.RefObject<HTMLSpanElement> = React.createRef()\n  // Note: this actually sorts the data when it appears in the\n  // table as it stands currently, this may change depending on\n  // if that arrangment is no longer desired\n  facetColumnResult.facetValues.sort((a: any, b: any) => {\n    return b.count - a.count\n  })\n  const { colorPalette, textColors } = getColorPallette(rgbIndex, facetColumnResult.facetValues.length)\n  facetColumnResult.facetValues.forEach((facetColumnResultValues, index: number) => {\n\n    const key = facetColumnResult.columnName + facetColumnResultValues.value + facetColumnResultValues.count\n    const textColor = textColors[index]\n    const curColor = colorPalette[index]\n    let style: any = {}\n\n    const isSelected = isAllFilterSelected ? true : getIsValueSelected({\n      isLoading,\n      lastFacetSelection,\n      columnName: facetColumnResult.columnName,\n      curFacetSelection: facetColumnResultValues\n    })\n\n    if (isSelected) {\n      style = {\n        background: curColor\n      }\n    } else {\n      style = {\n        background: '#C4C4C4'\n      }\n    }\n    // we add this class for testability\n    const backgroundClass = isSelected ? FACET_SELECTED_CLASS : FACET_NOT_SELECTED_CLASS\n    style.color = textColor\n    const { value, count } = facetColumnResultValues\n    const displayValue = value === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET' ? 'unannotated' : value\n\n    children.push(\n      <label\n        style={style}\n        className=\"SRC-facets SRC-primary-background-color-hover \"\n        key={key}\n      >\n        <span className=\"SRC-facets-text\">\n          {displayValue} ({count}){' '}\n        </span>\n        <input\n          // @ts-ignore\n          onChange={props.applyChanges(ref, value , SELECT_SINGLE_FACET)}\n          checked={isSelected}\n          type=\"checkbox\"\n          value={value}\n          className={`SRC-hidden SRC-facet-checkboxes ${backgroundClass}`}\n        />\n      </label>\n    )\n  })\n  // By default only show 5 facets unless the user has clicked a facet, in which case\n  // showAllFacets will be true.\n  const childrenView = children.map((child: any, index: number) => !showAllFacets && index > 4 ? false : child)\n  return (\n    // need a span so that we can have a ref attachable\n    <span ref={ref}>\n      {childrenView}\n    </span>\n  )\n}\n\ntype FacetsState = {\n  showAllFacets: boolean\n}\n\nclass Facets extends React.Component<QueryWrapperChildProps, FacetsState> {\n\n  constructor(props: QueryWrapperChildProps) {\n    super(props)\n    this.applyChanges = this.applyChanges.bind(this)\n    this.state = {\n      showAllFacets: false\n    }\n    this.showAllFacets = this.showAllFacets.bind(this)\n    this.showButtons = this.showButtons.bind(this)\n  }\n  /**\n   * Display the view of the facets\n   *\n   * @returns\n   * @memberof Facets\n   */\n  public showFacetFilter() {\n    if (!this.props.data!.facets) {\n      throw Error('Error on query request, must include facets in partmask to show facets')\n    }\n    // Find the facetcolumn result according to the input filter\n    const facetColumnResult = this.props.data!.facets!.find(el => el.columnName === this.props.facet && el.facetType === 'enumeration')\n    if (!facetColumnResult) {\n      throw Error('Error no matching facet found given specified facet')\n    }\n\n    return (\n      <CheckboxGroup\n        isAllFilterSelected={this.props.isAllFilterSelectedForFacet![this.props.facet!]}\n        showAllFacets={this.state.showAllFacets}\n        rgbIndex={this.props.rgbIndex!}\n        key={facetColumnResult.columnName}\n        facetColumnResult={facetColumnResult}\n        applyChanges={this.applyChanges}\n        isLoading={this.props.isLoading!}\n        lastFacetSelection={this.props.lastFacetSelection!}\n      />\n    )\n  }\n\n  /**\n   * Handle checkbox click event\n   */\n  public applyChanges = (\n    ref: React.RefObject<HTMLSpanElement>,\n    facetValue: string,\n    selector :string,\n    index?: number\n  ) =>\n  (event: React.MouseEvent<HTMLSpanElement>) => {\n    event.preventDefault()\n    if (!this.state.showAllFacets) {\n      this.setState({\n        showAllFacets: true\n      })\n    }\n\n    const { facet = '', isAllFilterSelectedForFacet = {} } = this.props\n\n    const lastFacetSelection = {\n      facetValue,\n      selector,\n      columnName: facet,\n    } as FacetSelection\n    isAllFilterSelectedForFacet[facet] = selector === SELECT_ALL\n\n    this.props.updateParentState!({\n      lastFacetSelection,\n      isAllFilterSelectedForFacet,\n      chartSelectionIndex: index\n    })\n\n    // read input and fetch data\n    const htmlCheckboxes = Array.from(ref.current!.querySelectorAll('.SRC-facet-checkboxes')) as HTMLInputElement[]\n    // queryRequest is a deep clone\n    const queryRequest: QueryBundleRequest = this.props.getLastQueryRequest!()\n    const { newQueryRequest } = readFacetValues({\n      htmlCheckboxes,\n      queryRequest,\n      selector,\n      facet,\n      value: facetValue,\n    })\n\n    queryRequest.query.offset = 0\n    this.props.executeQueryRequest!(newQueryRequest)\n  }\n\n  public showAllFacets(event: React.MouseEvent<HTMLButtonElement>) {\n    event.preventDefault()\n    this.setState({\n      showAllFacets: true\n    })\n  }\n\n  public showButtons(showAllFacets: boolean, curFacetsLength: number, ref: React.RefObject<HTMLDivElement>) {\n    if (showAllFacets) {\n      // this is hidden if there are > 5 facets, wait for user to make\n      // an action for this to appear\n      return (\n        <button\n          className=\"SRC-primary-text-color SRC-facet-select-all SRC-no-text-decor\"\n          onClick={this.applyChanges(ref, '', SELECT_ALL)}\n        >\n          Select All\n        </button>\n      )\n    }\n\n    return (\n      <button\n        id=\"showAllFacetsButton\"\n        className=\"SRC-primary-text-color SRC-no-text-decor\"\n        onClick={this.showAllFacets}\n      >\n        {' '}\n        Show All ({curFacetsLength}){' '}\n      </button>\n    )\n  }\n\n  public render() {\n    if (!this.props.data) {\n      return (<div/>)\n    }\n    let { showAllFacets } = this.state\n    const { data, facet, unitDescription, isLoading, showBarChart } = this.props\n    const { facets } = data\n    if (!facets) {\n      throw Error('Error on query request, must include facets in partmask to show facets')\n    }\n    const curFacetsIndex = facets.findIndex(curFacet => curFacet.columnName === facet && curFacet.facetType === 'enumeration')\n    // cast is necessary because filter returns an array of arrays\n    const facetColumnResultValues = facets[curFacetsIndex] as FacetColumnResultValues\n\n    if (!facetColumnResultValues) {\n      return (<div/>)\n    }\n\n    if (facetColumnResultValues.facetValues.length < 5) {\n      // override\n      showAllFacets = true\n    }\n    const ref: React.RefObject<HTMLDivElement> = React.createRef()\n    return (\n      <div className=\"SRC-syn-border-spacing\">\n        {\n          !showBarChart\n          &&\n          <TotalQueryResults\n            data={data}\n            facet={facet!}\n            unitDescription={unitDescription!}\n            frontText={'Displaying'}\n            isLoading={isLoading!}\n          />\n        }\n        <form>\n          <div ref={ref} className=\"SRC-marginFive form-group\">\n            {this.showFacetFilter()}\n            {this.showButtons(showAllFacets, facetColumnResultValues.facetValues.length, ref)}\n          </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport { Facets, CheckboxGroup }\n","import { SynapseConstants, SynapseClient } from '../utils/'\nimport * as React from 'react'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\n\nexport type QueryCountProps = {\n  sql: string\n  name: string\n  token?: string\n}\n\ntype QueryCountState = {\n  [index: string]: number\n}\n\n\n/**\n * QueryCount shows a query count\n *\n * @export\n * @class QueryCount\n * @extends {React.Component<QueryCountProps, QueryCountState>}\n */\nexport default class QueryCount extends React.Component<QueryCountProps, QueryCountState> {\n\n  constructor(props: QueryCountProps) {\n    super(props)\n    this.state = {}\n    this.calculateRowCount = this.calculateRowCount.bind(this)\n  }\n\n  componentDidMount() {\n    this.calculateRowCount()\n  }\n  \n  componentDidUpdate() {\n    this.calculateRowCount()\n  }\n  \n  calculateRowCount() {\n    const { sql, token } = this.props\n    if (this.state[sql]) {\n      return\n    }\n    const request: QueryBundleRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      query: {\n        sql,\n      },\n      partMask: SynapseConstants.BUNDLE_MASK_QUERY_COUNT\n    }\n    SynapseClient.getQueryTableResults(request, token).then(\n      (data) => {\n        this.setState({ [sql]: data.queryCount! })\n      }\n    )\n  }\n\n  render () {\n    const { sql, name } = this.props\n    const count = this.state[sql]\n    /* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString#Using_toLocaleString */\n    return <React.Fragment> {name} ({count && count.toLocaleString()}) </React.Fragment>\n  }\n}\n","import * as React from 'react'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\nimport { SynapseClient, SynapseConstants } from '../utils/'\nimport { cloneDeep } from '../utils/modules'\nimport { getNextPageOfData } from '../utils/modules/queryUtils'\nimport { AsynchronousJobStatus } from '../utils/jsonResponses/Table/AsynchronousJobStatus'\nimport { FacetColumnResultValues } from '../utils/jsonResponses/Table/FacetColumnResult'\n\nexport type QueryWrapperProps = {\n  initQueryRequest: QueryBundleRequest\n  rgbIndex?: number\n  token?: string\n  showMenu?: boolean\n  facet?: string\n  loadingScreen?: JSX.Element\n  unitDescription?: string\n  facetAliases?: {}\n  loadNow?: boolean\n  showBarChart?: boolean\n}\n\nexport type QueryWrapperState = {\n  /*\n    isAllFilterSelectedForFacet tracks whether for a particular\n     facet if the 'All' button has been selected, this tracks the\n     click event and syncs Facets.tsx and SynapseTable.tsx\n  */\n  isAllFilterSelectedForFacet: {}\n  data: QueryResultBundle | undefined\n  isLoadingNewData: boolean  // occurs when props change\n  isLoading: boolean         // occurs when state changes\n  lastQueryRequest: QueryBundleRequest\n  hasMoreData: boolean\n  lastFacetSelection: FacetSelection\n  chartSelectionIndex: number\n  asyncJobStatus?: AsynchronousJobStatus\n  facetAliases?: {}\n  loadNowStarted: boolean\n  initQueryRequest: QueryBundleRequest\n}\n\nexport type FacetSelection = {\n  columnName: string\n  facetValue: string\n  selector: string\n}\n\n// Since the component is an HOC we export the props passed down\nexport type QueryWrapperChildProps = {\n  isAllFilterSelectedForFacet?: {}\n  isLoading?: boolean\n  token?: string\n  isLoadingNewData?: boolean\n  executeQueryRequest?: (param: QueryBundleRequest) => Promise<undefined>\n  executeInitialQueryRequest?: () => void\n  getNextPageOfData?: (queryRequest: QueryBundleRequest) => void\n  getLastQueryRequest?: () => QueryBundleRequest\n  getInitQueryRequest?: () => QueryBundleRequest\n  data?: QueryResultBundle\n  facet?: string\n  updateParentState?: (param: any) => void\n  rgbIndex?: number\n  unitDescription?: string\n  facetAliases?: {}\n  lastFacetSelection?: FacetSelection\n  chartSelectionIndex?: number\n  asyncJobStatus?: AsynchronousJobStatus\n  showBarChart?: boolean\n  hasMoreData?: boolean\n}\n\n/**\n * Class wraps around any Synapse views that are dependent on a query bundle\n * Those classes then take in as props:\n *\n * @class QueryWrapper\n * @extends {React.Component}\n */\nexport default class QueryWrapper extends React.Component<QueryWrapperProps, QueryWrapperState> {\n\n  public static defaultProps = {\n    token: ''\n  }\n\n  public static initialState = {\n    data: undefined,\n    isLoading: true,\n    isLoadingNewData: true,\n    lastQueryRequest: {} as QueryBundleRequest,\n    hasMoreData: true,\n    lastFacetSelection: {\n      columnName: '',\n      facetValue: '',\n      selector: ''\n    },\n    chartSelectionIndex: 0,\n    isAllFilterSelectedForFacet: {},\n    loadNowStarted: false,\n  } as QueryWrapperState\n  \n  constructor(props: QueryWrapperProps) {\n    super(props)\n    this.executeInitialQueryRequest = this.executeInitialQueryRequest.bind(this)\n    this.executeQueryRequest = this.executeQueryRequest.bind(this)\n    this.getLastQueryRequest = this.getLastQueryRequest.bind(this)\n    this.getNextPageOfData = this.getNextPageOfData.bind(this)\n    this.updateParentState = this.updateParentState.bind(this)\n    this.getInitQueryRequest = this.getInitQueryRequest.bind(this)\n    this.state = QueryWrapper.initialState\n  }\n\n  /**\n   * Compute default query request\n   *\n   * @memberof QueryWrapper\n   */\n  public componentDidMount() {\n    const { loadNow = true } = this.props\n    if (loadNow) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * @memberof QueryWrapper\n   */\n  public componentDidUpdate(prevProps: any) {\n    /**\n     *  If component updates and the token has changed (they signed in) then the data should be pulled in. Or if the\n     *  sql query has changed of the component then perform an update.\n     */\n\n    const { loadNow = true } = this.props\n    if (loadNow && !this.state.loadNowStarted) {\n      this.executeInitialQueryRequest()\n    } else if (this.props.token !== '' && prevProps.token === '') {\n      this.executeInitialQueryRequest()\n    } else if (prevProps.initQueryRequest.query.sql !== this.props.initQueryRequest!.query.sql) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getLastQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.state.lastQueryRequest)\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * first query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getInitQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.props.initQueryRequest)\n  }\n\n  /**\n   * Execute the given query\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeQueryRequest(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true\n    })\n    return SynapseClient.getQueryTableResults(\n      queryRequest,\n      this.props.token,\n      this.updateParentState\n    )\n    .then(\n      (data: QueryResultBundle) => {\n        const hasMoreData = data.queryResult.queryResults.rows.length === SynapseConstants.PAGE_SIZE\n        const newState: any = {\n          hasMoreData,\n          data,\n          isLoading: false,\n          lastQueryRequest: cloneDeep(queryRequest),\n          asyncJobStatus: undefined\n        }\n        this.setState(newState)\n        return Promise.resolve(() => {})\n      }\n    ).catch((err: string) => {\n      console.log('Failed to get data ', err)\n      return Promise.resolve(() => {})\n    })\n  }\n\n  /**\n   * Grab the next page of data, pulling in 25 more rows.\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public async getNextPageOfData(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true\n    })\n\n    await getNextPageOfData(queryRequest, this.state.data!, this.props.token)\n    .then(\n      (newState) => {\n        this.setState({\n          ...newState,\n          isLoading: false,\n          lastQueryRequest: cloneDeep(queryRequest)\n        })\n      }\n    )\n  }\n\n  /**\n   * Execute the initial query passed into the component\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeInitialQueryRequest() {\n    this.setState({\n      isLoading: true,\n      isLoadingNewData: true,\n      chartSelectionIndex: 0,\n      loadNowStarted: true\n    })\n    SynapseClient\n      .getQueryTableResults(this.props.initQueryRequest, this.props.token, this.updateParentState)\n      .then(\n        (data: QueryResultBundle) => {\n          const lastQueryRequest: QueryBundleRequest = cloneDeep(this.props.initQueryRequest!)\n          const hasMoreData = data.queryResult.queryResults.rows.length === SynapseConstants.PAGE_SIZE\n          const isAllFilterSelectedForFacet = cloneDeep(this.state.isAllFilterSelectedForFacet)\n          let { chartSelectionIndex } = this.state\n          if (this.props.facet) {\n            if (!data.facets) {\n              throw Error('Error on query request, must include facets in partmask to show facets')\n            }\n            data.facets.forEach((el: FacetColumnResultValues) => {\n              if (el.facetType === 'enumeration') {\n                // isAll is only true iff there are no facets selected or all elements are selected\n                const { facetValues } = el\n                const isAllFalse = facetValues.every(facet => !facet.isSelected)\n                const isAllTrue =  facetValues.every(facet => facet.isSelected)\n                const isByDefaultSelected = isAllFalse || isAllTrue\n                isAllFilterSelectedForFacet[el.columnName] = isByDefaultSelected\n                if (el.columnName === this.props.facet && !isAllFalse) {\n                  // Note - this picks the first selected facet\n                  chartSelectionIndex = facetValues.sort((a, b) => b.count - a.count).findIndex(facet => facet.isSelected)\n                }\n              }\n            })\n          }\n          const newState = {\n            isAllFilterSelectedForFacet,\n            hasMoreData,\n            data,\n            chartSelectionIndex,\n            lastQueryRequest,\n            isLoading: false,\n            isLoadingNewData: false,\n            asyncJobStatus: undefined\n          }\n          this.setState(newState)\n        }\n      ).catch((err) => {\n        console.log('Failed to get data ', err)\n      })\n  }\n\n  public updateParentState (update: QueryWrapperState) {\n    this.setState(update)\n  }\n\n  /**\n   * Render the children without any formatting\n   */\n  public render() {\n    const { isLoading } = this.state\n    const { facetAliases = {} } = this.props\n    // inject props in children of this component\n    const childrenWithProps = (React.Children.map(this.props.children, (child: any) => {\n      return React.cloneElement(child, {\n        facetAliases,\n        isAllFilterSelectedForFacet: this.state.isAllFilterSelectedForFacet,\n        data: this.state.data,\n        token: this.props.token,\n        executeInitialQueryRequest: this.executeInitialQueryRequest,\n        executeQueryRequest: this.executeQueryRequest,\n        getLastQueryRequest: this.getLastQueryRequest,\n        getNextPageOfData: this.getNextPageOfData,\n        isLoading: this.state.isLoading,\n        isLoadingNewData: this.state.isLoadingNewData,\n        facet: this.props.facet,\n        rgbIndex: this.props.rgbIndex,\n        unitDescription: this.props.unitDescription,\n        updateParentState: this.updateParentState,\n        isQueryWrapperChild: true,\n        hasMoreData: this.state.hasMoreData,\n        lastFacetSelection: this.state.lastFacetSelection,\n        chartSelectionIndex: this.state.chartSelectionIndex,\n        getInitQueryRequest: this.getInitQueryRequest,\n        asyncJobStatus: this.state.asyncJobStatus,\n        showBarChart: this.props.showBarChart\n      })\n    }))\n\n    const loadingCusrorClass = isLoading ? 'SRC-logo-cursor' : ''\n    if (this.props.showMenu) {\n      // menu is to the left of the child components so we let that add its\n      // own html\n      return (\n        <div className={`${loadingCusrorClass}`}>\n          {childrenWithProps}\n        </div>\n      )\n    }\n    return (\n      <div className={`${loadingCusrorClass}`}>\n        {childrenWithProps}\n      </div>\n    )\n  }\n}\n","import { library } from '@fortawesome/fontawesome-svg-core'\nimport { faAngleLeft, faAngleRight } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport * as React from 'react'\nimport ReactMeasure from \"react-measure\"\nimport ReactTooltip from \"react-tooltip\"\nimport { getColorPallette } from './ColorGradient'\nimport { QueryWrapperChildProps } from './QueryWrapper'\nimport { FacetColumnResultValueCount } from '../utils/jsonResponses/Table/FacetColumnResult'\nimport { getIsValueSelected } from '../utils/modules/facetUtils'\nlibrary.add(faAngleLeft)\nlibrary.add(faAngleRight)\n\nexport const PREVIOUS_ITEM_CLICK = 'left click'\nexport const NEXT_CLICK = 'right click'\n\ntype Rect = {\n  height: number\n  width: number\n  top: number\n  left: number\n  right: number\n  bottom: number\n}\n\ntype MeasureRect = {\n  bounds: Rect\n}\n\nexport type StackedBarChartState = {\n  selectedFacets: {}\n  dimensions: MeasureRect\n}\n\nexport type StackedBarChartProps = {\n  loadingScreen: JSX.Element\n  link?: string\n  linkText?: string\n}\n\ntype Info = {\n  value: string\n  count: number\n  index: number\n}\n\ntype InternalProps = StackedBarChartProps & QueryWrapperChildProps\n/**\n * Make a simple stacked bar chart\n *\n * @class StackedBarChart\n * @extends {React.Component}\n */\nexport default class StackedBarChart extends\n    React.Component<InternalProps, StackedBarChartState> {\n\n  constructor(props: InternalProps) {\n    super(props)\n    this.handleHover = this.handleHover.bind(this)\n    this.handleExit = this.handleExit.bind(this)\n    this.handleClick = this.handleClick.bind(this)\n    this.handleArrowClick = this.handleArrowClick.bind(this)\n    this.getTextForChartSelection = this.getTextForChartSelection.bind(this)\n    this.onMeasureResize = this.onMeasureResize.bind(this)\n    this.rgba2rgb = this.rgba2rgb.bind(this)\n    // the text currently under the cursor\n    this.state = {\n      // the dimensions of the bar chart itself\n      dimensions: { bounds: { height: 1, width: 1, top: 0, left: 0, right: 0, bottom: 0 } },\n      // the text of the current slice\n      // the count of this facet value occurence\n      selectedFacets: {}\n    }\n    this.extractPropsData = this.extractPropsData.bind(this)\n  }\n\n  /**\n   * Updates the hover text and update the view\n   *\n   * @memberof StackedBarChart\n   */\n  public handleHover(event: React.MouseEvent<SVGRectElement>) {\n    // add box shadow\n    event.currentTarget.style.boxShadow = '25px 20px'\n  }\n\n  /**\n   * Update the hover text and the view\n   *\n   * @param {*} event\n   * @memberof StackedBarChart\n   */\n  public handleExit(event: React.MouseEvent<SVGRectElement>) {\n    // remove box shadow\n    event.currentTarget.style.boxShadow = ''\n  }\n\n  /**\n   * Handle column click event\n   */\n  public handleClick = (dict: Info) => (_event: React.MouseEvent<SVGElement>) => {\n    // https://medium.freecodecamp.org/reactjs-pass-parameters-to-event-handlers-ca1f5c422b9\n    this.props.updateParentState!({ chartSelectionIndex: dict.index })\n  }\n\n  public handleArrowClick = (direction: string) => (_event: React.MouseEvent) => {\n    let { chartSelectionIndex = 0 } = this.props\n    let dict: any = this.extractPropsData(this.props.data)\n    const length = Object.keys(dict).length\n    if (direction === PREVIOUS_ITEM_CLICK) {\n      chartSelectionIndex -= 1\n      // if its at zero then we want to wrap around to the end\n      chartSelectionIndex = chartSelectionIndex < 0 ? length - 1 : chartSelectionIndex\n    } else {\n      chartSelectionIndex += 1\n    }\n    chartSelectionIndex = chartSelectionIndex % length\n\n    dict = dict[chartSelectionIndex]\n    this.props.updateParentState!({ chartSelectionIndex })\n    // return is only for testing purposes\n    return chartSelectionIndex\n  }\n\n  public getTextForChartSelection(xData: any) {\n    const { chartSelectionIndex = 0 } = this.props\n    const { facetAliases = {}, facet } = this.props\n    const facetValueDisplay = xData[chartSelectionIndex] && xData[chartSelectionIndex].value\n    const filterDisplay = facetAliases[facet!] || facet\n    return (\n      <span>\n        <span className=\"SRC-text-title SRC-filter-display\">\n          {filterDisplay}\n        </span> :\n        <span className=\"SRC-facet-view SRC-text-title\">\n          {' '}\n          {facetValueDisplay === 'org.sagebionetworks.UNDEFINED_NULL_NOTSET' ? 'unannotated' : facetValueDisplay}\n        </span>\n      </span>\n    )\n  }\n\n  public getFileCount(xData: any) {\n    const { chartSelectionIndex = 1 } = this.props\n    return xData[chartSelectionIndex] && xData[chartSelectionIndex].count\n  }\n\n  public rgba2rgb(background: number[], color: number[]) {\n    const alpha = color[3]\n    return [\n      Math.floor((1 - alpha) * background[0] + alpha * color[0] + 0.5),\n      Math.floor((1 - alpha) * background[1] + alpha * color[1] + 0.5),\n      Math.floor((1 - alpha) * background[2] + alpha * color[2] + 0.5)\n    ]\n  }\n\n  public render() {\n    const {\n      data,\n      isLoadingNewData,\n      loadingScreen,\n      rgbIndex,\n      facet = '',\n      unitDescription,\n      isLoading,\n      lastFacetSelection,\n      isAllFilterSelectedForFacet,\n      chartSelectionIndex,\n      asyncJobStatus\n    } = this.props\n    // while loading\n    if (isLoadingNewData) {\n      return (\n        <div className=\"SRC-loadingContainer SRC-centerContentColumn\">\n          {/*\n            check loading screen is not undefined or null and show\n            it if so\n          */}\n          {!!loadingScreen && loadingScreen}\n          <div>\n            {asyncJobStatus && asyncJobStatus.progressMessage}\n          </div>\n        </div>\n      )\n    }\n    const xData = this.extractPropsData(data)\n    let total: number = 0\n    const width: number = this.state.dimensions.bounds!.width\n    // sum up the counts of data\n    for (const key in xData) {\n      if (xData.hasOwnProperty(key)) {\n        total += xData[key].count\n      }\n    }\n    const { colorPalette, textColors } = getColorPallette(rgbIndex!, xData.length)\n    const originalColor = colorPalette[0]\n\n    return (\n      <React.Fragment>\n        {/* TODO: Refactor the chart into its own component */}\n        <div className=\"SRC-bar-border SRC-bar-marginTop SRC-bar-border-top\">\n          <ReactMeasure\n            bounds={true}\n            onResize={(contentRect: any) => {\n              this.setState({ dimensions: contentRect })\n            }}\n          >\n            {({ measureRef }) => (\n              <div className=\"SRC-flex\" ref={measureRef}>\n                {xData.map((obj: FacetColumnResultValueCount, index) => {\n                  const textColor: string = textColors[index]\n                  const rgbColor: string = colorPalette[index]\n                  let rectStyle: any\n                  const isValueSelected = isAllFilterSelectedForFacet![facet] ? true : getIsValueSelected({\n                    isLoading,\n                    lastFacetSelection,\n                    columnName: facet,\n                    curFacetSelection: obj\n                  })\n                  if (isValueSelected) {\n                    rectStyle = {\n                      fill: rgbColor\n                    }\n                  } else {\n                    rectStyle = {\n                      fill: '#C4C4C4'\n                    }\n                  }\n                  const svgHeight = 80\n                  const svgWidth = obj.count / total * width\n                  const style: any = {}\n                  if (chartSelectionIndex === index) {\n                    style.filter = 'drop-shadow(5px 5px 5px rgba(0,0,0,0.5))'\n                  }\n                  const label: string = `${facet}: ${obj.value}  - ${obj.count} ${unitDescription}`\n                  // there was one bug where a new line character was in the obj.value, making data-for\n                  // break because its a special character, below we remove that\n                  const tooltipId = obj.value.replace(/(\\r\\n|\\n|\\r)/gm, '')\n                  // basic heuristic to calculate the number of pixels needed to show the value on the bar chart\n                  const value = obj.count as number\n                  const numCharsInValue = value.toString().length * 4.5 // represents width of a character\n\n                  return (\n                    // each svg represents one of the bars\n                    // will need to change this to be responsive\n                    <React.Fragment key={label}>\n                      <span data-for={tooltipId} data-tip={label}>\n                        <svg\n                          className=\"SRC-hoverBox\"\n                          height={svgHeight + 15}\n                          width={svgWidth}\n                          style={style}\n                          onClick={this.handleClick({ ...obj, index })}\n                        >\n                          <rect\n                            onMouseEnter={this.handleHover}\n                            onMouseLeave={this.handleExit}\n                            height={svgHeight}\n                            width={svgWidth}\n                            className=\"SRC-chart-rect-style\"\n                            // can't remove inline style due to dynamic fill\n                            style={rectStyle}\n                          />\n                          {index < 3 && svgWidth > numCharsInValue &&\n                            <text\n                              textAnchor=\"middle\"\n                              className=\"SRC-text-title\"\n                              fontFamily={'bold sans-serif'}\n                              fill={textColor}\n                              x={'50%'}\n                              y={'50%'}\n                            >\n                              {obj.count}\n                            </text>}\n                          {\n                            (chartSelectionIndex === index) &&\n                              (\n                                <text\n                                  fill={originalColor}\n                                  x={0}\n                                  y={svgHeight + 15}\n                                  className=\"SRC-text-shadow SRC-text-large\"\n                                >\n                                  {'\\u25CF'}\n                                </text>\n                              )\n                          }\n                        </svg>\n                      </span>\n                      <ReactTooltip delayShow={1000} id={tooltipId} />\n                    </React.Fragment>)\n                })}\n              </div>)}\n          </ReactMeasure>\n        </div>\n        <div className=\"SRC-bar-border SRC-bar-border-bottom\">\n          <p className=\"SRC-noMargin SRC-padding-chart SRC-text-title\">\n            <strong>{this.getTextForChartSelection(xData)}</strong>\n          </p>\n          <p id=\"fileCount\" className=\"SRC-noMargin SRC-padding-chart SRC-text-chart\">\n            {this.getFileCount(xData)} {unitDescription}\n          </p>\n          {\n            this.props.link &&\n              <div className=\"SRC-chart-link\">\n                <a href={`#/${this.props.link}`}> {this.props.linkText} </a>\n              </div>\n          }\n        </div>\n        <div className=\"SRC-chart SRC-chart-nav SRC-center-text\">\n          <button\n            className=\"SRC-chart-btn btn btn-default btn-sm SRC-floatRight\"\n            onClick={this.handleArrowClick(NEXT_CLICK)}\n          >\n            <FontAwesomeIcon\n              style={{ fontSize: '11px' }}\n              className=\"SRC-primary-text-color\"\n              icon=\"angle-right\"\n            />\n          </button>\n          <button\n            className=\"SRC-chart-btn btn btn-default btn-sm SRC-floatRight\"\n            onClick={this.handleArrowClick(PREVIOUS_ITEM_CLICK)}\n          >\n            <FontAwesomeIcon\n              style={{ fontSize: '11px' }}\n              className=\"SRC-primary-text-color\"\n              icon=\"angle-left\"\n            />\n          </button>\n        </div>\n      </React.Fragment>\n    )\n  }\n  public extractPropsData(data: any) {\n    const xData: any[] = []\n    const { facet } = this.props\n    // pull out the data corresponding to the filter in question\n    data.facets.forEach(\n      (item: any) => {\n        if (item.facetType === 'enumeration' && item.columnName === facet) {\n          item.facetValues.forEach(\n            (facetValue: any) => {\n              if (item.columnName) {\n                xData.push({ columnName: item.columnName, ...facetValue })\n              }\n            }\n          )\n        }\n      }\n    )\n    // sort the data so that the largest bars are at the front\n    xData.sort((a, b) => {\n      return b.count - a.count\n    })\n    return xData\n  }\n\n  public onMeasureResize(contentRect: any) {\n    this.setState({ dimensions: contentRect })\n  }\n}\n","const sufixes: string [] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\n\nexport default function calculateFriendlyFileSize(bytes: number) {\n  if (!bytes) {\n    return ''\n  }\n    // https://stackoverflow.com/questions/10420352/converting-file-size-in-bytes-to-human-readable-string\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  // tslint:disable-next-line\n  return (!bytes && '0 Bytes') || (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sufixes[i]\n}\n","import * as React from 'react'\nimport { DATASET } from '../../utils/SynapseConstants'\nimport calculateFriendlyFileSize from '../calculateFriendlyFileSize'\nimport * as Utils from './utils'\n\ntype DatasetProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?:number\n}\n\nclass Dataset extends React.Component<DatasetProps, {}> {\n\n  constructor(props: DatasetProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n\n  public handleLinkClick = (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    window.open(`https://www.synapse.org/#!Synapse:${link}`, '_blank')\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const datasetName = data[schema.datasetName]\n    const summary = data[schema.summary]\n    const tumorType = data[schema.tumorType]\n    const diseaseFocus = data[schema.diseaseFocus]\n    const id = data[schema.id]\n    const fundingAgency = data[schema.fundingAgency]\n    const fileCount = data[schema.fileCount]\n    const fileSize = calculateFriendlyFileSize(data[schema.fileSize])\n    const values = [['FUNDER', fundingAgency], ['SIZE', fileSize], ['FILES', fileCount]]\n    return (\n      <div className=\"SRC-portalCard SRC-typeDataset  \">\n        <div className=\"SRC-cardThumbnail\">\n          <Utils.Icon type={DATASET} />\n          <div>{fileSize}</div>\n        </div>\n        <div className=\"SRC-cardContent SRC-dataset\">\n          <div className=\"SRC-type\">Dataset </div>\n          <div>\n            <h3>\n              <a target=\"_self\" href={`https://www.synapse.org/#!Synapse:${id}`}>\n                {datasetName}\n              </a>\n            </h3>\n          </div>\n          <div className=\"SRC-description-dataset\">\n            <p className=\"SRC-description-text\">\n              {summary}\n            </p>\n            <div className=\"SRC-cardAction\">\n              <button className=\"SRC-datasetButton\" onClick={this.handleLinkClick(id)} type=\"button\">\n                Download Dataset\n              </button>\n            </div>\n          </div>\n          <div className=\"SRC-cardAnnotations\">\n            <Utils.ChipContainer chips={[tumorType, diseaseFocus]} />\n          </div>\n        </div>\n        <Utils.CardFooter isHeader={false} secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\nexport default Dataset\n","import * as React from 'react'\n\nimport ctfSvg from '../../assets/logos/ctf.svg'\nimport dhartSvg from '../../assets/logos/dhart.svg'\nimport ntapSvg from  '../../assets/logos/ntap.svg'\n\nconst logoLinks = {\n  CTF: ctfSvg,\n  'DHART SPORE':dhartSvg,\n  NTAP: ntapSvg\n}\n\ntype FunderProps = {\n  data?: any\n  schema?: any\n}\n\nexport default class Funder extends React.Component<FunderProps, {}> {\n  constructor(props: FunderProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n  public handleLinkClick = (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    window.open(link, '_blank')\n  }\n  public render() {\n    const { data, schema } = this.props\n    const organizationName = data[schema.organizationName]\n    const organizationPath = data[schema.organizationPath]\n    const summary = data[schema.summary]\n    const website = data[schema.website]\n    const abbreviation = data[schema.abbreviation]\n    const logo = logoLinks[abbreviation]\n    const orgPath = `${window.location.origin}/#${organizationPath}`\n    // remove leading http(s):// and trailing /\n    let websiteDisplayName = website.replace('https://', '')\n    websiteDisplayName = websiteDisplayName.replace('http://', '')\n    if (websiteDisplayName.charAt(websiteDisplayName.length - 1) === '/') {\n      websiteDisplayName = websiteDisplayName.substring(0, websiteDisplayName.length - 1)\n    }\n    const isOnOrgPath = window.location.hash.substring(1) === organizationPath\n    const style: any = {}\n    let showOrgLink\n    if (!isOnOrgPath) {\n      showOrgLink = (\n        <div className=\"SRC-marginAuto SRC-cardAction\">\n          <button onClick={this.handleLinkClick(orgPath)} type=\"button\">\n            View Funded Research\n          </button>\n        </div>\n        )\n    } else {\n      style.paddingBottom = '42px'\n    }\n    return (\n        <div className=\"SRC-portalCard SRC-typeFunder \" style={style}>\n            <div className=\"SRC-cardContent\">\n                <div className=\"SRC-type\">Organization</div>\n                <div className=\"SRC-cardThumbnail\">\n                    <img alt=\"funder logo\" className=\"SRC-logo\" src={logo} />\n                </div>\n                <div >\n                    <h3>\n                        {isOnOrgPath && organizationName}\n                        {!isOnOrgPath && <a href={orgPath}>{organizationName}</a>}\n                    </h3>\n                </div>\n                <div className=\"SRC-website\">\n                    <a rel=\"noopener noreferrer\" target=\"_blank\" href={website}>\n                        {websiteDisplayName}\n                    </a>\n                </div>\n                <div className=\"SRC-description\">{summary}</div>\n            </div>\n            {showOrgLink}\n        </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { PUBLICATION } from '../../utils/SynapseConstants'\nimport * as Utils from './utils'\n\ntype PublicationProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?:number\n}\n\nclass Publication extends React.Component<PublicationProps, {}> {\n\n  constructor(props: PublicationProps) {\n    super(props)\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const citation = data[schema.citation]\n    const tumorType = data[schema.tumorType]\n    const diseaseFocus = data[schema.diseaseFocus]\n    const doi = data[schema.doi]\n    const fundingAgency = data[schema.fundingAgency]\n    const projectName = data[schema.projectName]\n    const values = [['DOI', doi], ['FUNDER', fundingAgency], ['STUDY', projectName]]\n    return (\n      <div className=\"SRC-portalCard SRC-typePublication  \">\n          <div className=\"SRC-cardThumbnail\">\n              <Utils.Icon type={PUBLICATION} />\n          </div>\n          <div className=\"SRC-cardContent\">\n              <div className=\"SRC-type\">Publication</div>\n              <div >\n                  <h3>\n                      <a target=\"_blank\" rel=\"noopener noreferrer\" href={`https://dx.doi.org/${doi}`}>\n                          {citation}\n                      </a>\n                  </h3>\n              </div>\n              <div className=\"SRC-cardAnnotations\">\n                  <Utils.ChipContainer chips={[tumorType, diseaseFocus]} />\n              </div>\n          </div>\n          <Utils.CardFooter isHeader={false} secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\nexport default Publication\n","import * as React from 'react'\nimport { STUDY_ACTIVE, STUDY_COMPLETE } from '../../utils/SynapseConstants'\nimport * as Utils from './utils/index'\n\ntype StudyState = {\n  showMore: boolean\n  hasCreatedIndex: boolean\n}\n\ntype StudyProps = {\n  data?: any\n  schema?: any\n  secondaryLabelLimit?:number\n}\n\nexport default class Study extends React.Component<StudyProps, StudyState> {\n\n  constructor(props: StudyProps) {\n    super(props)\n    this.state = {\n      hasCreatedIndex: false,\n      showMore: false\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  public handleClick(_event: React.SyntheticEvent) {\n    this.setState({\n      showMore: !this.state.showMore\n    })\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const projectName: string = data[schema.projectName]\n    const projectLeads: string = data[schema.projectLeads] && data[schema.projectLeads].split(';').join(' / ')\n    const summary: string = data[schema.summary]\n    const diseaseFocus: string = data[schema.diseaseFocus]\n    const tumorType: string = data[schema.tumorType]\n    const projectStatus: string = data[schema.projectStatus]\n    const fundingAgency: string = data[schema.fundingAgency]\n    const dataStatus: string = data[schema.dataStatus]\n    const id: string = data[schema.id]\n    const link: string = `https://www.synapse.org/#!Synapse:${id}`\n    const values: string [][] = [\n      ['STATUS', projectStatus],\n      ['FUNDER', fundingAgency],\n      ['DATA', dataStatus]\n    ]\n    const chips: string [] = [tumorType, diseaseFocus]\n    return (\n      <div className=\"SRC-portalCard SRC-typeStudy  \">\n          <div className=\"SRC-cardThumbnail\">\n              <Utils.Icon type={projectStatus === 'Active' ? STUDY_ACTIVE : STUDY_COMPLETE}/>\n              <div>{projectStatus}</div>\n          </div>\n          <div className=\"SRC-cardContent\">\n              <div className=\"SRC-type\">Study</div>\n              <div >\n                  {' '}\n                  <h3>\n                      {' '}\n                      <a target=\"_self\" href={link}>\n                          {projectName}\n                      </a>{' '}\n                  </h3>{' '}\n              </div>\n              <div className=\"SRC-author\">{projectLeads}</div>\n              <span className=\"SRC-font-size-base\">\n                  <Utils.ShowMore summary={summary} />\n              </span>\n              <div className=\"SRC-cardAnnotations\">\n                  <Utils.ChipContainer chips={chips} />\n              </div>\n          </div>\n          <Utils.CardFooter isHeader={false} secondaryLabelLimit={this.props.secondaryLabelLimit} values={values} />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { TOOL } from '../../utils/SynapseConstants'\nimport * as Utils from './utils'\n\ntype ToolProps = {\n  data?: any\n  schema?: any\n}\n\nexport default class Tool extends React.Component<ToolProps, {}> {\n\n  constructor(props: ToolProps) {\n    super(props)\n    this.handleLinkClick = this.handleLinkClick.bind(this)\n  }\n\n  public handleLinkClick = (link: string) => (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault()\n    window.open(link, '_blank')\n  }\n\n  public render() {\n    const { data, schema } = this.props\n    const softwareName = data[schema.softwareName]\n    const summary = data[schema.summary]\n    const softwareLink = data[schema.softwareLink]\n    return (\n            <div className=\"SRC-portalCard SRC-typeTool  \">\n                <div className=\"SRC-cardThumbnail\">\n                    <Utils.Icon type={TOOL} />\n                </div>\n                <div className=\"SRC-cardContent\">\n                    <div className=\"SRC-type\">Tool</div>\n                    <div >\n                        <h3>\n                            <a href={softwareLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                                {softwareName}\n                            </a>\n                        </h3>\n                    </div>\n                    <div className=\"SRC-description\">{summary}</div>\n                </div>\n                <div className=\"SRC-cardAction\">\n                    <button onClick={this.handleLinkClick(softwareLink)} type=\"button\">\n                        Open Tool\n                    </button>\n                </div>\n            </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport ampIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/amp-icon-header.svg'\nimport ampIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/amp-icon.svg'\nimport moveIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/move-icon-header.svg'\nimport moveIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/move-icon.svg'\nimport ModelADIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/ModelAD-icon-header.svg'\nimport ModelADIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/ModelAD-icon.svg'\nimport resilienceIconHeaderSvg from '../../../assets/icons/AMP_AD/consortia-icons/resilience-icon-header.svg'\nimport resilienceIconSvg from '../../../assets/icons/AMP_AD/consortia-icons/resilience-icon.svg'\n\ntype ConsortiumProps = {\n  isHeader?: boolean\n  data?: any\n  schema?: any\n  secondaryLabelLimit?: number\n}\n\nexport default class Consortium extends React.Component<ConsortiumProps, {}> {\n\n  constructor(props: ConsortiumProps) {\n    super(props)\n    this.getIcon = this.getIcon.bind(this)\n  }\n\n  public getIcon(org: string, isHeader: boolean) {\n    // This CAN NOT be refactored below -- dynamic imports are currently not supported\n    // in es6, so the code below already has static references to the files below\n    // even though its baked into if else clauses.\n    const ampIconDescription = \"amp-ad icon\"\n    const moveIconDescription = \"M2OVE icon\"\n    const modelIconDescription = \"Model icon\"\n    const resillienceIconDescription = \"Resillience icon\"\n    switch (org) {\n      case 'AMP-AD':\n        if (isHeader) {\n          return <img alt={ampIconDescription} src={ampIconHeaderSvg}/>\n        }\n        return <img alt={ampIconDescription} src={ampIconSvg}/>\n      case 'M2OVE-AD':\n        if (isHeader) {\n          return <img alt={moveIconDescription} src={moveIconHeaderSvg}/>\n        }\n        return <img alt={moveIconDescription} src={moveIconSvg}/>\n      case 'MODEL-AD':\n        if  (isHeader) {\n          return <img alt={modelIconDescription} src={ModelADIconHeaderSvg}/>\n        }\n        return <img alt={modelIconDescription} src={ModelADIconSvg}/>\n      case 'Resilience-AD':\n        if (isHeader) {\n          return <img alt={resillienceIconDescription} src={resilienceIconHeaderSvg}/>\n        }\n        return <img alt={resillienceIconDescription} src={resilienceIconSvg}/>\n      default:\n        return (false)\n    }\n  }\n\n  public render() {\n    const { data, schema } = this.props\n\n    const description = data[schema['Short Description']]\n    const name = data[schema['Full Name']]\n    const org = data[schema.Program]\n\n    const path = data[schema.Path]\n    const orgPath = `${window.location.origin}/#${path}`\n\n    const isOnOrgPath = window.location.hash.substring(1) === path\n\n    return (\n      <div\n          style={{ paddingBottom: '32px' }}\n          className=\"SRC-portalCard SRC-typeStudy  \"\n      >\n        <div className=\"SRC-cardThumbnail\">\n          {this.getIcon(org, isOnOrgPath)}\n        </div>\n        <div className=\"SRC-cardContent\">\n          <div className=\"SRC-type\">Program</div>\n          <div >\n            <h3>\n                {!isOnOrgPath && <a target=\"_blank\" rel=\"noopener noreferrer\" href={orgPath}> {name} </a>}\n                {isOnOrgPath && name}\n            </h3>\n          </div>\n          <span className=\"SRC-font-size-base\">\n              {description}\n          </span>\n        </div>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport UserCard, { UserCardSize } from './UserCard'\nimport { MEDIUM_USER_CARD } from '../utils/SynapseConstants'\nimport { getUserProfileWithProfilePicAttached } from './getUserData'\nimport { UserProfileList } from '../utils/SynapseClient'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\n\nexport type UserCardListProps = {\n  list: string []\n  size?: UserCardSize\n  // Data should not be needed, however, it gives the option to fill in a user profile with other column\n  // fields. This is required specifically by AMP-AD Explore/People page\n  data?: QueryResultBundle\n}\n\ntype MapOwnerIdToUserProfile = {\n  [index: number]: UserProfile\n}\nexport type UserCardListState = {\n  userProfileMap: MapOwnerIdToUserProfile\n}\nexport default class UserCardList extends React.Component<UserCardListProps, UserCardListState> {\n\n  constructor(props: UserCardListProps) {\n    super(props)\n    this.state = {\n      userProfileMap: {}\n    }\n    this.update = this.update.bind(this)\n  }\n\n  componentDidMount() {\n    const { list } = this.props\n    this.update(list)\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#Implementing_basic_set_operations\n  difference(setA: Set<String>, setB: Set<String>) {\n    const _difference = new Set(setA)\n    for (const elem of Array.from(setB)) {\n      _difference.delete(elem)\n    }\n    return _difference\n  }\n\n  componentDidUpdate(prevProps: UserCardListProps) {\n    // Note - Set object not fully supported by IE11, additionally there are a few caveats to using the Set object\n    // described here https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\n    // the use below with primitives is well defined.\n    const priorListOfIds = new Set(prevProps.list)\n    const curListOfIds = new Set(this.props.list.filter(el => el))\n    // check that the props have changed by seeing that at least one element is different\n    if (this.difference(curListOfIds, priorListOfIds).size > 0) {\n      const internalData = new Set(Object.keys(this.state.userProfileMap))\n      // get the set difference between the current list and whats stored in state, describes what\n      // needs to get looked up.\n      const difference = Array.from(this.difference(curListOfIds, internalData)) as string []\n      if (difference.length > 0) {\n        this.update(difference)\n      }\n    }\n  }\n\n  update (list: string []) {\n    getUserProfileWithProfilePicAttached(list.filter(el => el)).then(\n      (data: UserProfileList) => {\n        const newEntries = {}\n        data.list.forEach(\n          (el) => {\n            const { ownerId } = el\n            newEntries[ownerId] = el\n          }\n        )\n        this.setState({\n          userProfileMap: { ...this.state.userProfileMap, ...newEntries }\n        })\n      }\n    ).catch(\n      (err: string) => {\n        console.log('Error on batch call =', err)\n      }\n    )\n  }\n\n  /**\n   * Given data this will find rows where there is no userId columnType and create faux user profiles\n   * using firstName, lastName, and instituion (company in UserProfile object).\n   * @param {QueryResultBundle} data\n   * @returns list of UserProfiles with firstName, lastName, company, userName (first letter of firstName) filled out.\n   * @memberof UserCardList\n   */\n  manuallyExtractData(data: QueryResultBundle) {\n    const firstNameIndex = data.queryResult.queryResults.headers.findIndex(el => el.name === 'firstName')\n    const lastNameIndex = data.queryResult.queryResults.headers.findIndex(el => el.name === 'lastName')\n    const institutionIndex = data.queryResult.queryResults.headers.findIndex(el => el.name === 'institution')\n    const ownerId = data.queryResult.queryResults.headers.findIndex(el => el.columnType === 'USERID')\n    const nullOwnerIdsRows = data.queryResult.queryResults.rows.filter(el => !el.values[ownerId])\n    return nullOwnerIdsRows.map<UserProfile>(\n      (el) => {\n        const values = el.values\n        return {\n          firstName: values[firstNameIndex],\n          lastName: values[lastNameIndex],\n          company: values[institutionIndex],\n          ownerId: '',\n          userName: values[firstNameIndex][0]\n        }\n      }\n    )\n  }\n\n  render() {\n    const { size = MEDIUM_USER_CARD, data, list } = this.props\n    const { userProfileMap = {} } = this.state\n    const fauxUserProfilesList = data && this.manuallyExtractData(data)\n    let fauxUserProfileIndex = 0\n    return (\n      <div className=\"SRC-card-grid-row SRC-adjust-for-bootstrap-margin\">\n        {\n          // we loop through the list from the props because thats the 'active set of data' whereas the data stored in state could be stale\n          list.map(\n            (ownerId) => {\n              const userProfile = userProfileMap[ownerId]\n              if (userProfile) {\n                return (\n                  <div key={JSON.stringify(userProfile)} className=\"SRC-grid-item SRC-narrow-grid-item\">\n                    <UserCard size={size} preSignedURL={userProfile.clientPreSignedURL} userProfile={userProfile}/>\n                  </div>\n                )\n              }\n              const fauxUserProfile = fauxUserProfilesList && fauxUserProfilesList[fauxUserProfileIndex]\n              if (!fauxUserProfile) {\n                // This could happen in one of two cases:\n                // - The props just updated with a new userlist where the data is being gathered for this particular user\n                //   OR there is no mapping for this user\n                return false\n              }\n              fauxUserProfileIndex += 1\n              return (\n                <div key={JSON.stringify(fauxUserProfile)} className=\"SRC-grid-item SRC-narrow-grid-item\">\n                  <UserCard\n                    disableLink={true}\n                    hideEmail={true}\n                    size={size}\n                    userProfile={fauxUserProfile}\n                  />\n                </div>\n              )\n            }\n          )\n        }\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\nimport {\n  AMP_CONSORTIUM,\n  DATASET,\n  FUNDER,\n  PUBLICATION,\n  STUDY,\n  TOOL,\n  GENERIC_CARD,\n  MEDIUM_USER_CARD\n} from '../utils/SynapseConstants'\nimport { Dataset, Funder, Publication, Study, Tool } from './row_renderers'\nimport { Consortium } from './row_renderers/AMPAD'\nimport GenericCard from './GenericCard'\nimport UserCardList from './UserCardList'\nimport TotalQueryResults from './TotalQueryResults'\nimport { CommonCardProps } from './CardContainerLogic'\n\nconst PAGE_SIZE: number = 25\n\nexport type CardContainerProps = {\n  data?: QueryResultBundle,\n  limit?: number,\n  isHeader?: boolean\n  title?: string\n  facetAliases?: {}\n  getLastQueryRequest?: () => QueryBundleRequest\n  getNextPageOfData?: (queryRequest: QueryBundleRequest) => void\n  isLoading?: boolean\n  facet?: string\n  unitDescription?: string\n  hasMoreData?: boolean\n  loadingScreen?: React.FunctionComponent | JSX.Element\n  backgroundColor?: string\n  showBarChart?: boolean\n} & CommonCardProps\n\ntype CardContainerState = {\n  cardLimit: number\n}\n\nexport class CardContainer extends React.Component<CardContainerProps, CardContainerState> {\n\n  constructor(props: CardContainerProps) {\n    super(props)\n    this.handleViewMore = this.handleViewMore.bind(this)\n  }\n\n  /**\n   * Handle a click on next or previous\n   *\n   * @memberof SynapseTable\n   */\n  public handleViewMore() {\n    const queryRequest = this.props.getLastQueryRequest!()\n    let offset = queryRequest.query.offset!\n    // paginate forward\n    offset += PAGE_SIZE\n    queryRequest.query.offset = offset\n    this.props.getNextPageOfData!(queryRequest)\n  }\n\n  public renderCard = (props: any, type: string) => {\n    switch (type) {\n      case STUDY:\n        return <Study {...props} />\n      case DATASET:\n        return <Dataset {...props} />\n      case FUNDER:\n        return <Funder {...props} />\n      case PUBLICATION:\n        return <Publication {...props} />\n      case TOOL:\n        return <Tool {...props} />\n      case AMP_CONSORTIUM:\n        return <Consortium {...props} />\n      case GENERIC_CARD:\n        return <GenericCard {...props} />\n      default:\n        return (<div />) // this should never happen\n    }\n  }\n  public render() {\n    const {\n      data,\n      limit = Infinity,\n      isHeader = false,\n      facet,\n      unitDescription,\n      type,\n      isLoading,\n      loadingScreen,\n      secondaryLabelLimit = 3,\n      showBarChart = true,\n      title,\n      ...rest\n    } = this.props\n    // the cards only show the loading screen on initial load, this occurs when data is undefined\n    if (!data) {\n      return (\n        <div>\n          {isLoading && loadingScreen}\n        </div>\n      )\n    } else if (data && data.queryResult.queryResults.rows.length === 0) {\n      // data was retrieved from the backend but there is none to show, we return a empty fragment\n      // there could be a more informed UX decision here but the current use case right now\n      // should display nothing\n      return <React.Fragment/>\n    }\n    const schema = {}\n    data.queryResult.queryResults.headers.forEach(\n      (element, index) => {\n        schema[element.name] = index\n      })\n\n    // We want to hide the view more button if:\n    //   1. The data fed in has !== PAGE_SIZE number of results\n    //   2. The hasMoreData prop is false\n    //   3. The limit is set to less than PAGE_SIZE\n    // below we show the view more button by following the opposite logic from above.\n    let showViewMore: boolean = limit >= PAGE_SIZE && data.queryResult.queryResults.rows.length >= PAGE_SIZE\n    showViewMore = showViewMore && this.props.hasMoreData!\n\n    const showViewMoreButton = (\n      showViewMore\n      &&\n      (\n        <div>\n          <button\n            onClick={this.handleViewMore}\n            className=\"pull-right SRC-standard-button-shape SRC-light-button\"\n          >\n            View More\n          </button>\n        </div>\n      )\n    )\n    let cards\n    if (type === MEDIUM_USER_CARD) {\n      // Hard coding ownerId as a column name containing the user profile ownerId\n      // for each row, grab the column with the ownerId\n      const userIdColumnIndex = data.queryResult.queryResults.headers.findIndex(\n        el => el.columnType === 'USERID'\n      )\n      if (userIdColumnIndex === -1) {\n        throw Error('Type MEDIUM_USER_CARD specified but no columnType USERID found')\n      }\n      const listIds = data.queryResult.queryResults.rows.map(el => el.values[userIdColumnIndex])\n      cards = <UserCardList data={data} list={listIds} size={MEDIUM_USER_CARD}/>\n    } else {\n      // render the cards\n      cards = data.queryResult.queryResults.rows.map(\n        (rowData: any, index) => {\n          if (index < limit) {\n            const key = JSON.stringify(rowData.values)\n            const propsForCard = {\n              key,\n              type,\n              schema,\n              isHeader,\n              secondaryLabelLimit,\n              data: rowData.values,\n              ...rest\n            }\n            return this.renderCard(propsForCard, type)\n          }\n          return false\n        }\n      )\n    }\n\n    return (\n      <div>\n        {title &&  <h2 className=\"SRC-card-overview-title\">{title}</h2>}\n        {(!title && unitDescription && showBarChart) &&\n          <TotalQueryResults\n            data={data}\n            facet={facet!}\n            isLoading={isLoading!}\n            unitDescription={unitDescription}\n            frontText={'Displaying'}\n          />\n        }\n        {/* ReactCSSTransitionGroup adds css fade in property for cards that come into view */}\n        {cards}\n        {showViewMoreButton}\n      </div>\n    )\n  }\n}\n\nexport default CardContainer\n","import * as React from 'react'\nimport { QueryWrapperChildProps } from './QueryWrapper'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { \n  faCaretDown,\n  faCaretUp,\n  faSearch\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { insertConditionsFromSearchParams } from '../utils/modules/sqlFunctions'\nimport TotalQueryResults from './TotalQueryResults'\nimport getColorPallette from './ColorGradient'\nimport { SEARCH_CLASS_CSS } from './QueryWrapperMenu'\n\nlibrary.add(faCaretDown)\nlibrary.add(faCaretUp)\nlibrary.add(faSearch)\n\ntype SearchState = {\n  dropdownIndex: number\n  isSearchableDropdownOpen: boolean\n  searchText: string\n  submittedSearchText: string\n}\nexport type Searchable = {\n  columnName: string\n  hintText: string\n} []\n\nexport type SearchProps = {\n  searchable: Searchable\n  isQueryWrapperMenuChild?: boolean\n}\n\ntype InternalSearchProps = QueryWrapperChildProps & SearchProps\n\nclass Search extends React.Component<InternalSearchProps, SearchState> {\n\n  constructor(props: InternalSearchProps) {\n    super(props)\n    this.state = {\n      dropdownIndex: 0,\n      isSearchableDropdownOpen: false,\n      searchText: '',\n      submittedSearchText: ''\n    }\n  }\n\n  componentDidUpdate(prevProps: InternalSearchProps) {\n    if (this.props.isLoading === false && prevProps.isLoading === true) {\n      // highlighting will sometimes outpace the render method for react, adding the slight delay \n      // mitigates this\n      setTimeout(\n        this.highlightText,\n        100\n      )\n    }\n  }\n\n  public toggleDropdown = (value: boolean) => (_: React.SyntheticEvent) => {\n    this.setState({\n      isSearchableDropdownOpen: value\n    })\n  }\n\n  public setDropdownIndex = (index: number) => (_: React.SyntheticEvent) => {\n    this.setState({\n      dropdownIndex: index,\n      isSearchableDropdownOpen: false\n    })\n  }\n\n  public highlightText = () => {\n     const { submittedSearchText, dropdownIndex } = this.state\n     const { searchable, rgbIndex, facetAliases = {}, isQueryWrapperMenuChild = true} = this.props\n     const { colorPalette } = getColorPallette(rgbIndex!, 1)\n     const originalColor = colorPalette[0]\n     const searchItem = searchable[dropdownIndex]\n\n     const highlightedSpans = document.querySelectorAll<HTMLSpanElement>('.highlight')\n     highlightedSpans.forEach(\n       (span) => {\n          span.outerHTML = span.innerText\n        }\n    )\n    if (submittedSearchText) {\n      const searchItemView = facetAliases[searchItem.columnName] || searchItem.columnName\n      const frontText = isQueryWrapperMenuChild ? `.${SEARCH_CLASS_CSS} `: ''\n      const querySelector =  frontText + `[data-search-handle=\"${searchItemView}\"]`\n      const trs = document.querySelectorAll<HTMLElement>(querySelector)\n      // Target elements and apply styles\n      trs.forEach(\n        (textElement) => {\n          if (textElement.innerHTML !== null) {\n            const regex = new RegExp(submittedSearchText, \"gi\")\n            const match = textElement.innerText.match(regex)\n            if (match) {\n              // innerHTML contains only text\n              textElement.innerHTML = textElement.innerHTML.replace(regex, (match) => {\n                return `<span style=\"background: ${originalColor}; color: white;\" class=\"highlight\">${match}</span>`\n              })\n            }\n          }\n        }\n      )\n    }\n  }\n\n  public static addEscapeCharacters = (searchText: string) => {\n    // We have to escape the following characters\n    // ' % \\\n    let escapedSearchText = searchText\n    // escape ' by adding additional '\n    escapedSearchText = escapedSearchText.split(\"'\").join(\"''\")\n    // escape % by adding \\\n    // eslint-disable-next-line no-useless-escape\n    escapedSearchText = escapedSearchText.split(\"%\").join(\"\\%\")\n    // escape \\ by adding \\\n    escapedSearchText = escapedSearchText.split(\"\\\\\").join(\"\\\\\\\\\")\n    return escapedSearchText\n  }\n\n  public search = (event: React.SyntheticEvent<HTMLFormElement>) => {\n    // form completion by default causes the page to reload, so we prevent that\n    event.preventDefault()\n    const { searchText, dropdownIndex } = this.state\n\n    const { searchable } = this.props\n    const searchItem = searchable[dropdownIndex]\n    // Always grabs initQueryRequest so that it doesn't build a chain of \n    // LIKE clauses\n    const lastQueryRequestDeepCopy = this.props.getInitQueryRequest!()\n    let { sql } = lastQueryRequestDeepCopy.query\n    const searchParams = {\n      [searchItem.columnName]: Search.addEscapeCharacters(searchText)\n    }\n    const newSql = insertConditionsFromSearchParams(searchParams, sql)\n    lastQueryRequestDeepCopy.query.sql = newSql\n    this.setState({\n      submittedSearchText: searchText\n    })\n    this.props.executeQueryRequest!(lastQueryRequestDeepCopy)\n  }\n\n  public handleChange = (event: React.FormEvent<HTMLInputElement>) => {\n   this.setState({\n     searchText: event.currentTarget.value\n   }) \n  }\n\n  render() {\n    const { searchable, data, isLoading, facet, unitDescription = '', facetAliases = {} } = this.props\n    const { isSearchableDropdownOpen, dropdownIndex, searchText, submittedSearchText } = this.state\n    const searchableItem = searchable[dropdownIndex]\n    const containerStyle: React.CSSProperties = {\n      background: '#F9F9F9',\n      height: '80px',\n      display: 'flex',\n      marginTop: 10,\n      alignItems: 'center',\n      padding: '0px 10px',\n    }\n    const fieldStyle: React.CSSProperties = {\n      background: '#FFFFFF',\n      border: '1px solid #DCDCDC',\n      margin: '0px 10px',\n      height: '51px',\n      display: 'inline-flex',\n      alignItems: 'center',\n    }\n    const ulStyle: React.CSSProperties = {\n      width: 'inherit',\n      left: -10,\n      paddingBottom: 0,\n      paddingTop: 0\n    }\n    const liStyle: React.CSSProperties = {\n      paddingLeft: '10px'\n    }\n    const caretIconStyle: React.CSSProperties = {\n      fontSize: '16px',\n      marginRight: 8\n    }\n    const labelStyle: React.CSSProperties = {\n      display: 'inline-block', whiteSpace: 'nowrap'\n    }\n    const searchIconStyle: React.CSSProperties = {\n      color: '#C4C4C4',\n      position:'absolute',\n      right: 50,\n      fontSize: 16\n    }\n    const inputStyle: React.CSSProperties = {\n      border: 1,\n      margin: 1,\n      paddingLeft: 10,\n      height: 49\n    }\n    const dropdownBtnStyle: React.CSSProperties = { \n      justifyContent: 'space-between'\n    }\n    const totalQueryResultsStyle: React.CSSProperties = {\n      margin: '20px 0px'\n    }\n    const curFacetDisplayText = facetAliases[searchableItem.columnName] || searchableItem.columnName\n    let usedUnitDescription = unitDescription\n    if (submittedSearchText !== '') {\n      usedUnitDescription = `${unitDescription} containing \"${submittedSearchText}\" in ${curFacetDisplayText}`\n    }\n    return (\n      <div>\n        <div style={containerStyle}>\n          {isSearchableDropdownOpen && <button onClick={this.toggleDropdown(false)} className={'SRC-menu-wall'} />}\n          <div className=\"SRC-centerContent SRC-fullWidth\">\n            <span style={labelStyle}> Search in </span>\n            <div style={{...fieldStyle, flex: 1, paddingLeft: 10}}>\n              <div id=\"search-dropdown\" className=\"SRC-inherit-height SRC-fullWidth\">\n                <div className=\"SRC-centerContent SRC-inherit-height\">\n                  <button style={dropdownBtnStyle} className=\"SRC-inlineFlex SRC-fullWidth\" onClick={this.toggleDropdown(!isSearchableDropdownOpen)}>\n                    { curFacetDisplayText }\n                    <FontAwesomeIcon style={caretIconStyle} icon={isSearchableDropdownOpen ? 'caret-up' : 'caret-down'} />\n                  </button>\n                </div>\n                <div className={'dropdown ' + (isSearchableDropdownOpen? 'open' : '')}>\n                  <ul aria-labelledby=\"search-dropdown\" style={ulStyle} className=\"SRC-search-dropdown dropdown-menu SRC-forceLeftDropdown dropdown-menu-left\">\n                    {\n                      searchable.map(\n                        (el, index) => {\n                          const displayName = facetAliases[el.columnName] || el.columnName\n                          return (\n                            <li \n                              style={liStyle}\n                              onClick={this.setDropdownIndex(index)}\n                              key={displayName}\n                              className=\"SRC-hand-cursor SRC-primary-background-color-hover\"\n                            >\n                              {displayName }\n                            </li>\n                          )\n                        }\n                      )\n                    }\n                  </ul>\n                </div>\n              </div>\n            </div>\n            <form style={{...fieldStyle, flex: 3, alignItems: 'center'}} onSubmit={this.search}>\n              <input\n                placeholder={`e.g. \"${searchableItem.hintText}\"`} \n                style={inputStyle}\n                onChange={this.handleChange}\n                value={searchText}\n                type=\"text\"\n                className=\"SRC-fullWidth\"\n              />\n              <FontAwesomeIcon size={'sm'} style={searchIconStyle} icon={'search'} />\n            </form>\n          </div>\n        </div>\n        <TotalQueryResults\n          style={totalQueryResultsStyle}\n          isLoading={isLoading!}\n          data={data}\n          facet={facet!}\n          frontText={'Displaying'}\n          unitDescription={usedUnitDescription}\n        />\n      </div>\n    )\n  }\n}\n\nexport default Search","import { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport * as React from 'react'\nimport { SynapseConstants } from '../utils/'\nimport { getColorPallette } from './ColorGradient'\nimport { Facets } from './Facets'\nimport QueryCount from './QueryCount'\nimport QueryWrapper from './QueryWrapper'\nimport StackedBarChart from './StackedBarChart'\nimport SynapseTable, { SynapseTableProps } from './SynapseTable'\nimport CardContainer from './CardContainer'\nimport { CommonCardProps } from './CardContainerLogic'\nimport { StackedBarChartProps } from './StackedBarChart'\nimport { KeyValue, isGroupByInSql } from '../utils/modules/sqlFunctions'\nimport { FacetColumnValuesRequest } from '../utils/jsonResponses/Table/FacetColumnRequest'\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus, faSearch } from '@fortawesome/free-solid-svg-icons'\nimport Search, { SearchProps } from './Search'\n\nlibrary.add(faPlus)\nlibrary.add(faSearch)\n\ntype MenuState = {\n  activeMenuIndices: number []\n  accordionGroupIndex: number,\n}\n\nexport type MenuConfig = {\n  sql: string\n  facet?: string\n}\n\n// represents the entirety of the menu\nexport const MENU_DROPDOWN_CSS = 'SRC-menuLayout'\n// represent an accordiong 'group' within the menu\nexport const ACCORDION_GROUP_CSS = 'SRC-accordion-key'\n// represents the single accordiong group which is active within the menu\nexport const ACCORDION_GROUP_ACTIVE_CSS = 'SRC-IS-ACTIVE'\n// for search component querying on cardcontainer\nexport const SEARCH_CLASS_CSS = 'SRC-search-component'\n\ninterface MenuSearchParams extends KeyValue {\n  menuIndex: string\n  facetValue: string\n}\n\ntype CommonMenuProps = {\n  tableConfiguration?: SynapseTableProps\n  cardConfiguration?: CommonCardProps\n  stackedBarChartConfiguration?: StackedBarChartProps\n  searchConfiguration?: SearchProps\n  showBarChart?: boolean\n  unitDescription?: string\n}\n\ntype AccordionConfig = {\n  searchConfiguration?: SearchProps\n  menuConfig: MenuConfig []\n  name: string\n} & CommonMenuProps\n\nexport type QueryWrapperMenuProps = {\n  facetAliases?: {}\n  menuConfig?: MenuConfig []\n  accordionConfig?: AccordionConfig []\n  isConsistent?: boolean\n  token?: string\n  rgbIndex: number\n  searchParams?: MenuSearchParams\n  name?: string\n} & CommonMenuProps\n\ntype Info = {\n  isSelected: boolean\n  originalColor: string\n  hoverWhiteTextClass?: string\n}\n\nexport default class QueryWrapperMenu extends React.Component<QueryWrapperMenuProps, MenuState> {\n\n  constructor(props: QueryWrapperMenuProps) {\n    super(props)\n    // See note about initializing props from state here\n    //  - https://stackoverflow.com/questions/40063468/react-component-initialize-state-from-props/47341539#47341539\n    const { searchParams, accordionConfig } = this.props\n    let activeMenuIndices = []\n    const indexFromURLOrDefaultZero = (searchParams && Number(searchParams.menuIndex)) || 0\n    if (accordionConfig) {\n      activeMenuIndices = new Array(accordionConfig.length).fill(0)\n    } else {\n      activeMenuIndices = [indexFromURLOrDefaultZero]\n    }\n    this.state = {\n      activeMenuIndices,\n      accordionGroupIndex: 0\n    }\n    this.handleHoverLogic = this.handleHoverLogic.bind(this)\n    this.switchFacet = this.switchFacet.bind(this)\n    this.getUnitDescription = this.getUnitDescription.bind(this)\n    this.getPartMask = this.getPartMask.bind(this)\n    this.getSelectedFacets = this.getSelectedFacets.bind(this)\n    this.getTableLoadingScreen = this.getTableLoadingScreen.bind(this)\n  }\n\n  componentDidUpdate(prevProps: QueryWrapperMenuProps, _prevState: MenuState) {\n    /*\n      Update the row count or the menu index if the props changed by looking at whether the sql or the rgbIndex\n      changed\n    */\n    let { activeMenuIndices } = this.state\n    const { rgbIndex, accordionConfig } = this.props\n    if (rgbIndex !== prevProps.rgbIndex) {\n      activeMenuIndices = accordionConfig ? new Array(accordionConfig.length).fill(0): [0] \n      this.setState({\n        activeMenuIndices,\n        accordionGroupIndex: 0,\n      })\n    }\n  }\n\n  /**\n   * Handle the user hovering over a facet selection, it must be programatically\n   * handled because the color used is dynamic\n   *\n   * @memberof Menu\n   */\n  public handleHoverLogic = (info: Info) => (event: React.MouseEvent<HTMLDivElement>) => {\n    // This prevents a bug where there is both light text and a light background,\n    // otherwise SRC-hoverWhiteText would be placed on the group and item keys statically\n    if (!event.currentTarget.classList.contains('SRC-hoverWhiteText')) {\n      event.currentTarget.classList.add('SRC-hoverWhiteText')\n    }\n    if (!info.isSelected && event.currentTarget.tagName === 'DIV') {\n      event.currentTarget.style.backgroundColor = info.originalColor\n    }\n  }\n\n  /**\n   * Handle user clicking menu item, event isn't used so we denote it as an _\n   *\n   * @memberof Menu\n   */\n  public switchFacet = (menuIndexIn: number, accordionIndexIn: number) => (_: React.SyntheticEvent<HTMLDivElement>) => {\n    const { activeMenuIndices, accordionGroupIndex } = this.state\n    // there's an odd bug where clicking a menu item twice will select the first tab,\n    // this is a fix for that, but this shouldn't be necessary\n    const isClickingCurrentSelection = accordionGroupIndex === accordionIndexIn && activeMenuIndices[accordionIndexIn] === menuIndexIn\n    activeMenuIndices[accordionIndexIn] = menuIndexIn\n    if (!isClickingCurrentSelection) {\n      this.setState({ activeMenuIndices, accordionGroupIndex: accordionIndexIn })\n    }\n  }\n\n  /**\n   * Handle user clicking menu item, event isn't used so we denote it as an _\n   *\n   * @memberof Menu\n   */\n  public toggleGroupAccordionIndex = (accordionGroupIndexIn: number) => (_event: React.SyntheticEvent<HTMLDivElement>) => {\n    const { accordionGroupIndex } = this.state\n    if (accordionGroupIndex === accordionGroupIndexIn) {\n      return\n    } else {\n      this.setState({\n        accordionGroupIndex: accordionGroupIndexIn\n      })\n    }\n  }\n\n  public render() {\n    const { stackedBarChartConfiguration, name, menuConfig, token, accordionConfig } = this.props\n    const { activeMenuIndices } = this.state\n    let sql = ''\n    if (menuConfig) {\n      sql = menuConfig[activeMenuIndices[0]].sql\n    }\n    const hasGroupByInSql = isGroupByInSql(sql)\n    const menuDropdown = this.renderMenuDropdown()\n    const queryWrapper = this.renderQueryChildren()\n    const showBarChart = stackedBarChartConfiguration !== undefined\n    return (\n      <React.Fragment>\n        {\n          name && sql && !hasGroupByInSql\n          &&\n          <h3 id=\"exploreCount\" className=\"SRC-boldText\">\n            <QueryCount token={token} name={name} sql={sql} />\n          </h3>\n        }\n        {\n          (hasGroupByInSql || accordionConfig)\n          &&\n          <h3 id=\"exploreCount\" className=\"SRC-boldText\">\n            {name}\n          </h3>\n        }\n        <div className=\"break\">\n          <hr/>\n        </div>\n        <div className=\"row\">\n          <div className={`col-xs-12 col-sm-3 col-lg-2 SRC-menuLayout ${showBarChart ? 'SRC-menuPadding' : 'SRC-menuPaddingLess'}`}>\n            {menuDropdown}\n          </div>\n          <div className=\"col-xs-12 col-sm-9 col-lg-10\">\n            {queryWrapper}\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n\n  private renderQueryChild(menuConfig: MenuConfig [], queryConfig: CommonMenuProps, groupIndex: number)  {\n    const {\n      token,\n      rgbIndex = 0,\n      isConsistent = false,\n      searchParams,\n      accordionConfig = [],\n      facetAliases = {}\n    } = this.props\n    const {\n      cardConfiguration,\n      tableConfiguration,\n      stackedBarChartConfiguration,\n      unitDescription = '',\n      searchConfiguration\n    } = queryConfig\n    const { activeMenuIndices, accordionGroupIndex } = this.state\n    let facetValue = ''\n    let menuIndexFromProps = ''\n    if (searchParams) {\n      ({ facetValue = '', menuIndex: menuIndexFromProps } = searchParams)\n    }\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      const isSelected: boolean = groupIndex === accordionGroupIndex && activeMenuIndices[accordionGroupIndex] === index\n      const {\n        facet,\n        sql,\n      } = config\n      const name = accordionConfig[groupIndex] && accordionConfig[groupIndex].name\n      const hasGroupByInSql = isGroupByInSql(sql)\n      // only show search component if its the last item in the menu config\n      const showSearch = index === menuConfig.length - 1 && searchConfiguration !== undefined\n      const showBarChart = stackedBarChartConfiguration !== undefined && !showSearch && !hasGroupByInSql\n      const aliasedFacet: string = facet && (facetAliases[facet] || facet)\n\n      // search class is only used for testing, no css is actually applied\n      let searchClass = showSearch ? SEARCH_CLASS_CSS : ''\n      if (!isSelected) {\n        searchClass = 'SRC-hidden'\n      }\n\n      // Get props for query wrapper\n      const usedUnitDescription = this.getUnitDescription(unitDescription, aliasedFacet, showSearch, accordionConfig.length > 0, name)\n      const selectedFacets = this.getSelectedFacets(Number(menuIndexFromProps) === index, facet, facetValue)\n      const partMask = this.getPartMask(facet, hasGroupByInSql)\n      const tableLoadingScreen = this.getTableLoadingScreen(hasGroupByInSql, stackedBarChartConfiguration, tableConfiguration)\n\n      return (\n        <span key={facet} className={searchClass}>\n          <QueryWrapper\n            showBarChart={showBarChart}\n            loadNow={isSelected}\n            showMenu={true}\n            initQueryRequest={{\n              partMask,\n              concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n              query: {\n                sql,\n                selectedFacets,\n                isConsistent,\n                limit: 25,\n                offset: 0\n              }\n            }}\n            unitDescription={usedUnitDescription}\n            facet={facet}\n            token={token}\n            rgbIndex={rgbIndex}\n            facetAliases={facetAliases}\n          >\n            {showBarChart ? <StackedBarChart {...stackedBarChartConfiguration!} /> : <React.Fragment/>}\n            {!showSearch ? <Facets />:  <React.Fragment/>}\n            {showSearch ? <Search searchable={searchConfiguration!.searchable}/> : <React.Fragment/>}\n            {/*\n                Using a conditional render fails here because QueryWrapper can't clone an undefined element\n                which will happen if either configuration is undefined.\n            */}\n            {tableConfiguration ? <SynapseTable {...{...tableConfiguration, loadingScreen: tableLoadingScreen }}/> : <React.Fragment/>}\n            {cardConfiguration ? <CardContainer {...cardConfiguration}/> : <React.Fragment/>}\n          </QueryWrapper>\n        </span>\n      )\n      }\n    )\n  }\n\n  public getUnitDescription (unitDescription: string, aliasedFacet: string, showSearch: boolean, isAccordionConfigDefined: boolean, name: string ) {\n    if (isAccordionConfigDefined && !showSearch) {\n      return `${name} Tools by ${aliasedFacet}`\n    }\n    if (isAccordionConfigDefined && showSearch) {\n      // This is also a hardcoded setting to detect if search within a tools accordion is being shown\n      return `${name} Tools`\n    }\n    return unitDescription\n  }\n\n  public getPartMask (facet: string | undefined, hasGroupByInSql: boolean) {\n    let partMask = SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS | SynapseConstants.BUNDLE_MASK_QUERY_RESULTS;\n    if (facet) {\n      partMask = partMask | SynapseConstants.BUNDLE_MASK_QUERY_FACETS\n    } else {\n      // Needed to calculate the total count for TotalQueryResults\n      partMask = partMask | SynapseConstants.BUNDLE_MASK_QUERY_COUNT\n    }\n    // note: COLUMN_MODELS unnecessary for Synapse Table link for aggregate functions since we now rely on the sql parser to distinguish.\n    return partMask\n  }\n\n  public getSelectedFacets (isSelected: boolean, facet: string | undefined, facetValue: string | undefined): FacetColumnValuesRequest [] {\n    if (isSelected && facet && facetValue) {\n      return [\n        {\n          concreteType: 'org.sagebionetworks.repo.model.table.FacetColumnValuesRequest',\n          facetValues: [facetValue],\n          columnName: facet\n        }\n      ]\n    }\n    return []\n  }\n  \n  public getTableLoadingScreen (hasGroupByInSql: boolean, stackedBarChartConfiguration: StackedBarChartProps | undefined, tableConfiguration: SynapseTableProps | undefined): JSX.Element {\n    if (hasGroupByInSql && stackedBarChartConfiguration && tableConfiguration) {\n      // Since the bar chart doesnt show when theres a a groupy statement we use the \n      // loadingScreen from the chart configuration\n      return stackedBarChartConfiguration.loadingScreen\n    }\n    return <></>\n  }\n\n  private renderQueryChildren() {\n    const {\n      accordionConfig,\n      menuConfig,\n    } = this.props\n    const {\n      accordionGroupIndex,\n    } = this.state\n    if (accordionConfig) {\n      return accordionConfig.map(\n        (el, index) => {\n          return (\n            <div key={JSON.stringify(el)} className={accordionGroupIndex === index ? '' : 'SRC-hidden'}>\n              {this.renderQueryChild(el.menuConfig, el, index)}\n            </div>\n          )\n        }\n      )\n    } else {\n      return this.renderQueryChild(menuConfig!, this.props, 0)\n    }\n  }\n\n  private renderMenuDropdown() {\n    const { accordionConfig, menuConfig, searchConfiguration } = this.props\n    const { accordionGroupIndex } = this.state\n    const { rgbIndex } = this.props\n    const { colorPalette } = getColorPallette(rgbIndex, 5)\n    const lightColor = '#F5F5F5'\n    if (accordionConfig) {\n      return accordionConfig.map(\n        (el, index) => {\n          const isActive = accordionGroupIndex === index\n          const primaryColor = colorPalette[0]\n          let style: React.CSSProperties = {\n            background: isActive ? primaryColor : lightColor,\n            color: isActive ? 'white' : '',\n          }\n          let indicatorClasses = isActive ? 'SRC-whiteText SRC-pointed-triangle-down' : ' SRC-hand-cursor '\n          if (isActive) {\n            style.borderTopColor = primaryColor\n          }\n          const hoverEnter: Info = {\n            isSelected: isActive,\n            originalColor: primaryColor,\n          }\n          const hoverLeave: Info = {\n            isSelected: isActive,\n            originalColor: lightColor\n          }\n          const iconContainerStyle: React.CSSProperties = {\n            marginLeft: 5\n          }\n          const iconStyle: React.CSSProperties = {\n            fontSize: '0.55em'\n          }\n          return (\n            <div key={JSON.stringify(el)} className={isActive ? ACCORDION_GROUP_ACTIVE_CSS : ''}>\n              <div \n                style={style}\n                role={isActive ? \"\": \"button\"}\n                onMouseEnter={this.handleHoverLogic(hoverEnter)}\n                onMouseLeave={this.handleHoverLogic(hoverLeave)}\n                className={`${ACCORDION_GROUP_CSS} SRC-gap SRC-menu-button-base SRC-background-unset ${indicatorClasses}`}\n                onClick={!isActive ? this.toggleGroupAccordionIndex(index) : undefined }\n              >\n                {el.name}\n                <span style={iconContainerStyle}>\n                  {\n                    !isActive\n                    &&\n                    <FontAwesomeIcon style={iconStyle} color={primaryColor} icon={'plus'} />\n                  }\n                </span>\n              </div>\n              <TransitionGroup component={null}>\n                {\n                  isActive\n                  &&\n                  <CSSTransition\n                    // The component doesn't run a transition on mount, we override this\n                    // by setting appear to true because otherwise the triangle indicator wouldn't show\n                    appear={true}\n                    key={JSON.stringify(el)}\n                    classNames=\"SRC-accordion-menu\"\n                    timeout={{ enter: 1000, exit: 500 }}\n                  >\n                    <div className={\"SRC-accordion-menu\"}>\n                      {this.renderFacetMenu(el.menuConfig, index, el.searchConfiguration)}\n                    </div>\n                  </CSSTransition>\n                }\n              </TransitionGroup>\n            </div>\n          )\n        }\n      )\n    }\n    return this.renderFacetMenu(menuConfig!, 0, searchConfiguration)\n  }\n\n  private renderFacetMenu(menuConfig: MenuConfig [], curLevel: number, searchConfiguration?: SearchProps) {\n    const { rgbIndex, accordionConfig, facetAliases = {} } = this.props\n    const { activeMenuIndices, accordionGroupIndex } = this.state\n    const { colorPalette } = getColorPallette(rgbIndex, 5)\n    let originalColor = colorPalette[0]\n    let defaultColor = '#F5F5F5'\n    if (accordionConfig) {\n      originalColor = colorPalette[2]\n      defaultColor = colorPalette[4]\n    }\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      let searchIconStyle: React.CSSProperties = {\n        margin: 'auto 0',\n        opacity: 0.4\n      }\n      const { facet } = config\n      const isSelected: boolean = activeMenuIndices[accordionGroupIndex] === index && curLevel === accordionGroupIndex\n      const style: React.CSSProperties = {}\n      const isSearchConfig = (index === menuConfig.length -1 ) && searchConfiguration\n      let selectedStyling: string = ''\n      if (isSelected) {\n        // we have to programatically set the style since the color is chosen from a color\n        // wheel\n        style.background = originalColor\n        // below has to be set so the pseudo element created will inherit its color\n        // appropriately\n        style.borderLeftColor = originalColor\n        selectedStyling = 'SRC-pointed-triangle-right SRC-whiteText'\n        searchIconStyle.color = 'white'\n      } else {\n        // change background to class\n        selectedStyling = 'SRC-blackText'\n        style.background = defaultColor\n      }\n      const infoEnter: Info = { isSelected, originalColor }\n      const infoLeave: Info = { isSelected, originalColor: defaultColor }\n      const facetDisplayValue: string = facet && facetAliases[facet] || facet\n      return (\n        <div\n          onMouseEnter={this.handleHoverLogic(infoEnter)}\n          onMouseLeave={this.handleHoverLogic(infoLeave)}\n          key={config.facet}\n          className={`SRC-hand-cursor SRC-background-unset ${selectedStyling} SRC-menu-button-base SRC-gap`}\n          onClick={this.switchFacet(index, curLevel)}\n          onKeyPress={this.switchFacet(index, curLevel)}\n          role=\"button\"\n          tabIndex={0}\n          style={style}\n        >\n          {isSearchConfig ? \n            'Search'\n            :\n            facetDisplayValue\n          }\n          {\n            isSearchConfig &&\n            <span>\n              <FontAwesomeIcon className={selectedStyling} size={'sm'} style={searchIconStyle} icon=\"search\"/>\n            </span>\n          }\n        </div>\n      )\n    })\n  }\n\n}\n","import * as React from 'react'\nimport { FileEntity } from '../utils/jsonResponses/FileEntity'\nimport { uploadFile, createEntity, updateEntity, lookupChildEntity, getEntity } from '../utils/SynapseClient'\nimport { FileUploadComplete } from '../utils/jsonResponses/FileUploadComplete'\nimport { EntityId } from '../utils/jsonResponses/EntityId'\nimport { EntityLookupRequest } from '../utils/jsonResponses/EntityLookupRequest'\n\ntype UploaderState = {\n  token?: string,\n  error?: any,\n  totalFilesToUploadCount: number,\n  filesUploadedCount: number,\n  isUploading?: boolean,\n  successfullyUploaded: boolean\n}\n\nexport type UploaderProps = {\n  token?: string,\n  parentContainerId: string\n}\n\nexport default class Uploader extends React.Component<UploaderProps, UploaderState> {\n  private readonly inputOpenFileRef: React.RefObject<HTMLInputElement>\n\n  constructor(props: UploaderProps) {\n    super(props)\n    this.state = {\n      token: '',\n      isUploading: false,\n      filesUploadedCount: 0,\n      totalFilesToUploadCount: 0,\n      successfullyUploaded: false\n    }\n    this.inputOpenFileRef = React.createRef()\n  }\n\n  showOpenFileDlg = () => {\n    if (this.inputOpenFileRef && this.inputOpenFileRef.current) {\n      this.inputOpenFileRef.current.click()\n    }\n  }\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files) {\n      this.handleFilesChanged(event.target.files)\n    }\n  }\n\n  finishedProcessingOneFile = () => {\n    const incrementedFilesUploadedCount = this.state.filesUploadedCount + 1\n    const isStillUploading = incrementedFilesUploadedCount < this.state.totalFilesToUploadCount\n    this.setState(\n      {\n        isUploading: isStillUploading,\n        filesUploadedCount: incrementedFilesUploadedCount,\n        successfullyUploaded: !isStillUploading\n      })\n  }\n\n  handleUploadError = (error: any) => {\n    this.finishedProcessingOneFile()\n    this.setState({ error })\n  }\n\n  handleFilesChanged = (selectorFiles: FileList) => {\n    this.setState(\n      {\n        error: undefined,\n        isUploading: true,\n        filesUploadedCount: 0,\n        totalFilesToUploadCount: selectorFiles.length,\n        successfullyUploaded: false,\n      })\n    Array.from(selectorFiles).forEach((file) => {\n      // check for existing filename in parent folder before upload (add new version if exists).\n      // note that the parent container (project/folder) is configurable.\n      const newFileEntity: FileEntity = {\n        parentId: this.props.parentContainerId,\n        name: file.name,\n        concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n        dataFileHandleId: '',\n      }\n      const entityLookupRequest: EntityLookupRequest = { entityName: file.name, parentId: this.props.parentContainerId }\n      lookupChildEntity(entityLookupRequest, this.props.token).then((entityId: EntityId) => {\n        // ok, found an entity of the same name.\n        getEntity<FileEntity>(this.props.token, entityId.id).then((existingEntity: FileEntity) => {\n          if (existingEntity.concreteType === 'org.sagebionetworks.repo.model.FileEntity') {\n            this.updateEntityFile(existingEntity, file)\n          } else {\n            this.updateEntityFile(newFileEntity, file)\n          }\n        })\n      }).catch((error: any) => {\n        if (error.statusCode === 404) {\n          // great, it's a new file!\n          this.updateEntityFile(newFileEntity, file)\n        } else {\n          this.handleUploadError(error)\n        }\n      })\n    })\n  }\n\n  updateEntityFile = (fileEntity: FileEntity, file: File) => {\n    uploadFile(this.props.token, file.name, file).then((fileUploadComplete: FileUploadComplete) => {\n      const isCreate = fileEntity.dataFileHandleId === ''\n      fileEntity.dataFileHandleId = fileUploadComplete.fileHandleId\n      const createOrUpdate = isCreate ? createEntity : updateEntity\n      createOrUpdate(fileEntity, this.props.token).then(() => {\n        this.finishedProcessingOneFile()\n      })\n    }).catch((error: any) => {\n      this.handleUploadError(error)\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        {/** This input field is used for it's functionally (browse for files), the button acts as the UI. */}\n        <input\n          ref={this.inputOpenFileRef}\n          type=\"file\"\n          style={{ display: 'none' }}\n          onChange={this.handleChange}\n          multiple={true}\n        />\n        <button type=\"button\" onClick={this.showOpenFileDlg} className=\"SRC-uploadButton\">Browse...</button>\n        {\n          this.state.isUploading &&\n          <React.Fragment>\n            <span style={{ marginLeft: '10px' }}>\n              {this.state.filesUploadedCount} / {this.state.totalFilesToUploadCount} file(s)\n            </span>\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          </React.Fragment>\n        }\n        {\n          this.state.successfullyUploaded &&\n          <span style={{ marginLeft: '10px' }}>\n            Successfully uploaded {this.state.totalFilesToUploadCount} file(s) to\n            <a \n              style={{ marginLeft: '2px' }} \n              href={`https://www.synapse.org/#!Synapse:${this.props.parentContainerId}`} \n              rel=\"noopener noreferrer\" \n              target=\"_blank\">{this.props.parentContainerId}\n            </a>\n          </span>\n        }\n        {\n          this.state.error &&\n          <p>\n            Upload error!\n          </p>\n        }\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { FileEntity } from '../utils/jsonResponses/FileEntity'\nimport { getEntity, getFileEntityContent, uploadFile, updateEntity } from '../utils/SynapseClient'\nimport { Entity } from '../utils/jsonResponses/Entity'\nimport { FileUploadComplete } from '../utils/jsonResponses/FileUploadComplete'\n\ntype FileContentDownloadUploadDemoState = {\n  token?: string,\n  error?: any,\n  isLoading?: boolean,\n  fileContent?: string,\n  targetEntity?: FileEntity\n}\n\nexport type FileContentDownloadUploadDemoProps = {\n  token?: string,\n  targetEntityId: string\n}\n\nexport default class FileContentDownloadUploadDemo\n  extends React.Component<FileContentDownloadUploadDemoProps, FileContentDownloadUploadDemoState> {\n  constructor(props: FileContentDownloadUploadDemoProps) {\n    super(props)\n    this.state = {\n      token: '',\n      isLoading: false,\n    }\n  }\n\n  public componentDidMount() {\n    const { token, targetEntityId } = this.props\n    // must be logged in to download content\n    if (token) {\n      this.setState({ isLoading: true })\n      getEntity(token, targetEntityId).then((entity: Entity) => {\n        // if file entity\n        if (entity.concreteType === 'org.sagebionetworks.repo.model.FileEntity') {\n          const fileEntity: FileEntity = entity as FileEntity\n          getFileEntityContent(token, fileEntity).then((content) => {\n            this.setState({ fileContent: content, targetEntity: fileEntity, isLoading: false })\n          })\n        } else {\n          this.setState({ error: 'invalid type', isLoading: false })\n        }\n      }).catch((err) => {\n        this.setState({ error: err, isLoading: false })\n      })\n    }\n  }\n\n  updateFileContent = (event: React.MouseEvent<HTMLButtonElement>) => {\n    // create a new FileHandle, and update the FileEntity\n    if (this.props.token && this.state.targetEntity && this.state.fileContent) {\n      this.setState({ isLoading: true })\n      const newFileContent = new Blob([this.state.fileContent], {\n        type: 'text/plain'\n      })\n      uploadFile(this.props.token, this.state.targetEntity.name, newFileContent)\n        .then((fileUploadComplete: FileUploadComplete) => {\n          // now update the entity!\n          if (this.state.targetEntity) {\n            this.state.targetEntity.dataFileHandleId = fileUploadComplete.fileHandleId\n            updateEntity(this.state.targetEntity, this.props.token).then((entity: Entity) => {\n              const fileEntity = entity as FileEntity\n              // updated the target entity, force it to get the updated entity\n              this.setState({ targetEntity: fileEntity, isLoading: false })\n            }).catch((err: string) => {\n              this.setState({ error: err, isLoading: false })\n            })\n          }\n        }).catch((err: string) => {\n          this.setState({ error: err, isLoading: false })\n        })\n    }\n  }\n  handleContentChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    this.setState({ fileContent: event.target.value })\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.state.fileContent &&\n          <React.Fragment>\n            <div>\n              <textarea\n                style={{ width: '100%', height: '300px' }}\n                value={this.state.fileContent}\n                onChange={this.handleContentChange}\n              />\n            </div>\n            <button onClick={this.updateFileContent}>Update File Content...</button>\n          </React.Fragment>\n        }\n        {\n          this.state.isLoading &&\n          <span style={{ marginLeft: '2px' }} className={'spinner'} />\n        }\n\n        {\n          this.state.error &&\n          <p>\n            Download error!\n          </p>\n        }\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\n// tslint:disable-next-line:import-name\nimport Plotly from 'plotly.js-basic-dist'\n// tslint:disable-next-line:import-name\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { SynapseClient } from '../utils'\nimport { ProjectFilesStatisticsRequest, ProjectFilesStatisticsResponse, FilesCountStatistics } from '../utils/jsonResponses/Statistics'\nconst Plot = createPlotlyComponent(Plotly)\n\nexport type StatisticsPlotProps = {\n  request: ProjectFilesStatisticsRequest\n  token?: string\n  endpoint?: string\n  title?: string\n  xtitle?: string\n  ytitle?: string\n  isHorizontal?: boolean\n  xaxistype?: string\n  showlegend?: boolean\n}\n\ntype StatisticsPlotState = {\n  isLoaded: boolean\n  plotData?: ProjectFilesStatisticsResponse\n}\n\nclass StatisticsPlot extends React.Component<StatisticsPlotProps, StatisticsPlotState> {\n\n  constructor(props: StatisticsPlotProps) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      plotData: {} as ProjectFilesStatisticsResponse\n    }\n  }\n\n  public componentDidMount() {\n    this.fetchPlotlyData()\n  }\n  /**\n   * Get data for plotly\n   *\n   * @returns data corresponding to plotly widget\n   */\n  fetchPlotlyData = async () => {\n    const { token, request, endpoint } = this.props\n    return SynapseClient.getProjectStatistics(request, token, endpoint).then(\n      (data: ProjectFilesStatisticsResponse) => {\n        this.setState({\n          isLoaded: true,\n          plotData: data\n        })\n      }\n    ).catch(\n      (err: any) => {\n        console.log('Error on call to get statistics ', err)\n      }\n    )\n  }\n\n  getTrace = (traceName:string, stats: FilesCountStatistics[], orientation: string) => {\n    let x: string[] = [];\n    let y: number[] = [];\n    const trace = {\n      orientation,\n      x,\n      y,\n      name: traceName,\n      type: 'bar'\n    }\n    for (const statPoint of stats){\n      const month = new Date(statPoint.rangeStart).toLocaleString('default', { month: 'long' })\n      trace.x.push(month)\n      trace.y.push(statPoint.filesCount)\n    }\n    return trace\n  }\n\n  showPlot = () => {\n    if (!this.state.isLoaded || !this.state.plotData) {\n      return\n    }\n    const {\n            title,\n            xtitle,\n            ytitle,\n            isHorizontal,\n            xaxistype,\n            showlegend\n        } = this.props\n    const plotData = this.state.plotData\n    const layout: any = {\n      showlegend,\n      title,\n      barmode: 'stack'\n    }\n    if (xtitle) {\n      layout.xaxis = {\n        title: xtitle\n      }\n    }\n    if (xaxistype) {\n      layout.xaxis = {\n        ...layout.xaxis,\n        xaxistype: xaxistype.toLowerCase()\n      }\n    }\n    if (ytitle) {\n      layout.yaxis = {\n        title: ytitle\n      }\n    }\n    // init plot_data\n    const orientation: string = isHorizontal ? 'h' : 'v'\n    const traces: any = []\n    if (plotData.fileDownloads && plotData.fileDownloads.months && plotData.fileDownloads.months.length > 0) {\n      // add file downloads trace\n      traces.push(this.getTrace('File Downloads', plotData.fileDownloads.months, orientation))\n    }\n    if (plotData.fileUploads && plotData.fileUploads.months && plotData.fileUploads.months.length > 0) {\n      // add file uploads trace\n      traces.push(this.getTrace('File Uploads', plotData.fileUploads.months, orientation))\n    }\n    if (traces.length > 0)\n      return <Plot layout={layout} data={traces} />\n    else\n      return <></>\n  }\n\n  public render() {\n    if (!this.state.isLoaded) {\n      return null\n    }\n    return (this.showPlot())\n  }\n}\nexport default StatisticsPlot\n","import * as React from 'react'\nimport { SynapseVersion } from '../../lib/utils/jsonResponses/SynapseVersion'\nimport { SynapseClient } from '../../lib/utils/'\nimport QueryWrapperMenu, { MenuConfig } from '../../lib/containers/QueryWrapperMenu'\nimport Uploader from '../../lib/containers/Uploader'\nimport FileContentDownloadUploadDemo from '../../lib/containers/FileContentDownloadUploadDemo'\nimport StatisticsPlot from 'lib/containers/StatisticsPlot'\n\ntype DemoState = {\n  token: string\n  ownerId: string\n  isLoading: boolean\n  showMarkdown: boolean\n  version: number\n  tabOne: any\n  tabTwo: any\n  showTabOne: boolean\n  userFormDataSynId?: string,\n}\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n\n */\nclass Demo extends React.Component<{}, DemoState> {\n  entityFormRef: any\n  /**\n   * Maintain internal state of user session\n   */\n  constructor(props: any) {\n    super(props)\n    this.entityFormRef = React.createRef()\n    this.state = {\n      isLoading: true,\n      ownerId: '',\n      showMarkdown: true,\n      token: '',\n      version: 0,\n      showTabOne: false,\n      tabOne:\n      {\n        unitDescription: 'datum',\n        tableConfiguration: {\n          title: 'title',\n          synapseId: 'syn16787123',\n        },\n        menuConfig: [\n          {\n            title: 'Data',\n            facetDisplayValue: 'Organism',\n            facet: 'dataStatus',\n            sql: 'SELECT projectStatus, dataStatus, tumorType, diseaseFocus FROM syn16787123',\n          },\n          {\n            title: 'Data',\n            facetDisplayValue: 'Study',\n            facet: 'projectStatus',\n            sql: 'SELECT createdBy FROM syn16787123',\n          }\n        ],\n        rgbIndex: 2\n      }\n    ,\n      tabTwo: {\n        unitDescription: 'datum',\n        tableConfiguration: {\n          title: 'title',\n          synapseId: 'syn16858331',\n        },\n        menuConfig: [\n          {\n            facet: 'assay',\n            sql: 'SELECT * FROM syn16858331',\n          },\n          {\n            facet: 'dataType',\n            sql: 'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n          },\n          {\n            facet: 'diagnosis',\n            sql: 'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n          }\n        ] as MenuConfig[]\n        ,\n        rgbIndex: 5\n      }\n    }\n    this.getVersion = this.getVersion.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n    this.removeHandler = this.removeHandler.bind(this)\n  }\n\n\n  public onSubmitEntityForm() {\n    this.entityFormRef.current.submitForm()\n  }\n\n  public onEntityFormSubmitted(synId: string) {\n    this.setState({ userFormDataSynId: synId })\n  }\n\n  /**\n   * Get the current version of Synapse\n   */\n  public getVersion(): void {\n    // IMPORTANT: Your component should have a property (with default) to change the endpoint.  This is necessary for Synapse.org integration.\n    // Pass your endpoint through to the rpc call:\n    // SynapseClient.getVersion('https://repo-staging.prod.sagebase.org')\n    SynapseClient.getVersion()\n      .then((data: SynapseVersion) => this.setState({ version: data.version }))\n      .catch((error: any) => {\n        // Handle HTTPError.  Has statusCode and message.\n        console.error('Get version failed', error)\n      })\n  }\n  \n  /**\n   * Update internal state\n   * @param {Object} updatedState new state to be updated by the component\n   */\n  public handleChange(updatedState: {}): void {\n    this.setState(updatedState)\n  }\n\n  public removeHandler(): void {\n    this.setState({ showMarkdown: !this.state.showMarkdown })\n  }\n  \n  public componentDidMount() {\n    // Note:  All portals should do this once on the initial app load.\n    // This looks for the session token cookie (HttpOnly, unable to directly access), and initialize the session if it does exists.\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n    .then((sessionToken: any) => this.handleChange({ token: sessionToken }))\n    .catch((error: any) => {\n      console.error(error)\n    })\n    this.getVersion()\n  }\n  public render(): JSX.Element {\n    let token: string | undefined = ''\n    token = ''\n    return (\n      <div>\n        <p className=\"App-intro text-center\">Synapse production version: {this.state.version}</p>\n        {\n          (this.state.token && this.state.token !== '') &&\n          <div className=\"container\">\n            <h5>Upload File(s) Demo</h5>\n            <Uploader\n              token={this.state.token!}\n              parentContainerId=\"syn18987891\"\n            />\n            <hr />\n          </div>\n        }\n        {\n          (this.state.token && this.state.token !== '') &&\n          <div className=\"container\">\n            <h5>Download File Content Demo (syn12196718)</h5>\n            <FileContentDownloadUploadDemo\n              token={this.state.token!}\n              targetEntityId=\"syn12196718\"\n            />\n            <hr />\n          </div>\n        }\n        {\n          (this.state.token && this.state.token !== '') &&\n          <div className=\"container\">\n            <h5>Project Statistics Demo</h5>\n            <StatisticsPlot\n              token={this.state.token!}\n              request={ {\n                concreteType: 'org.sagebionetworks.repo.model.statistics.ProjectFilesStatisticsRequest',\n                objectId: 'syn5585645',\n                fileDownloads: true,\n                fileUploads: true\n              }}\n            />\n            <hr />\n          </div>\n        }\n        <div className=\"container\">\n          <button\n            className=\"btn btn-default\"\n            onClick={() => {this.setState({showTabOne: !this.state.showTabOne})}}\n          >\n            toggle config for query wrapper menu\n          </button>\n          <QueryWrapperMenu\n            isConsistent={true}\n            name={'Demo'}\n            token={SynapseClient.IS_OUTSIDE_SYNAPSE_ORG ? token! : this.state.token!}\n            unitDescription={this.state.showTabOne ? this.state.tabOne.unitDescription : this.state.tabTwo.unitDescription}\n            tableConfiguration={this.state.showTabOne ? this.state.tabOne.tableConfiguration : this.state.tabTwo.tableConfiguration}\n            menuConfig={this.state.showTabOne ? this.state.tabOne.menuConfig : this.state.tabTwo.menuConfig}\n            rgbIndex={this.state.showTabOne ? this.state.tabOne.rgbIndex : this.state.tabTwo.rgbIndex}\n            stackedBarChartConfiguration={\n              {\n                loadingScreen: <div/>\n              }\n            }\n          />\n        </div>\n      </div>\n    )\n  }\n}\nexport default Demo\n","import * as React from 'react'\nimport QueryWrapperMenu, { MenuConfig, QueryWrapperMenuProps } from '../../../lib/containers/QueryWrapperMenu'\nimport { SynapseConstants } from '../../../lib/utils'\nimport { GenericCardSchema } from '../../../lib/containers/GenericCard'\n\ntype DemoState = {\n  token: string\n  ownerId: string\n  isLoading: boolean\n  showMarkdown: boolean\n  version: number\n  tabOne: QueryWrapperMenuProps\n  tabTwo: QueryWrapperMenuProps\n  tabThree: QueryWrapperMenuProps\n  activeTab: number\n}\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nclass QueryWrapperMenuDemo extends React.Component<{rgbIndex: number}, DemoState> {\n  /**\n   * Maintain internal state of user session\n   */\n  constructor(props: any) {\n    super(props)\n    const experimentalSql = \"SELECT * FROM syn20337467 WHERE toolType = 'experimental' LIMIT 100\" \n    const computationalSql = \"SELECT * FROM syn20337467 WHERE toolType = 'computational' LIMIT 100\" \n    const genericCardSchema: GenericCardSchema = {\n      title: 'Title',\n      type: 'Generic Tool',\n      subTitle: 'softwareType',\n      description: 'summary',\n      icon: 'icon',\n      secondaryLabels: [\n        'contributor',\n        'diagnosis',\n        'program',\n      ]\n    }\n    this.state = {\n      isLoading: true,\n      ownerId: '',\n      showMarkdown: true,\n      activeTab: 1,\n      tabThree: {\n        stackedBarChartConfiguration: {\n          loadingScreen: <div> Im loading as fast I can! </div>\n        },\n        unitDescription: 'datum',\n        tableConfiguration: {\n          title: 'title',\n          synapseId: 'syn11346063'\n        },\n        searchConfiguration: {\n          searchable: [\n            {\n              columnName: 'study',\n              hintText: 'study name'\n            },\n          ]\n        },\n        menuConfig: [\n          {\n            facet: 'species',\n            sql: 'SELECT * FROM syn11346063 LIMIT 1000',\n          },\n          {\n            facet: 'study',\n            sql: 'SELECT * FROM syn11346063 limit 1000',\n          },\n          {\n            sql: 'SELECT * FROM syn11346063 limit 1000',\n          },\n        ] as MenuConfig[]\n        ,\n        rgbIndex: 5\n      },\n      tabTwo:\n      {\n        name: 'Demo',\n        unitDescription: 'persons',\n        cardConfiguration: {\n          genericCardSchema,\n          type: SynapseConstants.MEDIUM_USER_CARD,\n          loadingScreen: <div style={{height: 450}}> I'm loading as fast I can! </div>\n        },\n        rgbIndex: 1,\n        facetAliases: {\n          grant: 'Grant'\n        },\n        accordionConfig: [\n          {\n            name: 'Compuational',\n            cardConfiguration: {\n              genericCardSchema,\n              type: SynapseConstants.GENERIC_CARD,\n              loadingScreen: <div style={{height: 450}}> I'm loading as fast I can! </div>\n            },  \n            menuConfig: [\n              {\n                facet: 'grant',\n                sql: computationalSql,\n              },\n              {\n                facet: 'diagnosis',\n                sql: computationalSql,\n              },\n              {\n                facet: 'modelType',\n                sql: computationalSql,\n              },\n            ],\n          },\n          {\n            name: 'Experimental',\n            cardConfiguration: {\n              genericCardSchema,\n              type: SynapseConstants.GENERIC_CARD,\n              loadingScreen: <div style={{height: 450}}> I'm loading as fast I can! </div>\n            },  \n            menuConfig: [\n              {\n                facet: 'program',\n                sql: experimentalSql,\n              },\n              {\n                facet: 'reagentType',\n                sql: experimentalSql,\n              },\n              {\n                facet: 'softwareType',\n                sql: experimentalSql,\n              },\n            ],\n          },\n        ],\n      }\n    ,\n      tabOne: {\n        unitDescription: 'datum',\n        tableConfiguration: {\n          title: 'title',\n          synapseId: 'syn11346063'\n        },\n        searchConfiguration: {\n          searchable: [\n            {\n              columnName: 'study',\n              hintText: 'study name'\n            },\n          ]\n        },\n        menuConfig: [\n          {\n            facet: 'diagnosis',\n            sql: 'SELECT study, assay, count(distinct id) AS files, concat(organ) AS organs' +\n            ' FROM syn17024112 WHERE species=\\'Human\\' AND assay=\\'rnaSeq\\' group by 1,2 order by 3 desc limit 1000',\n          },\n          {\n            facet: 'PORTALS-712',\n            sql: 'SELECT dataType, assay, fileFormat, COUNT(distinct id) AS Files ' +\n              'FROM syn11346063 WHERE (study LIKE \\'%MODEL-AD_5XFAD%\\') GROUP BY 1, 2, 3 ORDER BY 4 DESC',\n          },\n          {\n            facet: 'PORTALS-803',\n            sql: 'SELECT diagnosis AS \"Diagnosis\", sex as \"Sex\", dataType as \"Data Type\", assay as \"Assay\", count(distinct(id)) as \"Files\", count(distinct(specimenID)) as \"Specimens\", count(distinct(individualID)) as \"Individuals\" FROM syn11346063 GROUP BY 1,2,3,4 ORDER BY 1 DESC',\n          },\n          {\n            facet: 'study',\n            sql: 'SELECT * FROM syn11346063 limit 1000',\n          },\n          // {\n          //   facet: 'dataType',\n          //   sql: 'SELECT id, fundingAgency, assay, diagnosis, dataType FROM syn16858331',\n          //   synapseId: 'syn16858331',\n          //   title: 'title',\n          //   unitDescription: 'descriptive unit'\n          // },\n        ] as MenuConfig[]\n        ,\n        rgbIndex: 5\n      }\n      ,\n      token: '',\n      version: 0\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.removeHandler = this.removeHandler.bind(this)\n    this.rgba2rgb = this.rgba2rgb.bind(this)\n  }\n\n  public rgba2rgb(background: number[], color: number[]) {\n    const alpha = color[3]\n    return [\n      Math.floor((1 - alpha) * background[0] + alpha * color[0] + 0.5),\n      Math.floor((1 - alpha) * background[1] + alpha * color[1] + 0.5),\n      Math.floor((1 - alpha) * background[2] + alpha * color[2] + 0.5)\n    ]\n  }\n\n  /**\n   * Update internal state\n   * @param {Object} updatedState new state to be updated by the component\n   */\n  public handleChange(updatedState: {}): void {\n    this.setState(updatedState)\n  }\n\n  public removeHandler(): void {\n    this.setState({ showMarkdown: !this.state.showMarkdown })\n  }\n\n  public render(): JSX.Element {\n    const { \n      activeTab\n    } = this.state\n    let props: QueryWrapperMenuProps = {} as QueryWrapperMenuProps\n    if (activeTab === 0) {\n      props = this.state.tabOne\n    } else if (activeTab === 1) {\n      props = this.state.tabTwo \n    } else {\n      props = this.state.tabThree\n    }\n    return (\n      <div className=\"container\">\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({activeTab: 0})}}\n        >\n          With Group By\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({activeTab: 1})}}\n        >\n          With Tools\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({activeTab: 2})}}\n        >\n          Standard\n        </button>\n        <h2>Demo of table</h2>\n          <QueryWrapperMenu\n            token={''}\n            isConsistent={true}\n            {...props}\n          />\n        </div>\n    )\n  }\n}\nexport default QueryWrapperMenuDemo\n","import * as React from 'react'\nimport CardContainer from './CardContainer'\nimport { QueryBundleRequest } from '../utils/jsonResponses/Table/QueryBundleRequest'\nimport { QueryResultBundle } from '../utils/jsonResponses/Table/QueryResultBundle'\nimport { SynapseClient, SynapseConstants } from '../utils'\nimport { cloneDeep } from '../utils/modules'\nimport { getNextPageOfData } from '../utils/modules/queryUtils'\nimport { GenericCardSchema, IconOptions } from './GenericCard'\nimport { insertConditionsFromSearchParams, KeyValue, SQLOperator } from '../utils/modules/sqlFunctions'\n\nexport interface CardLink {\n  baseURL: string\n  // the keys that will go into the url\n  URLColumnNames: string []\n}\n\n\nexport interface LabelLink extends CardLink {\n  // the columns whos value will be paired with the columns URLColumnNames\n  matchColumnName: string\n}\n\n// Specify the indices in the values [] that should point to links\nexport type LabelLinkConfig = LabelLink []\n\nexport type CommonCardProps = {\n  type: string\n  genericCardSchema?: GenericCardSchema\n  hasInternalLink?: boolean\n  iconOptions?: IconOptions\n  secondaryLabelLimit?: number\n  titleLinkConfig?: CardLink\n  labelLinkConfig?: LabelLinkConfig\n  loadingScreen?: React.FunctionComponent | JSX.Element\n}\n\nexport type CardContainerLogicProps = {\n  token?: string\n  limit?: number\n  title?: string\n  unitDescription?: string\n  sqlOperator?: SQLOperator\n  searchParams?: KeyValue\n  facet?: string\n  loadingScreen?: JSX.Element\n  genericCardSchema?: GenericCardSchema\n  backgroundColor?:string\n  isHeader?:boolean\n  sql: string\n} & CommonCardProps\n\ntype State = {\n  data: QueryResultBundle | undefined\n  isLoading: boolean\n  queryRequest: QueryBundleRequest\n  totalResultsNoFacet: number,\n  hasMoreData: boolean\n}\n\n/**\n * Class wraps around CardContainer and serves as a standalone logic container for rendering cards.\n * This same logic exists in QueryWrapper, but the two serve two distinct purposes, making this component\n * sufficiently distinct.\n *\n * @class CardContainerLogic\n * @extends {React.Component}\n */\nexport default class CardContainerLogic extends React.Component<CardContainerLogicProps, State> {\n\n  public static defaultProps = {\n    token: ''\n  }\n\n  public static defaultState = {\n    data: undefined,\n    isLoading: true,\n    queryRequest: {} as QueryBundleRequest,\n    totalResultsNoFacet: 0,\n    hasMoreData: true\n  }\n\n  constructor(props: CardContainerLogicProps) {\n    super(props)\n    this.executeInitialQueryRequest = this.executeInitialQueryRequest.bind(this)\n    this.getLastQueryRequest = this.getLastQueryRequest.bind(this)\n    this.getNextPageOfData = this.getNextPageOfData.bind(this)\n    this.state = CardContainerLogic.defaultState\n  }\n\n  /**\n   * Compute default query request\n   *\n   * @memberof QueryWrapper\n   */\n  public componentDidMount() {\n    this.executeInitialQueryRequest()\n  }\n\n  /**\n   * @memberof QueryWrapper\n   *\n   */\n  public componentDidUpdate(prevProps: CardContainerLogicProps) {\n    /**\n     *  If component updates and the token has changed (they signed in) then the data should be pulled in. Or if the\n     *  sql query has changed of the component then perform an update.\n     */\n\n    if (this.props.token !== '' && prevProps.token === '') {\n      this.executeInitialQueryRequest()\n    }\n    if (prevProps.sql !== this.props.sql) {\n      this.executeInitialQueryRequest()\n    }\n  }\n\n  /**\n   * Pass down a deep clone (so no side affects on the child's part) of the\n   * last query request made\n   *\n   * @returns\n   * @memberof QueryWrapper\n   */\n  public getLastQueryRequest(): QueryBundleRequest {\n    return cloneDeep(this.state.queryRequest)\n  }\n\n  /**\n   * Grab the next page of data, pulling in 25 more rows.\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public async getNextPageOfData(queryRequest: QueryBundleRequest) {\n    this.setState({\n      isLoading: true\n    })\n\n    await getNextPageOfData(queryRequest, this.state.data!, this.props.token)\n    .then(\n      (newState) => {\n        this.setState({\n          ...newState,\n          isLoading: false,\n          queryRequest: cloneDeep(queryRequest)\n        })\n      }\n    )\n  }\n\n  /**\n   * Execute the initial query passed into the component\n   *\n   * @param {*} queryRequest Query request as specified by\n   *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n   * @memberof QueryWrapper\n   */\n  public executeInitialQueryRequest() {\n    this.setState({\n      isLoading: true,\n    })\n\n    let sqlUsed = this.props.sql\n    if (this.props.searchParams) {\n      sqlUsed = insertConditionsFromSearchParams(this.props.searchParams, this.props.sql, this.props.sqlOperator)\n    }\n\n    // we don't set this in the state because it hardcodes the sql query, on componentDidUpdate\n    // we need the sql to change\n    const initQueryRequest: QueryBundleRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      partMask:\n        SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n        SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n        SynapseConstants.BUNDLE_MASK_QUERY_RESULTS |\n        SynapseConstants.BUNDLE_MASK_QUERY_COUNT\n        ,\n      query: {\n        sql: sqlUsed,\n        isConsistent: false,\n        limit: 25,\n        offset: 0,\n      }\n    }\n\n    SynapseClient\n      .getQueryTableResults(initQueryRequest, this.props.token)\n      .then(\n        (data: QueryResultBundle) => {\n          const queryRequestWithoutCount = cloneDeep(initQueryRequest)\n          queryRequestWithoutCount.partMask = (\n            SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n            SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n            SynapseConstants.BUNDLE_MASK_QUERY_RESULTS\n          )\n\n          const hasMoreData = data.queryResult.queryResults.rows.length === SynapseConstants.PAGE_SIZE\n          const newState = {\n            hasMoreData,\n            data,\n            queryRequest: queryRequestWithoutCount,\n            isLoading: false,\n            totalResultsNoFacet: data.queryCount!\n          }\n          this.setState(newState)\n        }\n      ).catch((err) => {\n        console.log('Failed to get data ', err)\n      })\n  }\n\n  /**\n   * Render the children without any formatting\n   */\n  public render() {\n    // only forward the necessary props\n    const {\n      sql,\n      searchParams,\n      token,\n      ...rest\n    } = this.props\n    return (\n      <CardContainer\n        {...rest}\n        data={this.state.data}\n        getLastQueryRequest={this.getLastQueryRequest}\n        getNextPageOfData={this.getNextPageOfData}\n        hasMoreData={this.state.hasMoreData}\n        isLoading={this.state.isLoading}\n      />\n    )\n  }\n\n}\n","export enum FileHandleAssociateType {\n  FileEntity = 'FileEntity',\n  TableEntity = 'TableEntity',\n  WikiAttachment = 'WikiAttachment',\n  WikiMarkdown = 'WikiMarkdown',\n  UserProfileAttachment = 'UserProfileAttachment',\n  MessageAttachment = 'MessageAttachment',\n  TeamAttachment = 'TeamAttachment',\n  SubmissionAttachment = 'SubmissionAttachment',\n  VerificationSubmission = 'VerificationSubmission',\n  AccessRequirementAttachment = 'AccessRequirementAttachment',\n  DataAccessRequestAttachment = 'DataAccessRequestAttachment',\n  DataAccessSubmissionAttachment = 'DataAccessSubmissionAttachment'\n}\n\nexport type FileHandleAssociation = {\n  fileHandleId:\tstring //\tThe ID of the FileHandle.\n  associateObjectId:\tstring //\tThe ID of the object associated with the file\n  associateObjectType:\tFileHandleAssociateType //\tEnumeration of all possible objects types that can be associated with a file.\n}","import * as React from 'react'\n\ntype BookmarksProps = {\n  footnotes: string\n}\n\nclass Bookmarks extends React.Component<BookmarksProps, {}> {\n\n  constructor(props: BookmarksProps) {\n    super(props)\n    this.renderBookmarks = this.renderBookmarks.bind(this)\n  }\n\n  /**\n   * Returns bookmarks\n   *\n   * @returns JSX for the embedded bookmarks in the markdown passed in as a prop\n   * @memberof Bookmarks\n   */\n  public renderBookmarks() {\n    const copyFootnotes: string = String(this.props.footnotes)\n\n    // find all the links embedded in the markdown below\n    const regex = /Synapse widget&gt;<\\/span>(.*)</g\n    let matchedGroup: RegExpExecArray | null\n    const output = []\n    // below we use regex.exec to find the find matched group containing the citation source\n    while ((matchedGroup = regex.exec(copyFootnotes))) {\n      output.push(matchedGroup[1])\n    }\n\n    // return all the links formatted accordingly\n    return output.map(\n      (el, index) => {\n        const isBeforeLastElement = index < output.length - 1\n        return (\n          <React.Fragment key={index}>\n            <button className=\"SRC-markdown-bookmark\" id={`bookmark${index}`}>[{index + 1}]</button>\n            <span dangerouslySetInnerHTML={{ __html: el }} />\n            {isBeforeLastElement && <br/>}\n          </React.Fragment>\n        )\n      }\n    )\n  }\n\n  public render() {\n    return (\n      <React.Fragment>\n        <hr />\n        {this.renderBookmarks()}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Bookmarks\n","import * as React from 'react'\nimport { BatchFileResult } from '../../utils/jsonResponses/BatchFileResult'\nimport { FileEntity } from '../../utils/jsonResponses/FileEntity'\nimport { FileHandle } from '../../utils/jsonResponses/FileHandle'\nimport { getEntity, getFiles } from '../../utils/SynapseClient'\nimport { BatchFileRequest } from '../../utils/jsonResponses/BatchFileRequest'\nimport { FileHandleAssociation, FileHandleAssociateType } from '../../utils/jsonResponses/FileHandleAssociation'\n\ntype SynapseImageProps = {\n  wikiId?: string\n  synapseId?: string\n  token?: string\n  fileName?: string\n  fileResults?: FileHandle []\n  params: any\n}\n\ntype SynapseImageState = {\n  preSignedURL: string\n}\n\nclass SynapseImage extends React.Component<SynapseImageProps, SynapseImageState> {\n\n  constructor(props: SynapseImageProps) {\n    super(props)\n    this.getEntity = this.getEntity.bind(this)\n    this.getSynapseFiles = this.getSynapseFiles.bind(this)\n    this.state = {\n      preSignedURL: ''\n    }\n  }\n\n  public getEntity() {\n    const { token, synapseId } = this.props\n    if (synapseId) {\n      getEntity<FileEntity>(token, synapseId).then(\n        // https://docs.synapse.org/rest/org/sagebionetworks/repo/model/FileEntity.html\n        (data: FileEntity) => {\n          const fileHandleAssociationList = [\n            {\n              associateObjectId: synapseId,\n              associateObjectType: FileHandleAssociateType.FileEntity,\n              fileHandleId: data.dataFileHandleId\n            }\n          ]\n          this.getSynapseFiles(fileHandleAssociationList, data.dataFileHandleId)\n        }\n      )\n    }\n  }\n  public getSynapseFiles(fileHandleAssociationList: FileHandleAssociation [], id: string) {\n    // overload the method for two different use cases, one where\n    // the image is attached to an entity and creates a list on the spot,\n    // the other where list is passed in from componentDidMount in MarkdownSynapse\n    const request: BatchFileRequest = {\n      includeFileHandles: false,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList\n    }\n    getFiles(request, this.props.token).then(\n      (data: BatchFileResult) => {\n        const { preSignedURL } = data.requestedFiles.filter(el => el.fileHandleId === id)[0] // this.matchToHandle(this.compareById(id, 'fileHandleId'), data.requestedFiles)\n        this.setState({\n          preSignedURL: preSignedURL\n        })\n      }\n    ).catch(\n      err => {\n        console.error('Error on getting image ', err)\n      }\n    )\n  }\n  public componentDidMount() {\n    if (!this.props.wikiId) {\n      // Get file handle as external attachment\n      this.getEntity()\n    } else {\n      // Can get presigned url right away from wiki association\n      const { fileName, fileResults = [] } = this.props\n      const { id } = fileResults.filter(el => el.fileName === fileName)[0]\n      const fileHandleAssociationList: FileHandleAssociation [] = [\n        {\n          associateObjectId: this.props.wikiId,\n          associateObjectType: FileHandleAssociateType.WikiAttachment,\n          fileHandleId: id\n        }\n      ]\n      this.getSynapseFiles(fileHandleAssociationList, id)\n    }\n  }\n\n  public render() {\n    const imgStyle: React.CSSProperties = {}\n    const { params = {}} = this.props\n    const { align = '' } = params\n    const alignLowerCase = align.toLowerCase()\n    let className = ''\n    if (alignLowerCase === 'left') {\n      className = 'floatLeft'\n    }\n    if (alignLowerCase === 'right') {\n      className = 'floatright'\n    }\n    if (alignLowerCase === 'center') {\n      className = 'align-center'\n    }\n    if (!this.state.preSignedURL) {\n      return null\n    }\n    return (\n      <React.Fragment>\n        <img\n          alt=\"synapse\"\n          className={\"img-fluid  \"  + className}\n          src={this.state.preSignedURL}\n          style={imgStyle}\n        />\n      </React.Fragment>\n    )\n  }\n}\nexport default SynapseImage\n","import * as React from 'react'\n// tslint:disable-next-line:import-name\nimport Plotly from 'plotly.js-basic-dist'\n// tslint:disable-next-line:import-name\nimport createPlotlyComponent from 'react-plotly.js/factory'\nimport { QueryResultBundle } from '../../utils/jsonResponses/Table/QueryResultBundle'\nimport { getFullQueryTableResults } from '../../utils/SynapseClient'\nimport { SynapseConstants } from '../../utils/'\nconst Plot = createPlotlyComponent(Plotly)\n\ntype SynapsePlotProps = {\n  token?: string\n  ownerId?: string\n  wikiId?: string\n  widgetparamsMapped?: any\n}\n\ntype SynapsePlotState = {\n  isLoaded: boolean\n  queryData: QueryResultBundle\n}\n\nclass SynapsePlot extends React.Component<SynapsePlotProps, SynapsePlotState> {\n\n  constructor(props: SynapsePlotProps) {\n    super(props)\n    this.state = {\n      isLoaded: false,\n      queryData: {} as QueryResultBundle\n    }\n    this.fetchPlotlyData = this.fetchPlotlyData.bind(this)\n    this.showPlot = this.showPlot.bind(this)\n  }\n\n  public componentDidMount() {\n    this.fetchPlotlyData()\n  }\n  /**\n   * Get data for plotly\n   *\n   * @returns data corresponding to plotly widget\n   */\n  public fetchPlotlyData() {\n    const { token } = this.props\n    const { query } = this.props.widgetparamsMapped\n    const queryRequest = {\n      concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n      partMask: SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n      query: {\n        sql: query\n      }\n    }\n    getFullQueryTableResults(queryRequest, token).then(\n      (data: QueryResultBundle) => {\n        this.setState({\n          isLoaded: true,\n          queryData: data\n        })\n      }\n    ).catch(\n      (err: any) => {\n        console.log('Error on full table query ', err)\n      }\n    )\n  }\n\n  public showPlot() {\n    if (!this.state.isLoaded) {\n      return\n    }\n    const {\n            title,\n            xtitle,\n            ytitle,\n            type,\n            xaxistype,\n            showlegend\n        } = this.props.widgetparamsMapped\n    const queryData = this.state\n    const isHorizontal = this.props.widgetparamsMapped.horizontal.toLowerCase()\n    const layout: any = {\n      showlegend,\n      title\n    }\n    if (xtitle) {\n      layout.xaxis = {\n        title: xtitle\n      }\n    }\n    if (xaxistype) {\n      layout.xaxis = {\n        ...layout.xaxis,\n        xaxistype: xaxistype.toLowerCase()\n      }\n    }\n    if (ytitle) {\n      layout.yaxis = {\n        title: ytitle\n      }\n    }\n    // init plot_data\n    const plotData: any = []\n    const orientation = isHorizontal ? 'v' : 'h'\n    const headers = queryData.queryData.queryResult.queryResults.headers\n    for (let i = 0; i < headers.length - 1; i += 1) {\n      // make an entry for each set of data points\n      plotData[i] = {\n        orientation,\n        name: headers[i + 1].name,\n        type: type.toLowerCase(),\n        x: [],\n        y: []\n      }\n    }\n    // grab all the data\n    for (const row of queryData.queryData.queryResult.queryResults.rows) {\n      for (let j = 1; j < row.values.length; j += 1) {\n        // create pairs of data\n        const rowValues: any = row.values\n        plotData[j - 1].x.push(rowValues[0])\n        plotData[j - 1].y.push(rowValues[j])\n      }\n    }\n    return <Plot layout={layout} data={plotData} />\n  }\n\n  public render() {\n    if (!this.state.isLoaded) {\n      return null\n    }\n    return (this.showPlot())\n  }\n}\nexport default SynapsePlot\n","export enum StepStateEnum {\n  TODO,\n  PROGRESS,\n  COMPLETED,\n  EXCLUDED,\n  ERROR\n}\n\nexport type Step = {\n  id: string;\n  title: string;\n  order: number;\n  state: StepStateEnum;\n  inProgress: boolean;\n  rules: any[];\n  default: string;\n  excluded?: boolean;\n  final?: boolean;\n  description?: string;\n  copy?: string;\n  static?: boolean;\n  child?: boolean;\n  children?: string[];\n};\n\nexport enum NavActionEnum {\n  PREVIOUS,\n  NEXT,\n  GO_TO_STEP,\n  SAVE,\n  SUBMIT,\n  VALIDATE,\n  NONE\n}\n\nexport enum StatusEnum {\n  PROGRESS,\n  ERROR,\n  SAVE_SUCCESS,\n  SUBMIT_SUCCESS,\n  ERROR_CRITICAL\n}\n\nexport interface SummaryFormat {\n  screen: Step;\n  label: string;\n  value: string;\n}\n","import * as React from 'react'\nimport { FileHandleResults } from '../utils/jsonResponses/FileHandleResults'\nimport { SynapseClient, SynapseConstants } from '../utils/'\nimport Bookmarks from './widgets/Bookmarks'\nimport SynapseImage from './widgets/SynapseImage'\nimport SynapsePlot from './widgets/SynapsePlot'\nimport UserCard from './UserCard'\nimport { WikiPage } from '../utils/jsonResponses/WikiPage'\nconst TOC_CLASS = {\n  1: 'toc-indent1',\n  2: 'toc-indent2',\n  3: 'toc-indent3',\n  4: 'toc-indent4',\n  5: 'toc-indent5',\n  6: 'toc-indent6'\n}\n\ndeclare var katex: any\n\ndeclare var markdownitSynapse: any\ndeclare var markdownit: any\ndeclare var markdownitSub: any\ndeclare var markdownitSup: any\ndeclare var markdownitCentertext: any\ndeclare var markdownitSynapseHeading: any\ndeclare var markdownitSynapseTable: any\ndeclare var markdownitStrikethroughAlt: any\ndeclare var markdownitContainer: any\ndeclare var markdownitEmphasisAlt: any\ndeclare var markdownitInlineComments: any\ndeclare var markdownitBr: any\ndeclare var sanitizeHtml: any\n\ndeclare var markdownitMath: any\n\nexport type MarkdownSynapseProps = {\n  errorMessageView?: React.FunctionComponent;\n  token?: string;\n  ownerId?: string;\n  wikiId?: string;\n  markdown?: string;\n}\nconst md = markdownit({ html: true })\n\ntype MarkdownSynapseState = {\n  md: any;\n  data: Partial<WikiPage>\n  fileHandles?: FileHandleResults;\n  errorMessage: string;\n}\n/**\n * Basic Markdown functionality for Synapse, supporting Images/Plots/References/Bookmarks/buttonlinks\n *\n * @class Markdown\n * @extends {React.Component}\n */\nexport default class MarkdownSynapse extends React.Component<MarkdownSynapseProps, MarkdownSynapseState> {\n  public markupRef: React.RefObject<HTMLInputElement>\n\n  /**\n   * Creates an instance of Markdown.\n   * @param {*} props\n   */\n  constructor(props: MarkdownSynapseProps) {\n    super(props)\n    // markdownitSynapse wraps around markdownit object and uses its own dependencies\n    markdownitSynapse.init_markdown_it(md,\n                                       markdownitSub,\n                                       markdownitSup,\n                                       markdownitCentertext,\n                                       markdownitSynapseHeading,\n                                       markdownitSynapseTable,\n                                       markdownitStrikethroughAlt,\n                                       markdownitContainer,\n                                       markdownitEmphasisAlt,\n                                       markdownitInlineComments,\n                                       markdownitBr\n    )\n\n    const mathSuffix = ''\n    // Update the internal markdownit object with the wrapped synapse object\n    md.use(markdownitSynapse, mathSuffix).use(markdownitMath, mathSuffix)\n    const data: any = {}\n    if (this.props.markdown) {\n      data.markdown = this.props.markdown\n    }\n    this.state = {\n      md,\n      errorMessage: '',\n      fileHandles: undefined,\n      data,\n    }\n    this.markupRef = React.createRef()\n    this.handleLinkClicks = this.handleLinkClicks.bind(this)\n    // handle widgets and math markdown\n    this.processWidgets = this.processWidgets.bind(this)\n    this.processWidgetOrDomElement = this.processWidgetOrDomElement.bind(this)\n    this.processMath = this.processMath.bind(this)\n    // handle init calls to get wiki related items\n    this.getWikiAttachments = this.getWikiAttachments.bind(this)\n    this.getWikiPageMarkdown = this.getWikiPageMarkdown.bind(this)\n    // handle rendering widgets\n    this.renderWidget = this.renderWidget.bind(this)\n    this.renderSynapseButton = this.renderSynapseButton.bind(this)\n    this.renderSynapseImage = this.renderSynapseImage.bind(this)\n    this.renderSynapsePlot = this.renderSynapsePlot.bind(this)\n    this.renderSynapseTOC = this.renderSynapseTOC.bind(this)\n    this.getErrorView = this.getErrorView.bind(this)\n    this.createHTML = this.createHTML.bind(this)\n    this.addBookmarks = this.addBookmarks.bind(this)\n    this.addIdsToReferenceWidgets = this.addIdsToReferenceWidgets.bind(this)\n    this.addIdsToTocWidgets = this.addIdsToTocWidgets.bind(this)\n  }\n\n  public componentWillUnmount() {\n    // @ts-ignore TODO: find better documentation on typescript/react event params\n    this.markupRef.current!.removeEventListener('click', this.handleLinkClicks)\n  }\n\n  // Manually handle clicks to anchor tags where the scrollto isn't handled by page hash\n  public handleLinkClicks(event: React.MouseEvent<HTMLElement>) {\n\n    const genericElement = event.target as HTMLElement\n    if (genericElement.tagName === 'A' || genericElement.tagName === 'BUTTON') {\n      const anchor = event.target as HTMLAnchorElement\n      if (anchor.id.substring(0, 3) === 'ref') {\n        event.preventDefault()\n        // its a reference, so we scroll to the appropriate bookmark\n        const referenceNumber = Number(event.currentTarget.id.substring(3)) // e.g. ref2 => '2'\n        const goTo = this.markupRef.current!.querySelector(\n          `#bookmark${referenceNumber}`\n        )\n        try {\n          goTo!.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n          })\n        } catch (e) {\n          console.log('error on scroll', e)\n        }\n      } else if (event.currentTarget.id !== null && anchor.getAttribute('data-anchor')) {\n        event.preventDefault()\n        // handle table of contents widget\n        const idOfContent = anchor.getAttribute('data-anchor')\n        const goTo = this.markupRef.current!.querySelector(`#${idOfContent}`)\n        try {\n          goTo!.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'center'\n          })\n        } catch (e) {\n          console.log('error on scroll', e)\n        }\n      }\n    }\n  }\n\n  /**\n   * Given input text, generate markdown object to be passed onto inner html of some container.\n   * @param {String} markdown The text being written in plain markdown\n   * @returns {Object} Dictionary to be passed into dangerouslySetInnerHTML with markdown text\n   */\n  public createHTML(markdown?: string) {\n    if (!markdown) {\n      return { __html: '' }\n    }\n    const initText = this.state.md.render(markdown)\n    const cleanText = sanitizeHtml(initText, {\n      allowedAttributes: {\n        a: ['href', 'target'],\n        button: ['class'],\n        div: ['class', 'style'],\n        h1: ['toc'],\n        h2: ['toc'],\n        h3: ['toc'],\n        h4: ['toc'],\n        h5: ['toc'],\n        h6: ['toc'],\n        li: ['class'],\n        ol: ['class'],\n        span: ['*'],\n        table: ['class'],\n        th: ['class'],\n        thead: ['class'],\n        ul: ['class']\n      },\n      allowedTags: [\n        'span',\n        'code',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'p',\n        'b',\n        'i',\n        'em',\n        'strong',\n        'a',\n        'id',\n        'table',\n        'tr',\n        'td',\n        'tbody',\n        'th',\n        'thead',\n        'button',\n        'div',\n        'image',\n        'ol',\n        'ul',\n        'li',\n        'svg',\n        'g',\n        'br',\n        'hr',\n        'summary',\n        'details'\n      ]\n    })\n    return { __html: cleanText }\n  }\n\n  /**\n   * Find all math identified elements of the form [id^=\\\"mathjax-\\\"]\n   * (e.g. <dom element id=\"mathjax-10\"> text </dom element>)\n   * and transform them to their math markedown equivalents\n   */\n  public processMath() {\n    if (!this.markupRef.current) {\n      return\n    }\n    // use regex to grab all elements\n    const mathExpressions = this.markupRef.current.querySelectorAll(\n      '[id^=\"mathjax-\"]'\n    )\n    // go through all obtained elements and transform them with katex\n    mathExpressions.forEach((element: any) => {\n      katex.render(element.textContent, element, {\n        delimiters: [\n          {\n            display: true,\n            left: '$$',\n            right: '$$'\n          },\n          {\n            display: false,\n            left: '\\\\(',\n            right: '\\\\)'\n          },\n          {\n            display: true,\n            left: '\\\\[',\n            right: '\\\\]'\n          }\n        ],\n        throwOnError: false\n      })\n    })\n  }\n  /**\n   * Process all the corresponding bookmark tags of the references made throughout the page\n   *\n   * @memberof MarkdownSynapse\n   */\n  public addBookmarks() {\n    markdownitSynapse.resetFootnotes()\n    this.createHTML(this.state.data.markdown)\n    const footnotesHtml = this.createHTML(markdownitSynapse.footnotes()).__html\n    if (footnotesHtml.length > 0) {\n      return (<Bookmarks footnotes={footnotesHtml} />)\n    }\n    // ts doesn't like functions without explicit return statements\n    return\n  }\n\n  /**\n   * Get wiki page markdown and file attachment handles\n   */\n  public async getWikiPageMarkdown() {\n    const { ownerId, wikiId = '', token } = this.props\n    try {\n      const wikiPage = await SynapseClient.getEntityWiki(token,ownerId,wikiId)\n      try {\n        const fileHandles = await this.getWikiAttachments(wikiId ? wikiId: wikiPage.id)\n        this.setState({\n          data: wikiPage,\n          fileHandles\n        })\n      } catch(fileHandlesErr) {\n        console.error('fileHandlesErr = ', fileHandlesErr)\n      }\n    } catch (err) {\n      console.error('Error on wiki markdown load\\n', err)\n    }\n}\n  public async getWikiAttachments(wikiId: string) {\n    const {\n      token,\n      ownerId,\n    } = this.props\n    if (!ownerId) {\n      console.error('Cannot get wiki attachments without ownerId on Markdown Component')\n      return undefined\n    }\n    return await SynapseClient.getWikiAttachmentsFromEntity(\n      token,\n      ownerId,\n      wikiId\n    ).then((data) => {\n      return data\n    })\n    .catch((err) => {\n      this.setState({\n        errorMessage: err.reason\n      })\n      console.error('Error on wiki attachment load ', err)\n      return undefined\n    })\n  }\n  /**\n   * If theres an error loading the wiki page show an informative message\n   * likely a priveledge issue -- (e.g. not signed-in)\n   *\n   * @returns view that presents error message on error, otherwise null\n   */\n  public getErrorView() {\n    if (this.state.errorMessage && this.props.errorMessageView) {\n      const ErrorView = this.props.errorMessageView as React.FC\n      return (\n        <ErrorView>\n          {this.state.errorMessage}\n        </ErrorView>\n      )\n    }\n    return\n  }\n\n  public addIdsToReferenceWidgets(text: string) {\n    const referenceRegex = /<span id=\"wikiReference.*?<span data-widgetparams.*?span>/g\n    let referenceCount = 1\n\n    return text.replace(\n      referenceRegex,\n      () => {\n        // replace all reference tags with id's of the form id=\"ref<number>\"\" that we can read onClick\n        const current = referenceCount\n        referenceCount += 1\n        return `<a href=\"\" id=\"ref${current}\">[${current}]</a>`\n      }\n    )\n  }\n\n  public addIdsToTocWidgets(text: string) {\n    const tocId = 'SRC-header-'\n    let tocIdCount = 1\n    const TOC_HEADER_REGEX = /<h[1-6] toc=\"true\">.*<\\/h[1-6]>/gm\n\n    return text.replace(TOC_HEADER_REGEX, (match: string) => {\n      // replace with id of the form id=\"toc\" so we can read them with onclick events\n      const curTocId = tocIdCount\n      tocIdCount += 1\n      const matchWithId = `${match.substring(0, 3)} id=\"${tocId}${curTocId}\"${match.substring(3)}`\n      return matchWithId\n    })\n  }\n\n  /**\n   * The 'main' method of this class that process all the markdown and transforms it to the appropriate\n   * Synapse widgets.\n   *\n   * @returns JSX of the markdown into widgets\n   * @memberof MarkdownSynapse\n   */\n  public processWidgets() {\n    // create initial markup\n    let markup = this.createHTML(this.state.data.markdown).__html\n    // process reference widgets\n    markup = this.addIdsToReferenceWidgets(markup)\n    // process table of contents widgets\n    markup = this.addIdsToTocWidgets(markup)\n\n    // capture and process all other widgets\n    // (<span data-widgetparams.*?span>) captures widgets\n    const widgetRegex = /(<span data-widgetparams.*?span>)/\n    // widgets is an array of either plain text/html or specific synapse markdown\n    const widgets = markup.split(widgetRegex)\n    if (markup.length > 0) {\n      return this.processWidgetOrDomElement(widgets, markup)\n    }\n    return\n  }\n\n  /**\n   *  When the markdown string is transfered over the network certain characters get transformed,\n   * this does a simple transformation back to the original user's string.\n   *\n   * @param {string} xml\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public decodeXml(xml: string) {\n    const escapedOneToXmlSpecialMap = {\n      '&amp;': '&',\n      '&gt;': '>',\n      '&lt;': '<',\n      '&quot;': '\"'\n    }\n    return xml.replace(/(&quot;|&lt;|&gt;|&amp;)/g, (str, item) => {\n      return escapedOneToXmlSpecialMap[item]\n    })\n  }\n\n  /**\n   * Given widgetMap renders it in a React component (or originalMarkup in special cases.)\n   *\n   * @param {string} widgetMatch The synapse widget to be rendered\n   * @param {string} originalMarkup The original markup text, this is a special case for widgets that\n   * are html specific.\n   * @returns JSX of the widget to render\n   * @memberof MarkdownSynapse\n   */\n  public processWidgetMappings(widgetMatch: string, originalMarkup: string) {\n    // General workflow -\n    //   1. Capture widget parameters\n    //   2. Transform any widget xml parameters to standard text\n    //   3. Split those parameters into a map\n    //   4. Render that widget based on its parameters\n\n    // steps 1,2\n    const widgetParamsRegex = /data-widgetparams=(\"(.*?)\")/\n    const widgetParamsMatchWithXML = widgetMatch.match(widgetParamsRegex)\n    const widgetParamsString = this.decodeXml(widgetParamsMatchWithXML![2])\n\n    // widgetParamsString look like {<widget>?param1=xxx&param2=yyy}\n    const questionIndex = widgetParamsString.indexOf('?')\n    if (questionIndex === -1) {\n      // e.g. toc is passed, there are no params\n      return this.renderWidget(widgetParamsString, {}, originalMarkup)\n    }\n    const widgetType = widgetParamsString.substring(0, questionIndex)\n    const widgetparamsMapped = {}\n    // map out params and their values\n    widgetParamsString\n      .substring(questionIndex + 1)\n      .split('&')\n      .forEach((keyPair) => {\n        let [key, value] = keyPair.split('=')\n        value = decodeURIComponent(value)\n        widgetparamsMapped[key] = value\n      })\n    return this.renderWidget(widgetType, widgetparamsMapped, originalMarkup)\n  }\n\n  /**\n   * Takes in widgetsToBe and parse it out to its respective html element\n   *\n   * @param {string[]} widgetsToBe This is an array of either synapse widgets, e.g. {plot?=...} or plain html\n   * that is not going to be process further.\n   * @param {string} originalMarkup This is the original markup that's maintained only because the table of contents\n   * widget renderer relies on it.\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public processWidgetOrDomElement(widgetsToBe: string[], originalMarkup: string) {\n    const widgets = []\n    let index = 0\n    for (const text of widgetsToBe) {\n      // test if widget is present\n      if (text.indexOf('<span data-widgetparams') !== -1) {\n        // process widget\n        widgets.push(this.processWidgetMappings(text, originalMarkup))\n      } else {\n        // Else its plain html/text.\n        \n        /* \n           Note-- variable `element` introduces a major bug which is that there can be no synapse widgets\n           contained inside html directly.\n            \n           .e.g\n                input:           <a> <span widget-params=\"....\"> </a>\n                expected output: <a> <SynapseWidget/> </a>\n                current output:  <a></a> <SynapseWidget> <a></a>\n           \n           There needs to be a complete rework of the rendering to recursively process the markdown.\n           Along the lines of -\n            - Tokenize the html, recurse on it until theres a leaf, render that as an html element or widget\n        */ \n        const key = index.toString() + text\n        const element = <span key={key} dangerouslySetInnerHTML={{ __html: text }} />\n        widgets.push(\n          element\n        )\n        index += 1\n      }\n    }\n    return widgets\n  }\n\n  /**\n   *  Given widgetType renders the apppropriate widget\n   *\n   * @param {string} widgetType The type of synapse widget. (e.g. 'image', 'plot')\n   * @param {*} widgetparamsMapped The parameters for this widget\n   * @param {string} originalMarkup The original markup.\n   * @returns\n   * @memberof MarkdownSynapse\n   */\n  public renderWidget(\n    widgetType: string,\n    widgetparamsMapped: any,\n    originalMarkup: string\n  ) {\n    // we make keys out of the widget params\n    const key = JSON.stringify(widgetparamsMapped)\n    widgetparamsMapped.reactKey = key\n    switch (widgetType) {\n      case 'buttonlink':\n        return this.renderSynapseButton(widgetparamsMapped)\n      case 'image':\n        return this.renderSynapseImage(widgetparamsMapped)\n      case 'plot':\n        return this.renderSynapsePlot(widgetparamsMapped)\n      case 'toc':\n        return this.renderSynapseTOC(originalMarkup)\n      case 'badge':\n        return this.renderUserBadge(widgetparamsMapped)\n      default:\n        return\n    }\n  }\n\n  public renderSynapseButton(widgetparamsMapped: any) {\n    let buttonClasses = ''\n    const {\n      align = '',\n      highlight = '',\n    } = widgetparamsMapped\n    const alignLowerCase = align.toLowerCase()\n    if (alignLowerCase === 'left') {\n      buttonClasses += 'floatLeft '\n    }\n    if (alignLowerCase === 'right') {\n      buttonClasses += 'floatright '\n    }\n    if (highlight === 'true') {\n      buttonClasses += ' SRC-primary-button '\n    } else {\n      buttonClasses += 'SRC-light-button '\n    }\n    if (alignLowerCase === 'center') {\n      return (\n        <div style={{textAlign: 'center'}}>\n          <a\n            key={widgetparamsMapped.reactKey}\n            href={widgetparamsMapped.url}\n            className={\"SRC-standard-button-shape \" +  buttonClasses}\n            role=\"button\"\n          >\n            {widgetparamsMapped.text}\n          </a>\n        </div>\n      )\n    }\n    return (\n      <a\n        key={widgetparamsMapped.reactKey}\n        href={widgetparamsMapped.url}\n        className={\"SRC-standard-button-shape \" +  buttonClasses}\n        role=\"button\"\n      >\n        {widgetparamsMapped.text}\n      </a>\n    )\n  }\n  public renderSynapsePlot(widgetparamsMapped: any) {\n    return (\n      <SynapsePlot\n        key={widgetparamsMapped.reactKey}\n        token={this.props.token}\n        ownerId={this.props.ownerId}\n        wikiId={this.props.wikiId || this.state.data.id}\n        widgetparamsMapped={widgetparamsMapped}\n      />\n    )\n  }\n\n  public renderSynapseImage(widgetparamsMapped: any) {\n    const { reactKey } = widgetparamsMapped\n    if (widgetparamsMapped.fileName) {\n      if (!this.state.fileHandles) {\n        // ensure files are loaded\n        return\n      }\n      // if file name is attached then the fileHandle ID is located\n      // in this wiki's file attachment list\n      return (\n        <SynapseImage\n          params={widgetparamsMapped}\n          key={reactKey}\n          token={this.props.token}\n          fileName={widgetparamsMapped.fileName}\n          wikiId={this.props.wikiId || this.state.data.id}\n          fileResults={this.state.fileHandles.list}\n        />\n      )\n    }\n    if (widgetparamsMapped.synapseId) {\n      // otherwise this image's fileHandle ID is not located\n      // in the file attachment list and will be loaded first\n      return (\n        <SynapseImage\n          params={widgetparamsMapped}\n          key={reactKey}\n          token={this.props.token}\n          synapseId={widgetparamsMapped.synapseId}\n        />\n      )\n    }\n    return\n  }\n  public renderSynapseTOC(originalMarkup: string) {\n    const elements: any[] = []\n    const TOC_HEADER_REGEX_WITH_ID = /<h([1-6]) id=\"(.*)\" .*toc=\"true\">(.*)<\\/h[1-6]>/gm\n    let text = ''\n    originalMarkup.replace(TOC_HEADER_REGEX_WITH_ID, (p1, p2, p3, p4) => {\n      text += p4\n      elements.push(\n        <div key={p4}>\n          <a className={`link ${TOC_CLASS[Number(p2)]}`} data-anchor={p3}>\n            {' '}{p4}{' '}\n          </a>\n        </div>\n      )\n      return ''\n    })\n    return (<div key={text}>{elements}</div>)\n  }\n\n  public renderUserBadge(widgetparamsMapped: any) {\n    return (\n      <UserCard\n        key={JSON.stringify(widgetparamsMapped)}\n        size={SynapseConstants.SMALL_USER_CARD}\n        alias={widgetparamsMapped.alias}\n      />\n    )\n  }\n\n  public async componentDidMount() {\n    if (this.state.data.markdown) {\n      return\n    }\n    // we use this.markupRef.current && because in testing environment refs aren't defined\n    // @ts-ignore\n    this.markupRef.current && this.markupRef.current!.addEventListener('click', this.handleLinkClicks)\n    // unpack and set default value if not specified\n    // get wiki attachments\n    await this.getWikiPageMarkdown()\n    this.processMath()\n  }\n\n  // on component update find and re-render the math/widget items accordingly\n  public async componentDidUpdate(prevProps: MarkdownSynapseProps) {\n    let shouldUpdate = this.props.token !== prevProps.token\n    shouldUpdate = shouldUpdate || (this.props.ownerId !== prevProps.ownerId)\n    shouldUpdate = shouldUpdate || (this.props.wikiId !== prevProps.wikiId)\n\n    // we have to carefully update the component so it doesn't encounter an infinite loop\n    if (shouldUpdate) {\n      await this.getWikiPageMarkdown()\n    }\n    this.processMath()\n  }\n\n  public render() {\n    return (\n      <div className=\"markdown\" ref={this.markupRef}>\n        {this.getErrorView()}\n        <span>{this.processWidgets()}</span>\n        <div>{this.addBookmarks()}</div>\n      </div>\n    )\n  }\n}\n","// EntityForm:\n// Will generate a Form (based on your schema files).\n// Gathers user input (including files)\n// Will give you the Synapse ID of the FileEntity that contains the user form data.\nimport * as React from 'react'\nimport Form from 'react-jsonschema-form'\nimport { UserProfile } from '../utils/jsonResponses/UserProfile'\nimport { SynapseClient } from '../utils'\nimport { FileEntity } from '../utils/jsonResponses/FileEntity'\nimport { EntityId } from '../utils/jsonResponses/EntityId'\nimport { EntityLookupRequest } from '../utils/jsonResponses/EntityLookupRequest'\n\nexport type EntityFormProps = {\n  // Provide the parent container (folder/project), that should contain a folder (named <user_id>) that this user can write to.\n  parentContainerId: string,\n  formSchemaEntityId: string, // Synapse file that contains the form schema.\n  formUiSchemaEntityId: string, // Synapse file that contains the form ui schema.\n  initFormData: boolean // If true, it indicates that you’d like to download and pre-fill the form with the user's previous response.\n  token?: string, // user's session token\n  synIdCallback: (synId: string) => void, // callback.  Once the form output has been saved to a FileEntity, will send synID back\n}\ntype EntityFormState = {\n  error?: any,\n  isLoading?: boolean,\n  successfullyUploaded: boolean,\n  containerId?: string,\n  userprofile?: UserProfile,\n  currentFileEntity?: FileEntity, // file holding user form data\n  formData?: any, // form data that prepopulates the form\n  formSchema?: any, // schema that drives the form\n  formUiSchema?: any, // ui schema that directs how to render the form elements\n}\n\nexport default class EntityForm\n  extends React.Component<EntityFormProps, EntityFormState> {\n  formRef: any\n\n  constructor(props: EntityFormProps) {\n    super(props)\n    this.formRef = React.createRef()\n    this.state = {\n      isLoading: true,\n      successfullyUploaded: false,\n    }\n  }\n\n  componentDidMount() {\n    this.refresh()\n  }\n\n  componentDidUpdate(prevProps: any) {\n    const shouldUpdate = this.props.token !== prevProps.token\n    if (shouldUpdate) {\n      this.refresh()\n    }\n  }\n\n  submitForm = () => {\n    this.formRef.current.submit()\n  }\n\n  refresh = () => {\n    if (this.props.token) {\n      const promises = [\n        SynapseClient.getUserProfile(this.props.token),\n        SynapseClient.getEntity(this.props.token, this.props.formSchemaEntityId),\n        SynapseClient.getEntity(this.props.token, this.props.formUiSchemaEntityId),\n      ] as Promise<any> []\n      Promise.all(promises).then((values) => {\n        const userprofile: UserProfile = values[0]\n        this.getTargetContainer(userprofile, this.props.token!).then((targetContainerId: string) => {\n          const formSchemaFileEntity: FileEntity = values[1]\n          const formUiSchemaFileEntity: FileEntity = values[2]\n          this.getSchemaFileContent(targetContainerId, formSchemaFileEntity, formUiSchemaFileEntity)\n        })\n      }).catch((error) => {\n        this.onError(error)\n      })\n    }\n  }\n\n  getSchemaFileContent = (\n    targetFolderId: string,\n    formSchemaFileEntity: FileEntity,\n    formUiSchemaFileEntity: FileEntity\n  ) => {\n    const promises = [\n      SynapseClient.getFileEntityContent(this.props.token!, formSchemaFileEntity),\n      SynapseClient.getFileEntityContent(this.props.token!, formUiSchemaFileEntity),\n    ]\n    Promise.all(promises).then((values) => {\n      const formSchemaContent = JSON.parse(values[0])\n      const formUiSchemaContent = JSON.parse(values[1])\n      this.getExistingFileData(targetFolderId, formSchemaContent, formUiSchemaContent)\n    }).catch((error) => {\n      this.onError(error)\n    })\n  }\n\n  getExistingFileData = (targetFolderId: string, formSchemaContent: any, formUiSchemaContent: any) => {\n    // if data already exists, save a reference to the existing entity and prefill the form\n    const fileName = `${formSchemaContent.title}.json`\n    const entityLookupRequest = { entityName: fileName, parentId: targetFolderId }\n    let formData: any\n    let currentFileEntity: FileEntity\n    SynapseClient.lookupChildEntity(entityLookupRequest, this.props.token).then((entityId:EntityId) => {\n      // ok, found the existing file\n      return SynapseClient.getEntity<FileEntity>(this.props.token, entityId.id).then((entity) => {\n        currentFileEntity = entity\n        if (this.props.initFormData) {\n          return SynapseClient.getFileEntityContent(this.props.token!, currentFileEntity).then((existingFileData) => {\n            formData = JSON.parse(existingFileData)\n          })\n        }\n        // else we're done\n        return Promise.resolve()\n      })\n    }).finally(() => {\n      this.setState(\n        {\n          formData,\n          currentFileEntity,\n          formSchema: formSchemaContent,\n          formUiSchema: formUiSchemaContent\n        })\n    })\n  }\n\n  getTargetContainer = async (userprofile: UserProfile, token: string) => {\n    const entityLookupRequest: EntityLookupRequest = {\n      entityName: userprofile.ownerId,\n      parentId: this.props.parentContainerId\n    }\n    try {\n      const entityId = await SynapseClient.lookupChildEntity(entityLookupRequest, token)\n      // ok, found an entity of the same name.\n      console.log(`EntityForm uploading to https://www.synapse.org/#!Synapse:${entityId.id}`)\n      this.setState({\n        userprofile,\n        containerId: entityId.id,\n        isLoading: false\n      })\n      return entityId.id\n    } catch (error) {\n      if (error.statusCode === 404) {\n        return this.onError(new Error('Your folder has not yet been set up, please retry in a few minutes.'))\n      }\n      // else\n      return this.onError(error)\n    }\n  }\n\n  finishedProcessing = () => {\n    this.setState(\n      {\n        isLoading: false,\n        successfullyUploaded: true,\n      })\n  }\n\n  onError = (error: any) => {\n    this.setState({\n      error,\n      isLoading: false,\n      successfullyUploaded: false\n    })\n  }\n\n  onSubmit = ({ formData }: any) => {\n    this.setState(\n      {\n        isLoading: true,\n        successfullyUploaded: false\n      })\n\n    const submissionFileAndForm: Blob = new Blob([JSON.stringify(formData)], {\n      type: 'text/json'\n    })\n    this.createEntityFile(submissionFileAndForm)\n  }\n\n  createEntityFile = (fileContentsBlob: Blob) => {\n    const fileName = `${this.state.formSchema.title}.json`\n    SynapseClient.uploadFile(this.props.token, fileName, fileContentsBlob).then(\n      (fileUploadComplete: any) => {\n        // do we need to create a new file entity, or update an existing file entity?\n        const newFileHandleId = fileUploadComplete.fileHandleId\n        if (this.state.currentFileEntity) {\n          this.state.currentFileEntity.dataFileHandleId = newFileHandleId\n          return SynapseClient.updateEntity(this.state.currentFileEntity, this.props.token)\n        }\n        // else, it's a new file entity\n        const newFileEntity: FileEntity = {\n          parentId: this.state.containerId!,\n          name: fileName,\n          concreteType: 'org.sagebionetworks.repo.model.FileEntity',\n          dataFileHandleId: newFileHandleId,\n        }\n        return SynapseClient.createEntity(newFileEntity, this.props.token)\n      }).then((fileEntity: FileEntity) => {\n        // by this point we've either found and updated the existing file entity, or created a new one.\n        this.finishedProcessing()\n        if (this.props.synIdCallback) {\n          this.props.synIdCallback(fileEntity.id!)\n        }\n      }).catch((error: any) => {\n        this.onError(error)\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        {\n          this.state.error &&\n          <div className=\"panel panel-danger errors\">\n            <div className=\"panel-heading\">\n              <h3 className=\"panel-title\">Error</h3>\n            </div>\n            <ul className=\"list-group\">\n              <li className=\"list-group-item text-danger\">\n                {this.state.error.name} {this.state.error.reason} {this.state.error.message}\n              </li>\n            </ul>\n          </div>\n        }\n        {\n          this.props.token &&\n          !this.state.isLoading &&\n          !this.state.successfullyUploaded &&\n          this.state.formSchema &&\n          this.state.formUiSchema &&\n          !this.state.error &&\n          <Form\n            formData={this.state.formData}\n            schema={this.state.formSchema}\n            uiSchema={this.state.formUiSchema}\n            onSubmit={this.onSubmit}\n            showErrorList={true}\n            ref={this.formRef}\n          >\n            <div style={{ display: 'none' }}>\n              <button type=\"submit\" className=\"btn btn-info\">Submit</button>\n            </div>\n          </Form>\n        }\n        {\n          !this.state.error &&\n          this.props.token &&\n          this.state.isLoading &&\n          <React.Fragment>\n            <span>Saving&hellip;</span>\n            <span style={{ marginLeft: '2px' }} className={'spinner'} />\n          </React.Fragment>\n        }\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\n\nexport type HeaderProps = {\n  isSubmitted?: boolean\n  bodyText?: string //should never take user input only use cardcoded text from a parent component. Uses dangerouslySetInnerHTML\n  title: string\n}\n\nexport default function Header(props: HeaderProps) {\n  let bodyText = <></>\n\n  if (props.isSubmitted) {\n    bodyText = <div>Your information has been submitted</div>\n  } else {\n    if (props.bodyText) {\n      bodyText = (\n        <div dangerouslySetInnerHTML={{ __html: props.bodyText }}></div>\n      )\n    }\n  }\n\n  return (\n    <div\n      className={`submission-header${props.isSubmitted ? ' submitted' : ''}`}\n    >\n      <h2>{props.title}</h2>\n      {bodyText}\n      <hr></hr>\n    </div>\n  )\n}\n","import './StepsSideNav.scss';\n\nimport * as React from 'react';\nimport { Step, StepStateEnum } from './types';\n\nimport { FlipProp, IconDefinition } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faCheckCircle,\n  faCircle,\n  faBan,\n  faExclamationCircle\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport type StepsSideNavProps = {\n  stepList: Step[];\n  onStepChange: Function;\n  isWizardMode?: boolean;\n};\n\nexport default function StepsSideNav(props: StepsSideNavProps) {\n  const nonChildSteps = props.stepList.filter(step => step.child !== true);\n\n  const getIcon = (\n    state: StepStateEnum,\n    isExcluded: boolean | undefined,\n    isStatic: boolean | undefined,\n    isSubmit: boolean | undefined\n  ): { iconDef: IconDefinition; flip: FlipProp | undefined } => {\n    let iconDef: IconDefinition = faCircle;\n    let flip: FlipProp | undefined = undefined;\n    if (isStatic || isSubmit) {\n      return {\n        iconDef,\n        flip\n      };\n    }\n\n    if (isExcluded) {\n      iconDef = faBan;\n      flip = 'horizontal';\n    } else if (state == StepStateEnum.COMPLETED) {\n      iconDef = faCheckCircle;\n    } else if (state == StepStateEnum.ERROR) {\n      iconDef = faExclamationCircle;\n    }\n    return { iconDef, flip };\n  };\n\n  const getItemClass = (\n    isInProgress: boolean,\n    isStatic: boolean = false\n  ): string => {\n    let liClassName = 'item';\n    if (isInProgress) {\n      liClassName = `${liClassName} pointed `;\n    }\n    if (isStatic) {\n      liClassName = `${liClassName} static`;\n    }\n    return liClassName;\n  };\n\n  const getListItem = (\n    step: Step,\n    isWizard: boolean,\n    isRenderChild = false\n  ): JSX.Element => {\n    if (!step || (step.child && !isRenderChild)) {\n      return <></>;\n    }\n    const renderStepName = (\n      step: Step,\n      isWizard: boolean,\n      callback: Function\n    ): JSX.Element => {\n      if (!step.inProgress && (!isWizard || !!step.final)) {\n        return (\n          <button className=\"btn btn-link\" onClick={() => callback(step)}>\n            {step.title}\n          </button>\n        );\n      } else {\n        return <span>{step.title}</span>;\n      }\n    };\n    const icon = getIcon(step.state, step.excluded, step.static, step.final);\n    const itemClass = getItemClass(step.inProgress, step.static);\n\n    return (\n      <div className={itemClass}>\n        <FontAwesomeIcon icon={icon.iconDef} flip={icon.flip} />\n        {renderStepName(step, isWizard, props.onStepChange)}\n      </div>\n    );\n  };\n\n  return (\n    <div\n      className=\"SRC-menuLayout json-forms-menu\"\n      style={{ flex: '1' }}\n    >\n      <ul>\n        {nonChildSteps.map((step: Step, i: number) => {\n          return (\n            <li className=\"item-wrap\" key={i + step.id}>\n              {getListItem(step, !!props.isWizardMode)}\n              {step.children && step.children.length > 0 && (\n                <div className=\"subMenu\">\n                  <ul>\n                    {step.children &&\n                      step.children.map((stepChildId: string, j: number) => {\n                        const childStep = props.stepList.find(\n                          step => step.id === stepChildId\n                        );\n                        return typeof childStep === 'undefined' ? (\n                          <></>\n                        ) : (\n                          <li className=\"item-wrap\" key={j + stepChildId}>\n                            {getListItem(childStep, !!props.isWizardMode, true)}\n                          </li>\n                        );\n                      })}\n                  </ul>\n                </div>\n              )}\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n}\n","import * as React from 'react'\nimport { Step, NavActionEnum } from './types'\nimport {\n  faChevronLeft,\n  faChevronRight,\n} from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nexport interface NavButtonsProps {\n  isWizardMode?: boolean\n  previousStepIds: string[]\n  onNavAction: Function\n  steps: Step[]\n  currentStep: Step\n  isFormSubmitted?: boolean\n}\n\nexport interface NextStepLinkProps {\n  onNavAction: Function\n  steps: Step[]\n  nextStepId: string | undefined\n}\n\nexport function NavButtons(props: NavButtonsProps): JSX.Element {\n  // in wizard mode we build an array of the previous steps. In regular mode back goes to\n  // a previous order step\n  const canGoBack = (props: NavButtonsProps): boolean => {\n    if (props.isWizardMode) {\n      return props.previousStepIds && props.previousStepIds.length > 0\n    } else {\n      return props.steps.findIndex(step => step.id === props.currentStep.id) > 0\n    }\n  }\n\n  const previousButton = canGoBack(props) ? (\n    <button\n      type=\"button\"\n      onClick={e => props.onNavAction(NavActionEnum.PREVIOUS)}\n      className=\"btn btn-link nav-link prev\"\n    >\n      <FontAwesomeIcon icon={faChevronLeft} />\n    </button>\n  ) : (\n    <></>\n  )\n\n  const nextButton = !props.currentStep.final ? (\n    <button\n      type=\"button\"\n      onClick={e => props.onNavAction(NavActionEnum.NEXT)}\n      className=\"btn btn-link nav-link next\"\n    >\n      <FontAwesomeIcon icon={faChevronRight} />\n    </button>\n  ) : (\n    <></>\n  )\n\n  const saveButton = (\n    <button\n      type=\"button\"\n      className=\"btn btn-action save\"\n      disabled={props.isFormSubmitted}\n      onClick={e => props.onNavAction(NavActionEnum.SAVE)}\n    >\n      SAVE\n    </button>\n  )\n\n  return (\n    <div>\n      <hr></hr>\n      <div className=\"buttonWrapper pull-right\">\n        {previousButton} {nextButton} {saveButton}\n      </div>\n    </div>\n  )\n}\n\nexport function NextStepLink(props: NextStepLinkProps): JSX.Element {\n  const nextStep = props.steps.find(step => step.id === props.nextStepId)\n  if (typeof nextStep === 'undefined') {\n    return <></>\n  }\n  return (\n    <span className=\"nav-link\">\n      <a onClick={e => props.onNavAction(nextStep)}>{nextStep.title}</a>\n      <FontAwesomeIcon icon={faChevronRight}></FontAwesomeIcon>\n    </span>\n  )\n}\n","import * as React from 'react'\n\ninterface DataDebugProps {\n    formData: any;\n    hidden: boolean;\n}\n\nexport default function DataDebug(props: DataDebugProps) {\n    const myData = <div>\n    <h6>Data</h6>\n    <pre>{JSON.stringify(props.formData, null, 2)}</pre>\n    </div>\n    return (<>{!props.hidden &&  myData}</>)\n\n}","import * as React from 'react';\n\n\nimport { SummaryFormat, Step } from './types';\nimport _ from 'lodash';\n\nexport interface SummaryTableProps {\n  isWizard?: boolean;\n  formData: any;\n  callbackFn?: Function;\n  steps: Step[];\n}\n\nexport function getFlatData(formData: any, steps: Step[]): SummaryFormat[] {\n  //takes nested json and converts it into flattened item list\n  function flatten(\n    object: any,\n    flattenedObject: any,\n    prefix: string\n  ): string[] {\n    const separator = '.';\n    Object.keys(object).forEach(key => {\n      if (object[key] === null) {\n        flattenedObject[prefix + key] = '';\n      } else if (\n        //if the value is a proper array\n        _.isArray(object[key]) &&\n        !_.isString(object[key]) &&\n        object[key].length > 1\n      ) {\n        for (let i in object[key]) {\n          if (\n            _.isArray(object[key][i]) ||\n            (_.isObject(object[key]) && !_.isString(object[key][i]))\n          ) {\n            flatten(\n              object[key][i],\n              flattenedObject,\n              `${prefix}${key}${separator}${i}${separator}`\n            );\n          } else {\n            flattenedObject[`${prefix}${key}${separator}${i}`] = object[key][i];\n          }\n        }\n      } else if (_.isObject(object[key]) && !_.isDate(object[key])) {\n        flatten(object[key], flattenedObject, `${prefix}${key}${separator}`);\n      } else {\n        flattenedObject[prefix + key] = object[key];\n      }\n    });\n    return flattenedObject;\n  }\n\n  const flatData = flatten(_.cloneDeep(formData), [], '');\n  const flatFormData = _.keys(flatData).map(key => {\n    let val = flatData[key];\n    if (flatData[key] === false) {\n      val = 'false';\n    }\n    if (flatData[key] === true) {\n      val = 'true';\n    }\n    const boundary = key.indexOf('.');\n    return {\n      screen: _.find(steps, { id: key.substring(0, boundary) }),\n      label: key.substring(boundary + 1),\n      value: val\n    };\n  }).filter(item => item.label !== 'included'); //included is the property we generate to help with validation of optional forms\n\n  const result = flatFormData\n    .filter(item => item.screen && typeof item.value !== 'undefined')\n    .map(item => {\n      return {\n        label: item.label,\n        value: item.value,\n        screen: item.screen!\n      };\n    })\n    .sort((a, b) => a.screen.order - b.screen.order);\n\n  return result;\n}\n\nexport default function SummaryTable(props: SummaryTableProps): JSX.Element {\n  let flatFormData: SummaryFormat[] = [];\n  flatFormData = getFlatData(_.cloneDeep(props.formData), props.steps);\n  \n  let prevScreenId = '';\n  const table = (\n    <>\n      <table className=\"table summary-table-header\">\n        <thead>\n          <tr>\n            <th>Step</th>\n            <th>Data Name</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n      </table>\n\n      <div className=\"scroll-area table-body\">\n        <table className=\"table summary-table\">\n          <tbody>\n            {flatFormData.map((line: SummaryFormat, i: number) => {\n              return (\n                <tr key={i + line.screen.id + line.label}>\n                  <td>\n                    {prevScreenId !== line.screen.id &&\n                      (prevScreenId = line.screen.id) && (\n                        <span>\n                          {line.screen.title}\n                        </span>\n                      )}\n                  </td>\n                  <td>{line.label}</td>\n                  <td>{line.value}</td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n\n  return (\n    <>\n      <h4> Your Data </h4>\n      <div className=\"panel panel-default padding-full wrap\">\n        <div className=\"summary scroll-area\">{table}</div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\n\nexport type WarningModalProps = {\n  title: string\n  copy: string | JSX.Element\n  confirmCopy?: string\n  className?: string\n  show: boolean\n  onOK: Function\n  onCancel: Function\n  callbackArgs: any\n}\n\nexport default function WarningModal(props: WarningModalProps) {\n \n  return (\n    <Modal show={props.show} animation={false} className={props.className}>\n      <Modal.Header closeButton={false} onHide={() => props.onCancel()}>\n        <Modal.Title>{props.title}</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{props.copy}</Modal.Body>\n      <Modal.Footer>\n        <Button variant=\"secondary\" onClick={() => props.onCancel()}>\n          Cancel\n        </Button>\n        <Button variant=\"success\" onClick={() => props.onOK(...props.callbackArgs)}>\n          <span>{props.confirmCopy || 'OK'}</span>\n        </Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\n","import './DrugUploadTool.scss'\n\nimport * as React from 'react'\nimport _ from 'lodash'\nimport { Engine } from 'json-rules-engine'\nimport {\n  default as Form,\n  UiSchema,\n  AjvError,\n  ErrorListProps,\n} from 'react-jsonschema-form'\n\nimport { Step, StepStateEnum, NavActionEnum, StatusEnum } from './types'\nimport Header from './Header'\nimport StepsSideNav from './StepsSideNav'\nimport { NavButtons, NextStepLink } from './NavButtons'\nimport DataDebug from './DataDebug'\nimport SummaryTable from './SummaryTable'\nimport WarningModal from './WarningModal'\nimport Switch from 'react-switch'\nimport { Prompt } from 'react-router-dom'\n\nexport type FormSchema = {\n  properties?: any\n  definitions?: any\n}\n\nexport interface IFormData {\n  [screen_name: string]: {\n    included?: boolean\n  }\n}\n\nexport type DrugUploadFormProps = {\n  schema: FormSchema\n  uiSchema: UiSchema\n  navSchema: {\n    steps: any[]\n  }\n  formData: IFormData\n  onSubmit: Function\n  onSave: Function\n  formTitle: string\n  formClass?: string\n  isWizardMode?: boolean\n  callbackStatus?: StatusEnum\n  isSubmitted?: boolean\n}\n\ntype DrugUploadFormState = {\n  formData: IFormData // form data that prepopulates the form\n  currentStep: Step\n  nextStep?: Step\n  steps: Step[]\n  previousStepIds: string[]\n  hasValidated?: boolean //validation has been called and it passed\n  doShowErrors: boolean //if we should show error summary at the top of the page\n  doShowHelp: boolean\n  modalContext?: { action: Function; arguments: any[] }\n  hasUnsavedChanges: boolean\n  isSubmitted?: boolean\n}\n\ntype RulesEvent = {\n  type: string\n  params: {\n    next: string\n  }\n}\n\ntype RulesResult = {\n  events: RulesEvent[]\n}\n\nexport interface SummaryFormat {\n  label: string\n  value: string\n}\n\nexport default class DrugUploadForm extends React.Component<\n  DrugUploadFormProps,\n  DrugUploadFormState\n> {\n  excludeWarningText = `This action will clear the entire contents of this page. Only this page will be effected.\n  Are you sure you want to clear the data enterred on this page?`\n  excludeWarningHeader = `Clear Entered Data`\n  unsavedDataWarning = `You might have some unsaved data. Are you sure you want to leave?`\n  formRef: any //ref to form for submission\n  navAction: NavActionEnum = NavActionEnum.NONE\n  uiSchema: {}\n  nextStep: Step | undefined\n\n  constructor(props: DrugUploadFormProps) {\n    super(props)\n\n    //will modify the ui:help to render html vs text\n    this.uiSchema = stringToElementForProp(\n      _.cloneDeep(props.uiSchema),\n      'ui:help',\n    )\n    //create steps array from the navSchema\n    const steps = props.navSchema.steps\n      .map((step, i) => {\n        return {\n          ...step,\n          inProgress: i === 0 ? true : false,\n        }\n      })\n      .sort((a, b) => a.order - b.order)\n\n    this.formRef = React.createRef()\n    this.state = {\n      currentStep: steps[0],\n      steps: steps,\n      previousStepIds: [],\n      formData: props.formData,\n      doShowErrors: false,\n      doShowHelp: true,\n      hasUnsavedChanges: false,\n      isSubmitted: props.isSubmitted,\n    }\n  }\n\n  onUnload = (ev: any) => {\n    {\n      if (this.state.hasUnsavedChanges) {\n        ev.preventDefault()\n        return (ev.returnValue = this.unsavedDataWarning)\n      }\n      return\n    }\n  }\n  // Setup the `beforeunload` event listener\n  setupBeforeUnloadListener = () => {\n    window.addEventListener('beforeunload', this.onUnload)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeunload', this.onUnload)\n  }\n\n  componentDidUpdate(prevProps: DrugUploadFormProps) {\n    const shouldUpdate = this.props.callbackStatus !== prevProps.callbackStatus\n    const isSuccess =\n      this.props.callbackStatus === StatusEnum.SAVE_SUCCESS ||\n      this.props.callbackStatus === StatusEnum.SUBMIT_SUCCESS\n    if (shouldUpdate && isSuccess) {\n      this.setState({ hasUnsavedChanges: false })\n      if (this.props.callbackStatus === StatusEnum.SUBMIT_SUCCESS) {\n        this.setState({ isSubmitted: true })\n        window.history.back()\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setupBeforeUnloadListener()\n    const formData = this.state.formData\n    const isNewForm =\n      Object.keys(formData).length == 1 &&\n      Object.keys(formData)[0] === 'metadata'\n    if (!isNewForm) {\n      return\n    }\n    // for validation of optional forms. Validation is enforced only if included property is set.\n    if (!this.props.isWizardMode) {\n      const result = {}\n      const defs = this.props.schema.definitions\n      Object.keys(defs).forEach((key: string) => {\n        if (\n          defs[key].properties &&\n          Object.keys(defs[key].properties).indexOf('included') > -1\n        ) {\n          _.set(result, `${key}.included`, true)\n        }\n      })\n      this.setState(prevState => ({ formData: prevState.formData, ...result }))\n    } else {\n      // when in wizard mode we automatically set 'included' after we visit the step so only need to do this for the first step\n      this.setState(prevState => {\n        const formData = prevState.formData\n        const firstStepId = prevState.currentStep.id\n        _.set(formData, `${firstStepId}.included`, true)\n        return { formData }\n      })\n    }\n  }\n\n  // get the schema slice for the current screen/step\n  getSchema = ({ id, final }: Step): FormSchema => {\n    if (final) {\n      return this.props.schema\n    }\n    //only get schema for current step. Only the portion of entire form is shown\n    // we need all the definitions bacuse we can have fieldset references there\n    const currentStepSlice = _.pick(this.props.schema, [\n      'definitions',\n      'title',\n      'type',\n      `properties.${id}`,\n    ])\n    return currentStepSlice\n  }\n\n  // find the next step\n  getNextStepId = async (\n    currentStep: Step,\n    formData: any,\n    nextStepId?: string,\n  ): Promise<string> => {\n    if (nextStepId) {\n      return nextStepId\n    }\n    if (!currentStep.rules || currentStep.rules.length === 0) {\n      return currentStep.default\n    }\n\n    // if there are rules - run the engine and go to the first next step\n    let engine = new Engine(currentStep.rules)\n\n    try {\n      const result: RulesResult = await engine.run(formData)\n      if (result.events.length > 0) {\n        return result.events[0].params.next\n      } else {\n        return currentStep.default\n      }\n    } catch (error) {\n      return currentStep.default\n    }\n  }\n\n  // called when going next, previous or a given step\n  moveStep = async (\n    formData: any,\n    nextStepId: string | undefined,\n    isError: boolean,\n    previousStack = [...this.state.previousStepIds],\n  ) => {\n    const currentStep = this.state.currentStep\n    let currentStepState: StepStateEnum\n    //we don't wnat to display errors on the page - this will be done explicitly in validation\n    this.formRef.current.setState({ errorSchema: {} })\n    //in wizard mode we can only move forwards (don't know next step yet) or backwards (do know next step)\n    const isMoveForwardInWizardMode = this.props.isWizardMode && !nextStepId\n\n    //previousStack is used for 'back' navigation is wizard mode.\n    //only need to do it if moving forward i.e. nextStepId is undefined\n    if (isMoveForwardInWizardMode) {\n      previousStack.push(currentStep.id)\n    }\n\n    if (!isError) {\n      currentStepState = StepStateEnum.COMPLETED\n\n      if (!isMoveForwardInWizardMode && this.props.isWizardMode) {\n        currentStepState = StepStateEnum.TODO\n      }\n    } else {\n      currentStepState = StepStateEnum.ERROR\n    }\n    // determine next step\n    nextStepId = await this.getNextStepId(currentStep, formData, nextStepId)\n\n    const steps = this.state.steps.map(step => {\n      if (step.id === currentStep.id) {\n        return {\n          ...step,\n          ...{ state: currentStepState, inProgress: false },\n        }\n      } else if (step.id === nextStepId) {\n        return { ...step, ...{ inProgress: true } }\n      }\n      return step\n    })\n    //if we are in wizard mode we want to make sure that we include the step we are about to go to\n    if (isMoveForwardInWizardMode) {\n      _.set(formData, `${nextStepId}.included`, true)\n    }\n\n    //at this point the form is valid and submitted and the data reflects the latest\n    const nextStep = this.state.steps.find(step => step.id === nextStepId)!\n    // clean up unused screens in wizard before getting to submit\n    if (this.props.isWizardMode && nextStep.final) {\n      Object.keys(formData).forEach(key => {\n        if (formData[key].included === undefined) {\n          formData[key] = {}\n        }\n      })\n    }\n\n    this.saveStepState(previousStack, steps, nextStep!, formData)\n  }\n\n  //save the state of the current screen\n  saveStepState = (\n    previousStepIds: string[],\n    steps: Step[],\n    currentStep: Step,\n    formData: any,\n  ) => {\n    this.setState({\n      previousStepIds,\n      steps,\n      currentStep,\n      formData,\n      hasValidated: false,\n      doShowErrors: false,\n    })\n  }\n\n  //--------- fns to support navigation --------------------//\n  goPrevious = async (formData: any, isError: boolean) => {\n    let previousStepId: string | undefined\n    const previousStack: string[] = [...this.state.previousStepIds]\n    // in wizard mode we go to the previously visited screen.\n    // In regular mode go to the screen with previous index\n    if (this.props.isWizardMode) {\n      previousStepId = previousStack.pop()\n      if (!this.isSubmitScreen()) {\n        //since we don't know if we'll get back to that step again - exclude it. We will include it again if we\n        // get to it.\n        _.set(formData, `${this.state.currentStep.id}.included`, undefined)\n      }\n    } else {\n      const currentIndex = _.findIndex(this.state.steps, {\n        id: this.state.currentStep.id,\n      })\n      if (currentIndex > 0) {\n        previousStepId = this.state.steps[currentIndex - 1].id\n      }\n    }\n    if (!_.isUndefined(previousStepId)) {\n      return this.moveStep(formData, previousStepId, isError, previousStack)\n    }\n  }\n\n  triggerAction = (navAction: NavActionEnum) => {\n    // we don't need to validate on save so bypassing submit\n    if (navAction === NavActionEnum.SAVE) {\n      return this.props.onSave(this.state.formData)\n    } else {\n      this.navAction = navAction\n      this.formRef.current.submit()\n    }\n  }\n\n  // triggered when we click on the step name in left nav (doesn't happen in wizard mode)\n  triggerStepChange = (step: Step) => {\n    this.nextStep = step\n    this.triggerAction(NavActionEnum.GO_TO_STEP)\n  }\n\n  onError = (args: any) => {\n    this.setState({\n      doShowErrors: true,\n      hasValidated: false,\n    })\n    if (this.navAction === NavActionEnum.VALIDATE) {\n      const modifiedSteps = this.setStepStatusForFailedValidation(\n        args.props,\n        this.state.steps,\n        this.getSchema(this.state.currentStep),\n      )\n      this.setState({ steps: modifiedSteps })\n    }\n  }\n\n  setStepStatusForFailedValidation = (\n    errors: AjvError[],\n    steps: Step[],\n    currentSchemaProperties: any,\n  ): Step[] => {\n    //error property is in the format: step.somevalue.etc  .welcome.submission_name example\n    //find all the steps where there is an error\n    const stepsWithError = errors.map(\n      error => _.trimStart(error.property, '.').split('.')[0],\n    )\n    //find all steps in current schema\n    const stepsInCurrentSchema = Object.keys(currentSchemaProperties)\n    const updatedSteps: Step[] = steps.map(step => {\n      if (stepsWithError.indexOf(step.id) > -1) {\n        return {\n          ...step,\n          state: StepStateEnum.ERROR,\n        }\n      } else if (stepsInCurrentSchema.indexOf(step.id) > -1) {\n        return {\n          ...step,\n          state: StepStateEnum.COMPLETED,\n        }\n      } else {\n        return step\n      }\n    })\n    return updatedSteps\n  }\n\n  //we are constantly saving form data. Needed to overwrite on-error behavior\n  handleOnChange({ formData }: any) {\n    //this is just for form updates. submit screen goes different route\n    if (!this.isSubmitScreen()) {\n      const hasUnsavedChanges = !_.isEqual(this.state.formData, formData)\n      this.setState({ formData, hasUnsavedChanges })\n    }\n  }\n\n  performAction(navAction: NavActionEnum, hasError: boolean) {\n    const formData = this.state.formData\n\n    switch (navAction) {\n      case NavActionEnum.NEXT: {\n        return this.moveStep(formData, undefined, hasError)\n      }\n      case NavActionEnum.PREVIOUS: {\n        return this.goPrevious(formData, hasError)\n      }\n      case NavActionEnum.GO_TO_STEP: {\n        //nextStep is returned when clicked on the Steps left nav\n        if (!this.nextStep) {\n          return\n        }\n        return this.moveStep(formData, this.nextStep.id, hasError)\n      }\n\n      case NavActionEnum.SUBMIT: {\n        this.props.onSubmit(formData)\n      }\n      case NavActionEnum.VALIDATE: {\n        //we get here is we clicked validate and the data is valid.\n        // if it's not valid we handle it in onError fn\n        const currentStep = {\n          ...this.state.currentStep,\n          state: StepStateEnum.COMPLETED,\n        }\n        const steps = this.state.steps.map(step => {\n          return {\n            ...step,\n            state:\n              step.id === currentStep.id ? StepStateEnum.COMPLETED : step.state,\n          }\n        })\n\n        this.setState({ hasValidated: true, currentStep, steps })\n      }\n      default:\n        return\n    }\n  }\n\n  //we need to route things through submit - otherwise validation does not kick in\n  // it triggers internal library validation and calls the performAction with the params for action\n  onSubmit = (): any => {\n    this.performAction(\n      this.navAction,\n      this.state.currentStep.state === StepStateEnum.ERROR,\n    )\n  }\n\n  isSubmitScreen = (): boolean => {\n    return this.state.currentStep.final === true\n  }\n\n  showExcludeStateWarningModal = (\n    stepId: string,\n    isUpdateFlattenedData: boolean = false,\n  ): void => {\n    this.setState({\n      modalContext: {\n        action: this.toggleExcludeStep,\n        arguments: [stepId, true, isUpdateFlattenedData],\n      },\n    })\n  }\n\n  toggleExcludeStep = (stepId: string, isExclude: boolean): void => {\n    this.setState((prevState, props) => {\n      const steps = prevState.steps.map(stp => {\n        if (stp.id === stepId) {\n          return { ...stp, ...{ excluded: isExclude } }\n        }\n        return stp\n      })\n\n      const formDataUpdated = _.cloneDeep(prevState.formData)\n      const currentStep = _.cloneDeep(prevState.currentStep)\n      //we need this because you can exclude on the ifnal screen so the currentStep.id\n      //is not always the one we need to exclude\n      if (currentStep.id === stepId) {\n        currentStep.excluded = isExclude\n      }\n      //if exluding - blow away the data for the step\n      if (isExclude) {\n        formDataUpdated[stepId] = {}\n        //_.set(formDataUpdated, `${stepId}.included`, false);\n      } else {\n        _.set(formDataUpdated, `${stepId}.included`, true)\n      }\n      return {\n        steps,\n        formData: formDataUpdated,\n        modalContext: undefined,\n        currentStep,\n      }\n    })\n  }\n\n  private renderNotification = (status?: StatusEnum): JSX.Element => {\n    if (status === StatusEnum.SAVE_SUCCESS) {\n      return <div className=\"notification-area\"> Successfully saved </div>\n    }\n    if (status === StatusEnum.SUBMIT_SUCCESS) {\n      return <div className=\"notification-area\"> Successfully submitted </div>\n    }\n    if (status === StatusEnum.PROGRESS) {\n      return <div className=\"notification-area\"> working on it ....</div>\n    }\n    return <></>\n  }\n\n  // displays the text for screens that don't have any form data\n  private renderTextForStaticScreen = (): JSX.Element => {\n    if (!this.state.currentStep.copy) {\n      return <></>\n    }\n    const copy = this.state.currentStep.copy\n    return (\n      <div\n        className=\"static-screen\"\n        dangerouslySetInnerHTML={{ __html: copy! }}\n      />\n    )\n  }\n\n  //displays subheader for forms that can be excluded\n  renderOptionalFormSubheader = (isWizard: boolean = false): JSX.Element => {\n    if (isWizard) {\n      return <></>\n    }\n    const currentStep = this.state.currentStep\n\n    if (currentStep.excluded === true) {\n      return (\n        <div className=\"step-exclude-directions\">\n          This sub-form is currently not included in the submission.\n          <button\n            className=\"btn btn-link\"\n            onClick={() => this.toggleExcludeStep(currentStep.id, false)}\n          >\n            INCLUDE\n          </button>\n        </div>\n      )\n    } else if (currentStep.excluded === false) {\n      return (\n        <div className=\"step-exclude-directions\">\n          This sub-form is currently included in the submission.{' '}\n          <button\n            className=\"btn btn-link\"\n            onClick={() =>\n              this.showExcludeStateWarningModal(this.state.currentStep.id)\n            }\n          >\n            EXCLUDE\n          </button>\n        </div>\n      )\n    }\n    return <></>\n  }\n\n  renderHelpToggle = (\n    currentStep: Step,\n    showHelp: boolean,\n    callbackFn: Function,\n  ): JSX.Element => {\n    if (currentStep.static || currentStep.final) {\n      return <></>\n    }\n    return (\n      <>\n        <label className=\"pull-right toggle-help-label\">\n          <span>Hide help</span>\n          <Switch\n            checkedIcon={false}\n            uncheckedIcon={false}\n            height={20}\n            width={45}\n            className=\"toggle-help\"\n            offColor=\"#ccc\"\n         \n            onChange={() => callbackFn()}\n            checked={showHelp}\n          />\n          <span>Show help</span>\n        </label>\n      </>\n    )\n  }\n\n  transformErrors = (errors: AjvError[]): AjvError[] => {\n    // if we are not in wizard mode and not trying to submit or validate we just want to skip\n    // over the errors and just set the step status\n    // https://github.com/rjsf-team/react-jsonschema-form/issues/1263\n\n    if (\n      this.navAction !== NavActionEnum.SUBMIT &&\n      this.navAction !== NavActionEnum.VALIDATE &&\n      (!this.props.isWizardMode || this.state.currentStep.final)\n    ) {\n      const currentStep = {\n        ...this.state.currentStep,\n      }\n      if (errors.length > 0) {\n        currentStep.state = StepStateEnum.ERROR\n      } else {\n        currentStep.state = StepStateEnum.COMPLETED\n      }\n\n      this.setState({ currentStep })\n\n      return []\n    }\n\n    // there is an odd behavior in the lib that in cases when we have additional fields depending on enum\n    // value if it's required and not entered we get 3 error: enum, required, and oneOf\n    // so if there is an error Oneof on a parent - ignore it and enum on a child. and just output 'required'\n    // if there is an enum error and there is required with the same prefix remove it\n\n    const reqErrors = errors.filter(error => error.name === 'required')\n    reqErrors.forEach(error => {\n      const parentPath = error.property.substring(\n        0,\n        error.property.lastIndexOf('.'),\n      )\n      _.remove(errors, (error: AjvError) => {\n        return (\n          error.property.indexOf(parentPath) > -1 &&\n          (error.name === 'enum' || error.name === 'oneOf')\n        )\n      })\n    })\n    return errors\n  }\n\n  renderErrorListTemplate = (props: ErrorListProps) => {\n    let { errors } = props\n    const currentLis = errors.map((error, i) => {\n      return renderTransformedErrorObject(\n        this.state.steps,\n        error,\n        this.uiSchema,\n        i,\n        this.props.schema,\n      )\n    })\n\n    return (\n      <div className=\"form-error-summary\">\n        <ul className=\"error-detail\">{currentLis}</ul>\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"outter-wrap\">\n        <Prompt\n          when={this.state.hasUnsavedChanges}\n          message={this.unsavedDataWarning}\n        />\n        <Header\n          isSubmitted={this.state.isSubmitted}\n          bodyText={this.state.currentStep.description}\n          title={this.props.formTitle}\n        ></Header>\n        <div>\n          <div className=\"inner-wrap\">\n            <StepsSideNav\n              stepList={this.state.steps}\n              isWizardMode={this.props.isWizardMode}\n              onStepChange={this.triggerStepChange}\n            ></StepsSideNav>\n            <div className=\"form-wrap\">\n              <div className=\"form-title\">{this.state.currentStep.title}</div>\n              {this.renderNotification(this.props.callbackStatus)}\n              <div\n                className={`right-top-actions ${\n                  this.state.isSubmitted ? 'hide' : ''\n                }`}\n              >\n                {!this.state.currentStep.static && (\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-action save pull-right\"\n                    onClick={() => this.triggerAction(NavActionEnum.VALIDATE)}\n                  >\n                    VALIDATE\n                  </button>\n                )}\n                {this.renderHelpToggle(\n                  this.state.currentStep,\n                  this.state.doShowHelp,\n                  () =>\n                    this.setState({\n                      doShowHelp: !this.state.doShowHelp,\n                    }),\n                )}\n                {this.isSubmitScreen() && (\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-action save pull-right\"\n                    disabled={this.state.isSubmitted}\n                    onClick={() => this.triggerAction(NavActionEnum.SUBMIT)}\n                  >\n                    SUBMIT\n                  </button>\n                )}\n              </div>\n              {this.renderOptionalFormSubheader(this.props.isWizardMode)}\n              <div\n                className={this.isSubmitScreen()|| this.state.currentStep.static ? 'hide-form-only' : 'wrap'}\n              >\n                {this.state.hasValidated && (\n                  <div className=\"notification-area\">\n                    Great! Your data is valid!\n                  </div>\n                )}\n                <div\n                  className={`scroll-area ${\n                    this.state.currentStep.excluded ? 'disabled' : ' '\n                  } `}\n                >\n                  <Form\n                    className={\n                      this.state.doShowHelp\n                        ? 'submissionInputForm'\n                        : 'submissionInputForm no-help'\n                    }\n                    liveValidate={false}\n                    formData={this.state.formData}\n                    schema={this.getSchema(this.state.currentStep)}\n                    uiSchema={this.uiSchema}\n                    onSubmit={this.onSubmit}\n                    onChange={args => this.handleOnChange(args)}\n                    onError={args =>\n                      this.onError({\n                        props: args,\n                        form: this.formRef,\n                      })\n                    }\n                    showErrorList={\n                      !!this.state.doShowErrors || !!this.props.isWizardMode\n                    }\n                    ErrorList={this.renderErrorListTemplate}\n                    transformErrors={this.transformErrors}\n                    ref={this.formRef}\n                    disabled={\n                      this.state.currentStep.excluded || this.state.isSubmitted\n                    }\n                  >\n                    <div style={{ display: 'none' }}>\n                      <button type=\"submit\"></button>\n                    </div>\n                  </Form>\n                  {this.renderTextForStaticScreen()}\n                  {!this.props.isWizardMode && (\n                    <NextStepLink\n                      steps={this.state.steps}\n                      nextStepId={this.state.currentStep.default}\n                      onNavAction={(step: Step) => this.triggerStepChange(step)}\n                    ></NextStepLink>\n                  )}\n                </div>\n              </div>\n\n              {this.isSubmitScreen() && (\n                <SummaryTable\n                  formData={this.state.formData}\n                  steps={this.state.steps}\n                  callbackFn={(screenId: string) =>\n                    this.showExcludeStateWarningModal(screenId, true)\n                  }\n                ></SummaryTable>\n              )}\n\n              <NavButtons\n                currentStep={this.state.currentStep}\n                steps={this.state.steps}\n                previousStepIds={this.state.previousStepIds}\n                isFormSubmitted={this.state.isSubmitted}\n                onNavAction={(e: NavActionEnum) => this.triggerAction(e)}\n              ></NavButtons>\n            </div>\n          </div>\n        </div>\n        {this.state.modalContext && (\n          <WarningModal\n            show={true}\n            title={this.excludeWarningHeader}\n            copy={this.excludeWarningText}\n            className={`theme-${this.props.formClass}`}\n            callbackArgs={this.state.modalContext.arguments}\n            onCancel={() => this.setState({ modalContext: undefined })}\n            onOK={(stepId: string, isExclude: boolean) =>\n              this.toggleExcludeStep(stepId, isExclude)\n            }\n          ></WarningModal>\n        )}\n        <DataDebug\n          formData={this.state.formData}\n          hidden={false}\n        ></DataDebug>\n      </div>\n    )\n  }\n}\n\n// takes in a single validation error and  and displays it in more readable manner\n// used by renderErrorListTemplate\nfunction renderTransformedErrorObject(\n  steps: Step[],\n  error: AjvError,\n  uiSchema: UiSchema,\n\n  i: number,\n  schema: any,\n): JSX.Element {\n  const propPath = _.trimStart(error.property, '.')\n  const propArr = propPath.split('.')\n\n  // some things require labels in schema (e.g. checkboxes) so this is preferred\n  const labelFromSchema = `${propArr.join('.properties.')}.title`\n  //can be overriden by label in UI\n  const regLabelFromUi = `${propPath}.ui:title`\n  //for array fields we need to change the property e.g.\n  //  ld50.experiments[0].species_other should look like 'ld50.experiments.items.species_other'\n  const arrayLabelFromUi = regLabelFromUi.replace(/\\[.*?\\]/, '.items')\n\n  let label =\n    _.get(schema.definitions, labelFromSchema) ||\n    _.get(uiSchema, regLabelFromUi) ||\n    _.get(uiSchema, arrayLabelFromUi) ||\n    error.property\n\n  const screen = _.find(steps, { id: propArr[0] }) || {\n    title: propArr[0],\n  }\n  const element = (\n    <li key={i} className=\"\">\n      <span>\n        <strong>{screen.title}: </strong>\n        {label}&nbsp; {error.message}\n      </span>\n    </li>\n  )\n  return element\n}\n\n//recursively sets property value to dangerouslySetInnerHTML of that value\nfunction stringToElementForProp(srcObject: any, key: string): object {\n  _.keys(srcObject).some(k => {\n    if (k === key) {\n      const value = srcObject[k]\n      srcObject[k] = <span dangerouslySetInnerHTML={{ __html: value }}></span>\n\n      return srcObject\n    }\n    if (srcObject[k] && typeof srcObject[k] === 'object') {\n      stringToElementForProp(srcObject[k], key)\n    }\n  })\n  return srcObject\n}\n","//https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormGroup.html\nexport type FormGroup = {\n  groupId: string\n  name: string\n  createdBy: string\n  createdOn: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormData.html\nexport type FormData = {\n  formDataId: string\n  etag: string\n  groupId: string\n  name: string\n  createdBy: string\n  createdOn: string\n  modifiedOn: string\n  dataFileHandleId:string\n  submissionStatus: SubmissionStatus\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormChangeRequest.html\nexport type FormChangeRequest = {\n  name: string\n  fileHandleId: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormRejection.html\nexport type FormRejection = {\n  reason: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/SubmissionStatus.html\nexport type SubmissionStatus = {\n  submittedOn?: string,\n  reviewedOn?: string,\n  reviewedBy?: string,\n  state: StatusEnum,\n  rejectionMessage?: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/StatusEnum.html\nexport enum StatusEnum {\n  WAITING_FOR_SUBMISSION = 'WAITING_FOR_SUBMISSION',\n  SUBMITTED_WAITING_FOR_REVIEW = 'SUBMITTED_WAITING_FOR_REVIEW',\n  ACCEPTED = 'ACCEPTED', \n  REJECTED = 'REJECTED'\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/ListRequest.html\nexport type ListRequest = {\n  filterByState?: StatusEnum[],\n  groupId: string,\n  nextPageToken?: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/ListResponse.html\nexport type ListResponse = {\n  page: FormData[],\n  nextPageToken?: string\n}\n","import * as React from 'react'\n\nimport { SynapseClient } from '../../utils'\nimport { FileEntity } from '../../utils/jsonResponses/FileEntity'\nimport { UiSchema } from 'react-jsonschema-form'\nimport { StatusEnum } from './types'\nimport Alert from 'react-bootstrap/Alert'\nimport DrugUploadForm from './DrugUploadForm'\nimport { FormData } from '../../utils/jsonResponses/Forms'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport _ from 'lodash'\n\nexport type UploadToolSearchParams = {\n  formDataId?: string //formDataId for user data form data\n  dataFileHandleId?: string //fileHandle to get userData\n  submitted?: boolean // if the file has been submitted\n  formGroupId: string\n}\n\nexport type DrugUploadToolProps = {\n  // Provide the parent container (folder/project), that should contain a folder (named <user_id>) that this user can write to.\n  formSchemaEntityId: string // Synapse file that contains the form schema.\n  formUiSchemaEntityId: string // Synapse file that contains the form ui schema.\n  formNavSchemaEntityId: string //Synapse file that consists screen nav schema\n  token?: string // user's session token\n  searchParams?: UploadToolSearchParams\n  isWizardMode?: boolean // if we are displaying the form in wizard mode\n  fileNamePath: string // path in data to specify the name of saved file\n  formTitle: string //for UI customization\n  formClass?: string // to support potential theaming\n}\n\ntype DrugUploadToolState = {\n  notification?: Notification\n  isLoading?: boolean\n  formDataId?: string // file holding user form data\n  formData?: any // form data that prepopulates the form\n  formSchema?: any // schema that drives the form\n  formUiSchema?: UiSchema // ui schema that directs how to render the form elements\n  formNavSchema?: any // drives the steps left panel\n\n  status?: StatusEnum\n}\n\ntype Error = {\n  name?: string\n  message?: string\n}\n\ninterface Notification extends Error {\n  type: StatusEnum\n}\n\nclass DrugUploadTool extends React.Component<\n  DrugUploadToolProps,\n  DrugUploadToolState\n> {\n  constructor(props: DrugUploadToolProps) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      formDataId: _.get(this.props, 'searchParams.formDataId'),\n    }\n  }\n\n  async componentDidMount() {\n    await this.getData(this.props.token)\n  }\n\n  async componentDidUpdate(prevProps: DrugUploadToolProps) {\n    const shouldUpdate = this.props.token !== prevProps.token\n    if (shouldUpdate) {\n      await this.getData(this.props.token)\n    }\n  }\n\n  //gets a file entity with content\n  getFileEntityData = async (\n    token: string,\n    entityId: string,\n  ): Promise<{ version?: number; content: JSON }> => {\n    try {\n      const entity: FileEntity = await SynapseClient.getEntity(token, entityId)\n      const entityContent = await SynapseClient.getFileEntityContent(\n        token,\n        entity,\n      )\n      return {\n        version: entity.versionNumber,\n        content: JSON.parse(entityContent),\n      }\n    } catch (error) {\n      const newError = {\n        message: `${error.message}:  configuration data for ${entityId} failed to load`,\n      }\n      this.onError(newError)\n      return Promise.reject(newError)\n    }\n  }\n\n  getData = async (token?: string): Promise<void> => {\n    if (!token) {\n      return\n    }\n    try {\n      let formData = {}\n\n      const promises = [\n        this.getFileEntityData(token, this.props.formSchemaEntityId),\n        this.getFileEntityData(token, this.props.formUiSchemaEntityId),\n        this.getFileEntityData(token, this.props.formNavSchemaEntityId),\n      ]\n      const { searchParams } = this.props\n\n      const configData = await Promise.all(promises)\n\n      const dataFileHandleId = searchParams && searchParams.dataFileHandleId\n      if (dataFileHandleId) {\n        const fileData = await SynapseClient.getFileHandleContentFromID(\n          dataFileHandleId,\n          token,\n        )\n        formData = JSON.parse(fileData)\n      } else {\n        //if we are creating a new file - store the versions\n        formData = {\n          metadata: {\n            formSchemaVersion: configData[0].version,\n            uiSchemaVersion: configData[1].version,\n            navSchemaVersion: configData[2].version,\n          },\n        }\n      }\n      this.setState({\n        // currentFileEntity,\n        formData: formData,\n        formSchema: configData[0].content,\n        formUiSchema: configData[1].content,\n        formNavSchema: configData[2].content,\n        isLoading: false,\n      })\n    } catch (error) {\n      this.onError({ message: error })\n    } finally {\n      this.setState({\n        isLoading: false,\n      })\n    }\n  }\n\n  finishedProcessing = (status: StatusEnum, message?: string) => {\n    this.setState({\n      isLoading: false,\n      notification: { type: status, message: message },\n      status: status,\n    })\n    //this will show the update message for 7 seconds\n    setTimeout(() => {\n      this.setState({ status: undefined })\n    }, 7000)\n  }\n\n  onError = (error: Error) => {\n    this.setState({\n      notification: {\n        type: StatusEnum.ERROR,\n        message: error.message,\n        name: error.name,\n      },\n      status: StatusEnum.ERROR,\n      isLoading: false,\n    })\n  }\n\n  submitForm = async (formData: any) => {\n    await this.saveToFile(formData)\n\n    this.setState({\n      isLoading: true,\n    })\n\n    await SynapseClient.submitFormData(this.state.formDataId!, this.props.token)\n    this.finishedProcessing(StatusEnum.SUBMIT_SUCCESS, 'File Submitted')\n  }\n\n  createOrUpdateFormDataFile = async (\n    fileName: string,\n    fileContentsBlob: Blob,\n  ): Promise<FormData> => {\n    fileName = `${fileName}.json`\n    const fileUploadComplete = await SynapseClient.uploadFile(\n      this.props.token,\n      fileName,\n      fileContentsBlob,\n    )\n    const { searchParams } = this.props\n    const formGroupId = searchParams && searchParams.formGroupId\n    if (!formGroupId) {\n      console.error('formGroupId must be defined')\n      throw 'formGroupId must be defined'\n    }\n    try {\n      // do we need to create a new file entity, or update an existing file entity?\n      const newFileHandleId = fileUploadComplete.fileHandleId\n\n      let formData\n      if (this.state.formDataId) {\n        formData = await SynapseClient.updateFormData(\n          this.state.formDataId,\n          fileName,\n          newFileHandleId,\n          this.props.token!,\n        )\n      } else {\n        formData = await SynapseClient.createFormData(\n          formGroupId,\n          fileName,\n          newFileHandleId,\n          this.props.token!,\n        )\n      }\n\n      return formData\n    } catch (error) {\n      this.onError(error)\n      throw error\n    }\n  }\n\n  saveToFile = async (data: any) => {\n    const fileName = _.get(data, this.props.fileNamePath)\n    this.setState({\n      status: StatusEnum.PROGRESS,\n      notification: { type: StatusEnum.PROGRESS, message: 'Progress' },\n      isLoading: true,\n    })\n\n    if (!fileName) {\n      this.onError({ message: 'Please Provide the File Name' })\n      return\n    }\n\n    try {\n      const fileContent: Blob = new Blob([JSON.stringify(data)], {\n        type: 'text/json',\n      })\n\n      const formData = await this.createOrUpdateFormDataFile(\n        fileName,\n        fileContent,\n      )\n      this.setState({\n        formDataId: formData.formDataId,\n      })\n\n      this.finishedProcessing(StatusEnum.SAVE_SUCCESS, 'File Saved')\n    } catch (error) {\n      this.onError({ message: error })\n    }\n  }\n\n  isReadyToDisplayForm = (state: DrugUploadToolState): boolean => {\n    return (\n      this.state.status !== StatusEnum.ERROR_CRITICAL &&\n      state.formSchema &&\n      state.formUiSchema &&\n      state.formNavSchema &&\n      state.formData\n    )\n  }\n\n  renderLoader = (\n    state: DrugUploadToolState,\n    props: DrugUploadToolProps,\n  ): JSX.Element => {\n    if (\n      !_.includes(\n        [StatusEnum.ERROR, StatusEnum.ERROR_CRITICAL],\n        state.status,\n      ) &&\n      props.token &&\n      state.isLoading\n    ) {\n      return (\n        <div className=\"text-center\">\n          <span className={'spinner'} />\n        </div>\n      )\n    } else {\n      return <></>\n    }\n  }\n\n  renderNotification = (notification?: Notification): JSX.Element => {\n    if (!notification) {\n      return <></>\n    }\n    if (notification.type === StatusEnum.ERROR) {\n      return (\n        <Alert\n          variant=\"danger\"\n          onClose={() => this.setState({ status: undefined })}\n          dismissible\n        >\n          <Alert.Heading>Error</Alert.Heading>\n\n          <p>\n            {notification.name} {notification.message}\n          </p>\n        </Alert>\n      )\n    }\n\n    return <></>\n  }\n\n  renderUnauthenticatedView = (token: string | undefined) => {\n    if (token) {\n      return <></>\n    } else {\n      return (\n        <div className=\"panel padding-full unauthenticated text-center\">\n          Please{' '}\n          <button\n            className={`SRC-standard-button-shape SRC-light-button SRC-sign-in-button ${SRC_SIGN_IN_CLASS}`}\n          >\n            {' '}\n            sign in{' '}\n          </button>{' '}\n          to initiate or continue your submission{' '}\n        </div>\n      )\n    }\n  }\n\n  render() {\n    return (\n      <div className={`theme-${this.props.formClass}`}>\n        <div className=\"SRC-ReactJsonForm\">\n          {this.renderNotification(this.state.notification)}\n          {this.renderLoader(this.state, this.props)}\n          {this.renderUnauthenticatedView(this.props.token)}\n\n          {this.isReadyToDisplayForm(this.state) && (\n            <div>\n              <DrugUploadForm\n                schema={this.state.formSchema}\n                uiSchema={this.state.formUiSchema!}\n                formData={this.state.formData}\n                navSchema={this.state.formNavSchema}\n                isWizardMode={this.props.isWizardMode}\n                formTitle={this.props.formTitle}\n                formClass={this.props.formClass}\n                callbackStatus={this.state.status}\n                onSave={(data: any) => this.saveToFile(data)}\n                onSubmit={(data: any) => this.submitForm(data)}\n                isSubmitted={\n                  this.props.searchParams && !!this.props.searchParams.submitted\n                }\n              ></DrugUploadForm>\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DrugUploadTool\n","import './DrugUploadTool.scss'\n\nimport * as React from 'react'\n\nimport { SynapseClient } from '../../utils'\nimport {\n  FormData,\n  ListRequest,\n  StatusEnum,\n  ListResponse,\n} from '../../utils/jsonResponses/Forms'\nimport { faTrash, faPhone } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport WarningModal from './WarningModal'\nimport Button from 'react-bootstrap/Button'\nimport Modal from 'react-bootstrap/Modal'\n\nimport moment from 'moment'\nimport { SRC_SIGN_IN_CLASS } from '../../utils/SynapseConstants'\nimport NoSubmissionsIcon from '../../assets/icons/json-form-tool-no-submissions.svg'\n\nexport type UserFileGridProps = {\n  token?: string\n  formGroupId: string\n  pathpart: string\n  formClass?: string\n  itemNoun: string\n}\n\ntype FileListType = 'IN_PROGRESS' | 'SUBMITTED'\n\ntype UserFileGridState = {\n  inProgress: {\n    fileList: FormData[]\n    nextPageToken?: string\n  }\n  submitted: {\n    fileList: FormData[]\n    nextPageToken?: string\n  }\n  isLoading: boolean\n  isShowInfoModal: boolean\n  modalContext?: { action: Function; arguments: any[] }\n}\n\nexport default class UserFileGrid extends React.Component<\n  UserFileGridProps,\n  UserFileGridState\n> {\n  modalTitle = 'Trash Submission?'\n  listingText = {\n    inProgress: {\n      subhead: 'In Progress',\n      noRecords: `You don't have submissions in progress`,\n    },\n    submitted: {\n      subhead: 'Submitted',\n      noRecords: `You don't have anything submitted`,\n    },\n  }\n  modalCopy = (\n    <>\n      <p>\n        This submission is currently incomplete and has not been submitted. If\n        you trash this submission, you won't be able to recover the data.\n      </p>\n      <p>Are you sure you want to trash this submission?' </p>\n    </>\n  )\n  static requestFilter = {\n    IN_PROGRESS: [StatusEnum.WAITING_FOR_SUBMISSION],\n    SUBMITTED: [\n      StatusEnum.SUBMITTED_WAITING_FOR_REVIEW,\n      StatusEnum.ACCEPTED,\n      StatusEnum.REJECTED,\n    ],\n  }\n\n  constructor(props: UserFileGridProps) {\n    super(props)\n    this.state = {\n      isLoading: true,\n      isShowInfoModal: false,\n      inProgress: {\n        fileList: [],\n      },\n      submitted: {\n        fileList: [],\n      },\n    }\n  }\n\n  async componentDidMount() {\n    await this.refresh(this.props.token)\n  }\n\n  async componentDidUpdate(prevProps: UserFileGridProps) {\n    const shouldUpdate = this.props.token !== prevProps.token\n    if (shouldUpdate) {\n      await this.refresh(this.props.token)\n    }\n  }\n\n  async refresh(token?: string) {\n    if (token) {\n      await this.getUserFileListing().catch(error => {\n        this.onError(error)\n      })\n    }\n  }\n\n  getTypeFileListing = async (\n    filter: StatusEnum[],\n    nextPageToken?: string,\n  ): Promise<{ fileList: FormData[]; nextPageToken?: string }> => {\n    this.setState({\n      isLoading: true,\n    })\n    const token = this.props.token\n    const groupId = this.props.formGroupId\n    try {\n      const cleanUpName = (item: FormData): FormData => {\n        item = { ...item, ...{ name: item.name.replace('.json', '') } }\n        return item\n      }\n      const request: ListRequest = {\n        filterByState: filter,\n        groupId,\n        nextPageToken: nextPageToken,\n      }\n\n      const response: ListResponse = await SynapseClient.listFormData(\n        request,\n        token,\n      )\n      const fileList = response.page\n        ? response.page.map(item => cleanUpName(item))\n        : []\n\n      return {\n        fileList,\n        nextPageToken: response.nextPageToken,\n      }\n    } catch (error) {\n      this.onError(error)\n      return Promise.reject(error)\n    } finally {\n      this.setState({\n        isLoading: false,\n      })\n    }\n  }\n\n  getMore = async (fileListType: FileListType, nextPageToken: string) => {\n    const statusList =\n      fileListType === 'SUBMITTED'\n        ? UserFileGrid.requestFilter.SUBMITTED\n        : UserFileGrid.requestFilter.IN_PROGRESS\n    const result = await this.getTypeFileListing(statusList, nextPageToken)\n    if (fileListType === 'SUBMITTED') {\n      this.setState(prevState => ({\n        submitted: {\n          fileList: [...prevState.submitted.fileList, ...result.fileList],\n          nextPageToken: result.nextPageToken,\n        },\n      }))\n    } else {\n      this.setState(prevState => ({\n        inProgress: {\n          fileList: [...prevState.inProgress.fileList, ...result.fileList],\n          nextPageToken: result.nextPageToken,\n        },\n      }))\n    }\n  }\n\n  getUserFileListing = async (): Promise<void> => {\n    const inProgress = await this.getTypeFileListing(\n      UserFileGrid.requestFilter.IN_PROGRESS,\n      this.state.inProgress.nextPageToken,\n    )\n    const submitted = await this.getTypeFileListing(\n      UserFileGrid.requestFilter.SUBMITTED,\n      this.state.submitted.nextPageToken,\n    )\n\n    this.setState({\n      inProgress: inProgress,\n      submitted: submitted,\n    })\n\n    return\n  }\n  onError = (args: any) => {\n    console.log(args)\n  }\n\n  deleteFile = async (token: string, formDataId: string): Promise<any> => {\n    this.setState({\n      isLoading: true,\n      modalContext: undefined,\n    })\n    try {\n      await SynapseClient.deleteFormData(formDataId, token)\n      //await this.getUserFileListing(token, this.props.formGroupId)\n      this.setState((prevState, props) => ({\n        inProgress: {\n          fileList: prevState.inProgress.fileList.filter(\n            item => item.formDataId !== formDataId,\n          ),\n          nextPageToken: prevState.inProgress.nextPageToken,\n        },\n      }))\n    } catch (error) {\n      this.onError(error)\n      return []\n    } finally {\n      this.setState({\n        isLoading: false,\n      })\n    }\n  }\n\n  setModalConfirmationState = (token: string, formDataId: string) => {\n    this.setState({\n      modalContext: {\n        action: this.deleteFile,\n        arguments: [token, formDataId],\n      },\n    })\n  }\n  /* ------------------------------------------   rendering fns  ------------------------------------------------*/\n\n  renderLoading = (\n    token: string | undefined,\n    isLoading: boolean,\n  ): JSX.Element => {\n    if (token && isLoading) {\n      return (\n        <div className=\"text-center\">\n          <span>Loading&hellip;</span>\n          <span style={{ marginLeft: '2px' }} className={'spinner'} />\n        </div>\n      )\n    } else {\n      return <></>\n    }\n  }\n\n  renderUnauthenticatedView = (token: string | undefined) => {\n    if (token) {\n      return <></>\n    } else {\n      return (\n        <div className=\"panel padding-full unauthenticated text-center\">\n          Please{' '}\n          <button\n            className={`SRC-standard-button-shape SRC-light-button ${SRC_SIGN_IN_CLASS} SRC-sign-in-button`}\n          >\n            {' '}\n            sign in{' '}\n          </button>{' '}\n          to initiate or continue your submission{' '}\n        </div>\n      )\n    }\n  }\n\n  renderSubmissionsTable = (\n    fileList: FormData[],\n    pathpart: string,\n    formGroupId: string,\n    fileListType: FileListType,\n    nextPageToken?: string,\n  ): JSX.Element => {\n    if (!formGroupId) {\n      this.onError('Form Group ID is undefined')\n      return <></>\n    }\n    const isInProgress = fileListType === 'IN_PROGRESS'\n    const textSource = isInProgress\n      ? this.listingText.inProgress\n      : this.listingText.submitted\n\n    const subhead = <h4>{textSource.subhead}</h4>\n    const tableTitleRow = isInProgress ? (\n      <tr>\n        <th>Submission Name</th>\n        <th>Edited On</th>\n        <th></th>\n        <th></th>\n      </tr>\n    ) : (\n      <tr>\n        <th>Submission Name</th>\n        <th>Submitted On</th>\n        <th>Status</th>\n        <th></th>\n      </tr>\n    )\n\n    let content = (\n      <h5 className=\"text-center no-submissions padding-full\">\n        {textSource.noRecords}\n      </h5>\n    )\n    const viewMore = nextPageToken ? (\n      <div className=\"view-more\">\n        <button\n          className=\"btn btn-link\"\n          onClick={() => this.getMore(fileListType, nextPageToken)}\n        >\n          more ...\n        </button>\n      </div>\n    ) : (\n      <></>\n    )\n    if (fileList.length > 0) {\n      content = (\n        <div className=\"file-table\">\n          <table className=\"table\">\n            <thead>{tableTitleRow}</thead>\n            <tbody>\n              {fileList.map((dataFileRecord, key) => {\n                if (isInProgress) {\n                  return (\n                    <tr key={dataFileRecord.formDataId! + key}>\n                      <td>\n                        <a\n                          href={`${pathpart}?formGroupId=${formGroupId}&formDataId=${dataFileRecord.formDataId}&dataFileHandleId=${dataFileRecord.dataFileHandleId}`}\n                        >\n                          {dataFileRecord.name}\n                        </a>\n                      </td>\n                      <td>{moment(dataFileRecord.modifiedOn).calendar()}</td>\n                      <td>&nbsp;</td>\n                      <td className=\"text-right\">\n                        <button\n                          className=\"btn\"\n                          aria-label=\"delete\"\n                          onClick={() =>\n                            this.setModalConfirmationState(\n                              this.props.token!,\n                              dataFileRecord.formDataId!,\n                            )\n                          }\n                        >\n                          <FontAwesomeIcon\n                            icon={faTrash}\n                            aria-hidden=\"true\"\n                          ></FontAwesomeIcon>\n                        </button>\n                      </td>\n                    </tr>\n                  )\n                } else {\n                  return (\n                    <tr key={dataFileRecord.formDataId! + key}>\n                      <td>\n                        <a\n                          href={`${pathpart}?formGroupId=${formGroupId}&formDataId=${dataFileRecord.formDataId}&dataFileHandleId=${dataFileRecord.dataFileHandleId}&submitted=1`}\n                        >\n                          {dataFileRecord.name}\n                        </a>\n                      </td>\n                      <td>{moment(dataFileRecord.modifiedOn).calendar()}</td>\n                      <td>{dataFileRecord.submissionStatus.state}</td>\n                      <td className=\"text-right\">\n                        <button\n                          className=\"btn\"\n                          aria-label=\"information\"\n                          onClick={() =>\n                            this.setState({ isShowInfoModal: true })\n                          }\n                        >\n                          <FontAwesomeIcon\n                            icon={faPhone}\n                            aria-hidden=\"true\"\n                          ></FontAwesomeIcon>\n                        </button>\n                      </td>\n                    </tr>\n                  )\n                }\n              })}\n            </tbody>\n          </table>\n          {viewMore}{' '}\n        </div>\n      )\n    }\n    return (\n      <>\n        {subhead} {content}\n      </>\n    )\n  }\n\n  renderSubmissionsTables = (\n    inProgress: { fileList: FormData[]; nextPageToken?: string },\n    submitted: { fileList: FormData[]; nextPageToken?: string },\n    pathpart: string,\n    formGroupId: string,\n  ): JSX.Element[] | JSX.Element => {\n    if (inProgress.fileList.length === 0 && submitted.fileList.length === 0) {\n      return (\n        <div className=\"text-center\">\n          <img src={NoSubmissionsIcon} alt=\"no submissions\"></img>\n          <p className=\"padding-full\">You have no submissions</p>\n        </div>\n      )\n    } else {\n      return [\n        this.renderSubmissionsTable(\n          inProgress.fileList,\n          pathpart,\n          formGroupId,\n          'IN_PROGRESS',\n          inProgress.nextPageToken,\n        ),\n\n        this.renderSubmissionsTable(\n          submitted.fileList,\n          pathpart,\n          formGroupId,\n          'SUBMITTED',\n          submitted.nextPageToken,\n        ),\n      ]\n    }\n  }\n\n  render() {\n    return (\n      <div className={`theme-${this.props.formClass}`}>\n        <div className=\"SRC-ReactJsonForm\">\n        {this.renderLoading(this.props.token, this.state.isLoading)}\n        {this.renderUnauthenticatedView(this.props.token)}\n\n        {!this.state.isLoading && (\n          <div className=\"file-grid \">\n            <h3>Your Submissions</h3>\n            <div className=\"panel panel-default padding-full\">\n              {this.renderSubmissionsTables(\n                this.state.inProgress,\n                this.state.submitted,\n                this.props.pathpart,\n                this.props.formGroupId,\n              )}\n\n              <div className=\"text-center\">\n                <a\n                  className=\"btn btn-large\"\n                  href={`${this.props.pathpart}?formGroupId=${this.props.formGroupId}`}\n                >\n                  Add new {this.props.itemNoun}\n                </a>\n              </div>\n            </div>\n          </div>\n        )}\n        {this.state.modalContext && (\n          <WarningModal\n            className={`theme-${this.props.formClass}`}\n            show={typeof this.state.modalContext !== 'undefined'}\n            title={this.modalTitle}\n            copy={this.modalCopy}\n            callbackArgs={this.state.modalContext.arguments}\n            onCancel={() => this.setState({ modalContext: undefined })}\n            onOK={(token: string, formDataId: string) =>\n              this.deleteFile(token, formDataId)\n            }\n          />\n        )}\n\n        <Modal\n          show={this.state.isShowInfoModal}\n          animation={false}\n          className={`theme-${this.props.formClass}`}\n        >\n          <Modal.Header\n            closeButton={false}\n            onHide={() => this.setState({ isShowInfoModal: false })}\n          >\n            <Modal.Title>More Information</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            Please{' '}\n            <a href=\"mailto:synapseInfo@sagebionetworks.org\">contact us</a> for\n            more information about your submission\n          </Modal.Body>\n          <Modal.Footer>\n            <Button\n              variant=\"success\"\n              onClick={() => this.setState({ isShowInfoModal: false })}\n            >\n              OK\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport { library, IconProp } from '@fortawesome/fontawesome-svg-core'\nimport { faLongArrowAltUp, faLongArrowAltDown } from '@fortawesome/free-solid-svg-icons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nlibrary.add(faLongArrowAltUp)\nlibrary.add(faLongArrowAltDown)\nlet Parser = require('rss-parser')\nlet rssParser = new Parser()\n\ntype RssState = {\n  rssFeed: any,\n  isLoadingError: boolean,\n  isShowingMoreItems: boolean,\n  itemId2MoreItem:{}\n}\n\nexport type RssFeedProps = {\n  url: string,\n  defaultItemsToShow: number\n}\n\nconst parser = new DOMParser()\n\nexport default class RssFeed extends React.Component<RssFeedProps, RssState> {\n  constructor(props: RssFeedProps) {\n    super(props)\n    this.state = { rssFeed: {}, isLoadingError: false, isShowingMoreItems: false, itemId2MoreItem: {} }\n  }\n\n  componentDidMount() {\n    const {\n      url\n    } = this.props\n    fetch(url)\n      .then(response => response.text())\n      .then(responseData => rssParser.parseString(responseData))\n      .then(rss => this.setState({ rssFeed: rss }))\n      .catch(err => this.setState({ isLoadingError: true }))\n  }\n\n  public onToggleReadMore = (itemId: string) => (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    let feedItemContentDiv = document.getElementById(itemId)\n    if (!this.state.itemId2MoreItem[itemId]) {\n      this.state.itemId2MoreItem[itemId] = {\n          text:'View full post',\n          icon: 'long-arrow-alt-down'\n      }\n    }\n    const isShow:boolean = this.state.itemId2MoreItem[itemId].text.includes('View full post')\n    if (feedItemContentDiv) {\n      let foundMoreItem:boolean = false\n      // hide or show the elements after the More element\n      for (let i = 0; i < feedItemContentDiv.children.length; i++) {\n          // skip over children until we find the id that starts with 'more-'\n          let child = feedItemContentDiv.children[i]\n          if (foundMoreItem) {\n            if (isShow) {\n              child.classList.remove('hidden')\n            } else {\n              child.classList.add('hidden')\n            }\n          } else {\n            foundMoreItem = child.id.includes('more-')\n          }\n        }\n    }\n    // toggle, by updating text and icon\n    const newText:string = isShow ? 'Hide' : 'View full post'\n    const newIcon:IconProp = isShow ? 'long-arrow-alt-up' : 'long-arrow-alt-down'\n    this.state.itemId2MoreItem[itemId] = {\n      text: newText,\n      icon: newIcon\n    }\n    this.setState({ itemId2MoreItem: this.state.itemId2MoreItem })\n  }\n\n  public onClickShowMoreItems = () => (event: React.SyntheticEvent<HTMLButtonElement>) => {\n    this.setState({isShowingMoreItems: true})\n  }\n\n  render() {\n    return (\n      <ul className=\"srcRssFeed\">\n        {\n          this.state.rssFeed.items &&\n          this.state.rssFeed.items.map((item: any, index: any) => {\n            // There are 2 \"more\" buttons here.  One is to hide long article content.  See moreElement and onClickReadMore()\n            // The other is to hide the large number of items in a particular feed (usually a max of 10 are returned).  See state.isShowingMoreItems\n            let parsedHtml = parser.parseFromString(item['content:encoded'], 'text/html')\n            let bodyElement = parsedHtml.querySelector('body')\n            let moreElement = parsedHtml.querySelector('[id^=\"more-\"]')\n            if (moreElement && bodyElement) {\n              let foundMoreElement = false\n              const children = bodyElement.children\n              for (let i = 0; i < children.length; i++) {\n                let child = children[i]\n                if (foundMoreElement) {\n                  child.classList.add('hidden')\n                }\n                if (child === moreElement) {\n                  foundMoreElement = true\n                }\n              }\n            }\n            let isItemVisible: boolean = index < this.props.defaultItemsToShow || this.state.isShowingMoreItems\n            \n            let showMoreText: string = 'View full post'\n            let showMoreIcon: IconProp = 'long-arrow-alt-down'\n            if (this.state.itemId2MoreItem[item.guid]) {\n              showMoreText = this.state.itemId2MoreItem[item.guid].text\n              showMoreIcon = this.state.itemId2MoreItem[item.guid].icon\n            }\n            return (\n              <li key={item.guid} className={`srcRssFeedItem ${isItemVisible ? '' : 'hidden'}`}>\n                <div className=\"srcRssFeedItemContent\">\n                  <div id={item.guid} dangerouslySetInnerHTML={{ __html: parsedHtml.documentElement.innerHTML }}></div>\n                  {\n                    moreElement &&\n                    <div className=\"clearfix\">\n                      <button\n                        style={{ textAlign: 'left', margin: 0, padding: '0px 50px 25px 35px' }}\n                        className=\"SRC-primary-text-color SRC-basicButton SRC-floatRight\"\n                        onClick={this.onToggleReadMore(item.guid)}\n                      >\n                        {showMoreText}\n                        <FontAwesomeIcon key={`${item.guid}${index}`}\n                          style={{ marginLeft: '5px' }}\n                          icon={showMoreIcon}\n                        />\n                      </button>\n                    </div>\n                  }\n                </div>\n              </li>\n            )\n          })\n        }\n        {\n          this.state.rssFeed.items &&\n          this.state.rssFeed.items.length > this.props.defaultItemsToShow &&\n          !this.state.isShowingMoreItems &&\n          <div className=\"clearfix\">\n            <button className=\"btn SRC-grayBackground SRC-roundBorder SRC-floatRight\" onClick={this.onClickShowMoreItems()}>View All</button>\n          </div>\n        }\n        {\n          this.state.isLoadingError &&\n          <div>\n            Unable to load feed: {this.props.url}\n          </div>\n        }\n      </ul>\n    )\n  }\n}\n","import * as React from 'react'\n\nexport type TwitterFeedProps = {\n  href: string\n}\n\nexport default class TwitterFeed extends React.Component<TwitterFeedProps> {\n  constructor(props: TwitterFeedProps) {\n    super(props)\n  }\n\n  componentDidMount() {\n    if (typeof (window as any).twttr !== 'undefined') {\n\t\t\t(window as any).twttr.widgets.load(document.getElementById(this.props.href));\n\t\t}\n  }\n\n  render() {\n    return <div>\n      <a id={this.props.href} className=\"twitter-timeline\" data-height=\"600\" data-theme=\"light\" href={this.props.href}></a>\n    </div>\n  }\n}\n","import * as React from 'react'\nimport RssFeed from './RssFeed'\nimport TwitterFeed from './TwitterFeed'\nimport MailchimpSubscribe from 'react-mailchimp-subscribe'\n\ntype MenuState = {\n  menuIndex: number\n}\n\nexport type MenuConfig = {\n  feedName: string\n  feedDescription: string\n  feedUrl: string\n  defaultItemsToShow: number\n  mailChimpListName?: string\n  mailChimpUrl?: string\n  twitterFeedUrl?: string\n}\nexport type NewsFeedMenuProps = {\n  menuConfig: MenuConfig []\n}\n\nexport default class NewsFeedMenu extends React.Component<NewsFeedMenuProps, MenuState> {\n  constructor(props: NewsFeedMenuProps) {\n    super(props)\n    // See here - https://stackoverflow.com/questions/40063468/react-component-initialize-state-from-props/47341539#47341539\n    this.state = {\n      menuIndex: 0\n    }\n    this.switchFeed = this.switchFeed.bind(this)\n  }\n\n  /**\n   * Handle user clicking menu item, event isn't used so we denote it as an _\n   *\n   * @memberof Menu\n   */\n  public switchFeed = (menuIndex: number) => (_: React.SyntheticEvent<HTMLDivElement>) => {\n    // there's an odd bug where clicking a menu item twice will select the first tab,\n    // this is a fix for that, but this shouldn't be necessary\n    if (this.state.menuIndex !== menuIndex) {\n      this.setState({ menuIndex })\n    }\n  }\n\n  public render() {\n    const menuDropdown = this.renderMenu()\n    const { menuConfig } = this.props\n    const { feedName, feedDescription, feedUrl, defaultItemsToShow, mailChimpUrl, twitterFeedUrl, mailChimpListName } = menuConfig[this.state.menuIndex]\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-xs-2 SRC-menuLayout SRC-menuPadding\">\n          {menuDropdown}\n        </div>\n        <div className=\"col-xs-10\">\n          {\n            <>\n              {\n                mailChimpUrl &&\n                <div className=\"SRC-mailchimpSubscribeContainer\">\n                  <h4>Subscribe</h4>\n                  <p className=\"SRC-marginBottomTop\">Subscribe to receive the {mailChimpListName} by e-mail, which provides information and updates related to the Portal.\n                  You can opt out at any time by using the unsubscribe link within the e-mail.\n                  We will not share your information with any third parties or use it for any other purposes.</p>\n                  <div className=\"SRC-marginBottomTop\">\n                    <MailchimpSubscribe\n                      url={mailChimpUrl}\n                    />\n                  </div>\n                </div>\n              }\n              <h3 className=\"srcRssFeed\">{feedName}</h3>\n              <p>{feedDescription}</p>\n              <RssFeed\n                key={feedUrl}\n                url={feedUrl}\n                defaultItemsToShow={defaultItemsToShow}\n              />\n            </>\n          }\n          {\n            twitterFeedUrl &&\n            <TwitterFeed\n              href={twitterFeedUrl}\n            />\n          }\n        </div>\n      </div>\n    )\n  }\n\n  private renderMenu() {\n    const { menuConfig } = this.props\n    return menuConfig.map((config: MenuConfig, index: number) => {\n      const isSelected: boolean = (index === this.state.menuIndex)\n      const style: any = {}\n      let selectedStyling: string = ''\n      if (isSelected) {\n        selectedStyling = 'SRC-pointed SRC-whiteText SRC-primary-background-color SRC-pointed-triangle-right SRC-primary-background-color-border-left'\n      } else {\n        selectedStyling = 'SRC-blackText SRC-light-background'\n      }\n      return (\n        <div\n          key={config.feedName}\n          className={`SRC-hand-cursor SRC-menu-button-base SRC-gap SRC-hoverWhiteText SRC-primary-background-color-hover ${selectedStyling}`}\n          onClick={this.switchFeed(index)}\n          role=\"button\"\n          tabIndex={0}\n          style={style}\n        >\n          {config.feedName}\n        </div>\n      )\n    })\n  }\n}","import * as React from 'react'\nimport CardContainerLogic from '../../../lib/containers/CardContainerLogic'\nimport { SynapseConstants } from '../../../lib'\nimport { GenericCardSchema } from '../../../lib/containers/GenericCard'\nimport brainSvg from './icons/brain.svg'\nimport circleSvg from './icons/circle.svg'\nimport mouseSvg from './icons/mouse.svg'\nimport resilienceadSvg from './icons/resiliencead.svg'\n\nexport default class CardContainerLogicDemo extends React.Component {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {}\n  }\n\n  render() {\n    const iconOptions = {\n      'AMP-AD': circleSvg,\n      'M2OVE-AD': brainSvg,\n      'MODEL-AD': mouseSvg,\n      'Resilience-AD': resilienceadSvg\n    }\n    // @ts-ignore\n    const genericToolSchema: GenericCardSchema = {\n      type: 'Tool',\n      title: 'name',\n      subTitle: 'contact',\n      description: 'summary',\n      icon: 'type',\n      link: 'link',\n      secondaryLabels: ['subtype', 'disease', 'manifestation','Sample_Type','fundingAgency','studyName']\n    }\n    const genericCardSchemaHeader: GenericCardSchema = {\n      type: 'PROGRAM',\n      title: 'Full Name',\n      subTitle: 'Short Description',\n      description: 'Long Description',\n      icon: 'Program',\n      secondaryLabels: ['Full Name']\n    }\n    // @ts-ignore\n    const genericCardSchema: GenericCardSchema = {\n      type: 'Study',\n      title: 'Study_Name',\n      subTitle: 'Data_Contributor',\n      description: 'Study_Description',\n      icon: 'Access_Type',\n      secondaryLabels: [\n        'DataType_All',\n        'Diagnosis_or_Model_System',\n        'Number_of_Individuals',\n        'Sample_Type',\n        'Species' ,\n        'Cohort_Type',\n        'Study_Status',\n        'Consortium',\n        'Grant',\n      ]\n    }\n    return (\n      <div>\n        <hr/>\n        <p> Generic Card Rendering </p>\n        <CardContainerLogic\n          type={SynapseConstants.GENERIC_CARD}\n          // tslint:disable-next-line\n          sql={\"SELECT * FROM syn17024173\"}\n          searchParams={{ Program: 'AMP-AD' }}\n          genericCardSchema={genericCardSchemaHeader}\n          backgroundColor={'#5960a5'}\n          isHeader={true}\n          iconOptions={iconOptions}\n        />\n        {/* <div className=\"container-fluid\">\n          <div className=\"row\">\n            <div className=\"col-md-10 col-md-offset-1\">\n              <CardContainerLogic\n                type={SynapseConstants.GENERIC_CARD}\n                sql={'SELECT * FROM syn16859448'}\n                unitDescription=\"studies\"\n                genericCardSchema={genericToolSchema}\n                secondaryLabelLimit={3}\n              />\n            </div>\n          </div>\n        </div> */}\n        <CardContainerLogic\n          type={SynapseConstants.MEDIUM_USER_CARD}\n          sql={'SELECT ownerID as ownerId FROM syn13897207'}\n          loadingScreen={<div> Im loading as fast I can !!! </div>}\n        />\n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport QueryWrapper from 'lib/containers/QueryWrapper'\nimport Search, { Searchable } from 'lib/containers/Search'\nimport { SynapseConstants } from 'lib'\nimport { GenericCardSchema } from 'lib/containers/GenericCard'\nimport { CommonCardProps } from 'lib/containers/CardContainerLogic'\nimport CardContainer from 'lib/containers/CardContainer';\n\nexport const SearchDemo:React.SFC = () => {\n  const sql = \"SELECT * FROM syn20337467\" \n  const facetAliases = {\n    contributor: 'Contributor',\n    diagnosis: 'Diagnosis',\n  }\n  const searchable: Searchable = [\n    {\n      columnName: 'summary', \n      hintText: 'summary'\n    },\n    {\n      columnName: 'contributor', \n      hintText: 'Jane'\n    },\n    {\n      columnName: 'diagnosis',\n      hintText: 'LOAD'\n    },\n    {\n      columnName: 'modelType',\n      hintText: 'hint'\n    },\n  ]\n  const genericCardSchema: GenericCardSchema = {\n    title: 'Title',\n    type: 'Generic Tool',\n    subTitle: 'softwareType',\n    description: 'summary',\n    icon: 'icon',\n    secondaryLabels: [\n      'contributor',\n      'diagnosis',\n      'program'\n    ]\n  }\n  const commonCardProps: CommonCardProps = {\n    type: SynapseConstants.GENERIC_CARD,\n    genericCardSchema,\n  }\n  return (\n    <div className=\"col-xs-8 col-xs-offset-2\">\n      <QueryWrapper\n        facetAliases={facetAliases}\n        rgbIndex={5}\n        initQueryRequest={{\n          concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n          partMask: SynapseConstants.BUNDLE_MASK_QUERY_COLUMN_MODELS |\n            SynapseConstants.BUNDLE_MASK_QUERY_FACETS |\n            SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n            SynapseConstants.BUNDLE_MASK_QUERY_COUNT |\n            SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n          query: {\n            sql,\n            limit: 25,\n            offset: 0\n          }\n        }}\n        showBarChart={false}\n        unitDescription={'studies'}\n        >\n        <Search\n          searchable={searchable}\n          isQueryWrapperMenuChild={false}\n        />\n        <CardContainer\n          {...commonCardProps}\n        />\n      </QueryWrapper>\n    </div>\n  )\n}\n\nexport default SearchDemo","import * as React from 'react'\nimport ModalDownload from '../../../lib/containers/ModalDownload'\n\ntype State = {\n  showModal: boolean\n}\n\nclass ModalDownloadDemo extends React.Component<{}, State> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      showModal: false\n    }\n  }\n\n  onClose = () => {\n    this.setState({\n      showModal: false\n    })\n  }\n\n  onOpen = () => {\n    console.log('opening')\n    this.setState({\n      showModal: true\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"container\">\n        <button onClick={this.onOpen} className=\"btn btn-primary\" > Show ModalDownload </button>\n        {\n          this.state.showModal\n          &&\n          <ModalDownload\n            sql={'SELECT * from syn17328596'}\n            entityId={'syn17328596'}\n            onClose={this.onClose}\n          />\n        }\n      </div>\n    )\n  }\n}\n\nexport default ModalDownloadDemo","import * as React from 'react'\nimport UserCard from '../../../lib/containers/UserCard'\nimport { SynapseConstants } from '../../../lib'\nimport MarkdownSynapse from '../../../lib/containers/MarkdownSynapse'\n\nexport default class UserBadgeSmallDemo extends React.Component<any, any> {\n  constructor(props: any) {\n    super(props)\n  }\n  public render() {\n    const profiles = [\n      '3376985',\n      '1131050',\n      '273960',\n      '3346401',\n      '3374422',\n      '273950',\n      '273950',\n    ]\n    return (\n      <React.Fragment>\n        <div className=\"container\">\n          <div className=\"row\">\n            <h3>User Card Small </h3>\n             <p> sans photo- </p>\n            <UserCard\n              ownerId={'273950'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <p> without text </p>\n            <UserCard\n              ownerId={'3374422'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <hr/>\n             <p> with custom link- </p>\n            <UserCard\n              ownerId={'273950'}\n              size={SynapseConstants.SMALL_USER_CARD}\n              link={'https://google.com'}\n            />\n            <UserCard\n              ownerId={'3374422'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n              link={'https://google.com'}\n            />\n            <hr/>\n            <p> without tooltip </p>\n            <div className=\"SRC-centerContent\">\n              <UserCard\n                ownerId={'3374422'}\n                hideTooltip={true}\n                size={SynapseConstants.SMALL_USER_CARD}\n              />\n              <UserCard\n                ownerId={'3346401'}\n                hideTooltip={true}\n                size={SynapseConstants.SMALL_USER_CARD}\n              />\n            </div>\n            <hr/>\n            <p> with photo- </p>\n            <UserCard\n              ownerId={'3346401'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <UserCard\n              ownerId={'1131050'}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <p> without text- </p>\n            <UserCard\n              ownerId={'273960'}\n              hideText={true}\n              size={SynapseConstants.SMALL_USER_CARD}\n            />\n            <hr/>\n            <p>inside of markdown-</p>\n              <MarkdownSynapse\n                wikiId={'588827'}\n                ownerId={'syn18380882'}\n              />\n          </div>\n          <div className=\"row\">\n            <h3> User Card Large </h3>\n            <p> with photo- </p>\n            <UserCard\n              ownerId={'1131050'}\n              // tslint:disable-next-line:jsx-no-lambda\n              size={SynapseConstants.LARGE_USER_CARD}\n              menuActions={[\n                {\n                  field: 'Projects',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'Profile',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'SEPERATOR',\n                },\n                {\n                  field: 'Teams',\n                  callback: (userProfile) => { console.log(userProfile) }\n                }\n              ]}\n            />\n            <br/>\n            <p> sans photo- </p>\n            <br/>\n            <UserCard\n              ownerId={'3374422'}\n              size={SynapseConstants.LARGE_USER_CARD}\n            />\n            <br/>\n            <br/>\n            <UserCard\n              ownerId={'345424'}\n              size={SynapseConstants.LARGE_USER_CARD}\n              menuActions={[\n                {\n                  field: 'Projects',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'Profile',\n                  callback: (userProfile) => { console.log(userProfile) }\n                },\n                {\n                  field: 'SEPERATOR',\n                },\n                {\n                  field: 'Teams',\n                  callback: (userProfile) => { console.log(userProfile) }\n                }\n              ]}\n            />\n          </div>\n        </div>\n        <h3> User Card Medium Wrapping Example </h3>\n        <div className=\"SRC-card-grid-row\">\n          {\n            [1, 2, 3, 4, 5].map(\n              (_el, index) => {\n                return (\n                  <div className=\"SRC-grid-item\" key={index}>\n                    <UserCard\n                      hideEmail={(index % 2) === 0}\n                      menuActions={[\n                        {\n                          field: 'Projects',\n                          callback: (userProfile) => { console.log(userProfile) }\n                        },\n                        {\n                          field: 'Profile',\n                          callback: (userProfile) => { console.log(userProfile) }\n                        },\n                        {\n                          field: 'SEPERATOR',\n                        },\n                        {\n                          field: 'Teams',\n                          callback: (userProfile) => { console.log(userProfile) }\n                        }\n                      ]}\n                      ownerId={profiles[index]}\n                      size={SynapseConstants.MEDIUM_USER_CARD}\n                      link={index % 2 ? 'https://google.com' : ''}\n                    />\n                  </div>\n                )\n              }\n            )\n          }\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n","import * as React from 'react'\nimport MarkdownSynapse, { MarkdownSynapseProps } from '../../../lib/containers/MarkdownSynapse'\n\ntype State = {\n  index: number,\n  markdownPropsArray: MarkdownSynapseProps []\n}\n\nexport default class MarkdownSynapseDemo extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      index: 5,\n      markdownPropsArray: [\n        {\n          // footnotes with html\n          ownerId: 'syn3157182'\n        },\n        {\n          // with details tag \n          ownerId: 'syn12666371',\n          wikiId: '585317'\n        },\n        {\n          //  with references \n          ownerId:'syn17100797',\n          wikiId: '587923'\n        },\n        {\n          // with  toc \n          ownerId:'syn17100797',\n          wikiId: '587923'\n        },\n        {\n          ownerId: 'syn18142975'\n        },\n        {\n          // nested link\n          ownerId: 'syn12666371',\n          wikiId: '595383',\n        },\n      ]\n    }\n  }\n  render() {\n    const {\n      index,\n      markdownPropsArray\n    } = this.state\n    const props = markdownPropsArray[index]\n    return (\n      <div className=\"container\">\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({index: 0})}}\n        >\n          Footnotes with html\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({index: 1})}}\n        >\n          Details tag \n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({index: 2})}}\n        >\n           References \n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({index: 2})}}\n          >\n          Table of Contents\n        </button>\n        <button\n          className=\"btn btn-default\"\n          onClick={() => {this.setState({index: 4})}}\n          >\n          Show nested anchor\n        </button>\n        {/* footnotes with html */}\n        <MarkdownSynapse\n          {...props}\n        />      \n      </div>\n    )\n  }\n}\n","import * as React from 'react'\nimport NewsFeedMenu from '../../../lib/containers/NewsFeedMenu'\n\nexport const NewsFeedDemo:React.SFC = () => {\n  return (\n    <NewsFeedMenu\n      menuConfig={[\n        {\n          feedName:'Data Releases',\n          feedDescription:'The AMP-AD Knowledge Portal releases new Alzheimer\\'s disease data twice annually, in May and November. Data releases may include new data, analyses, and results; as well as changes and updates to previously released data.',\n          feedUrl:'https://portalnews.wpengine.com/?feed=rss2&cat=4',\n          defaultItemsToShow:3,\n        },\n        {\n          feedName:'Updates',\n          feedDescription:'The AMP-AD Knowledge Portal reaches the broader scientific community through multiple channels that encourage open-science collaborations. News updates include videos, events, and presentations that highlight the community behind the data.',\n          feedUrl:'https://portalnews.wpengine.com/?feed=rss2&cat=3',\n          defaultItemsToShow:3,\n          twitterFeedUrl:'https://twitter.com/AMPADPortal?ref_src=twsrc%5Etfw'\n        },\n        {\n          feedName:'Newsletter',\n          feedDescription:'The AMP-AD Knowledge Portal sends a quarterly newsletter to interested members of the scientific community, delivering consolidated information and updates related to the Portal.',\n          feedUrl:'https://portalnews.wpengine.com/?feed=rss2&cat=5',\n          defaultItemsToShow:3,\n          mailChimpListName:'AMP-AD quarterly newsletter',\n          mailChimpUrl:'https://sagebase.us7.list-manage.com/subscribe/post?u=b146de537186191a9d2110f3a&amp;id=96b614587a'\n        },\n      ]}\n    />\n  )\n}\n\n\n","import * as React from 'react'\nimport { TokenContext } from '../App'\nimport { FormGroup, FormData, ListRequest, ListResponse, StatusEnum } from 'lib/utils/jsonResponses/Forms'\nimport { SynapseClient } from 'lib'\nimport { FileUploadComplete } from 'lib/utils/jsonResponses/FileUploadComplete'\n\ntype FormServicesIntegrationDemoState = {\n  token?: string\n  formGroup?: FormGroup\n  formData?: FormData\n  myFormDataList?: ListResponse\n  formAdminFormDataList?: ListResponse\n}\n\nclass FormServicesIntegrationDemo extends React.Component<{}, FormServicesIntegrationDemoState> {\n\n  constructor(props: any) {\n    super(props)\n    this.state = {\n    }\n    this.onCreateFormGroup = this.onCreateFormGroup.bind(this)\n    this.onCreateFormData = this.onCreateFormData.bind(this)\n    this.onUpdateFormData = this.onUpdateFormData.bind(this)\n    this.onSubmitFormData = this.onSubmitFormData.bind(this)\n    this.listMyFormData = this.listMyFormData.bind(this)\n    this.listFormAdminFormData = this.listFormAdminFormData.bind(this)\n    this.onReadFormDataFileHandleContents = this.onReadFormDataFileHandleContents.bind(this)\n  }\n\n  public onCreateFormGroup(): void {\n    SynapseClient.createFormGroup('AAMP-ADExternalContribution(production)', this.state.token!)\n      .then((data: FormGroup) => {\n        console.log('Successfully created FormGroup', data)\n        this.setState({ formGroup: data })\n      })\n      .catch((error: any) => console.error('Failed to create form group', error))\n  }\n  public onUpdateFormData(): void {\n    SynapseClient.uploadFile(this.state.token, 'my test file', new Blob(['hello form data 2'])).then((fileUploadComplete: FileUploadComplete) => {\n      console.log('Successfully created test file handle, now update the form data!')\n      SynapseClient.updateFormData(this.state.formData!.formDataId!, 'my test form data', fileUploadComplete.fileHandleId, this.state.token!)\n        .then((data: FormData) => {\n          console.log('Successfully updated FormData', data)\n          this.setState({ formData: data })\n        })\n        .catch((error: any) => console.error('Failed to update FormData', error))\n    }).catch((error: any) => console.error('Failed to update a new file handle:', error))\n  }\n\n  public onCreateFormData(): void {\n    SynapseClient.uploadFile(this.state.token, 'my test file', new Blob(['hello form data'])).then((fileUploadComplete: FileUploadComplete) => {\n      console.log('Successfully created test file handle, now create the form data!')\n      SynapseClient.createFormData(this.state.formGroup!.groupId!, 'my test form data', fileUploadComplete.fileHandleId, this.state.token!)\n        .then((data: FormData) => {\n          console.log('Successfully created FormData', data)\n          this.setState({ formData: data })\n        })\n        .catch((error: any) => console.error('Failed to create FormData', error))\n    }).catch((error: any) => console.error('Failed to create a new file handle:', error))\n  }\n\n  public onSubmitFormData(): void {\n    SynapseClient.submitFormData(this.state.formData!.formDataId!, this.state.token!)\n      .then((data: FormData) => {\n        console.log('Successfully submitted FormData', data)\n      })\n      .catch((error: any) => console.error('Failed to submit form data', error))\n  }\n\n  private listMyFormData = () => {\n    if (this.state.token && this.state.formGroup && !this.state.myFormDataList) {\n      let request: ListRequest = {\n        groupId: this.state.formGroup.groupId!,\n        filterByState: [StatusEnum.ACCEPTED, StatusEnum.SUBMITTED_WAITING_FOR_REVIEW, StatusEnum.WAITING_FOR_SUBMISSION]\n      }\n      SynapseClient.listFormData(request, this.state.token).then((resp: ListResponse) => {\n        console.log('Successfully got a my FormData list', resp)\n        this.setState({ myFormDataList: resp })\n      }).catch((error: any) => console.error('Failed to get my FormData list', error))\n    }\n  }\n\n  private listFormAdminFormData = () => {\n    if (this.state.token && this.state.formGroup && !this.state.formAdminFormDataList) {\n      let request: ListRequest = {\n        groupId: this.state.formGroup.groupId!,\n        filterByState: [StatusEnum.ACCEPTED, StatusEnum.SUBMITTED_WAITING_FOR_REVIEW]\n      }\n      SynapseClient.listFormDataAsFormAdmin(request, this.state.token).then((resp: ListResponse) => {\n        console.log('Successfully got FormGroup admin list', resp)\n        this.setState({ formAdminFormDataList: resp })\n      }).catch((error: any) => console.error('Failed to get FormGroup admin FormData list', error))\n    }\n  }\n\n  private onReadFormDataFileHandleContents = () => {\n    SynapseClient.getFileHandleContentFromID(this.state.formData!.dataFileHandleId, this.state.token!)\n    .then((data: string) => {\n      console.log('Successfully fetched file handle contents: ', data)\n    })\n    .catch((error: any) => console.error('Failed to read form data file handle contents', error))\n\n  }\n\n  public componentDidUpdate() {\n    this.listMyFormData()\n    this.listFormAdminFormData()\n  }\n\n  render() {\n    return (\n      <TokenContext.Consumer>\n        {\n          (token: string) => {\n            if (token !== this.state.token) {\n              this.setState({\n                token\n              })\n            }\n            if (token) {\n              return <>\n                <div>\n                  <a\n                    onClick={this.onCreateFormGroup}\n                  >\n                    Create Form Group\n                    <br />\n                  </a>\n                  {\n                    !this.state.formData && <a\n                      onClick={this.onCreateFormData}\n                    >\n                      Create Form Data\n                      <br />\n                  </a>\n                  }\n                  {\n                    this.state.formData && <a\n                      onClick={this.onReadFormDataFileHandleContents}\n                    >\n                      Get Form Data FileHandle contents\n                      <br />\n                  </a>\n                  }\n\n                  {\n                    this.state.formData && <a\n                      onClick={this.onUpdateFormData}\n                    >\n                      Update Form Data\n                      <br />\n                  </a>\n                  }\n                  {\n                    this.state.formData && <a\n                      onClick={this.onSubmitFormData}\n                    >\n                      Submit Form Data\n                      <br />\n                  </a>\n                  }\n                </div>\n                {\n                  <h3>My FormData</h3>\n                }\n                {\n                  (this.state.myFormDataList) &&\n                  <table>\n                   <thead>\n                    <tr><th>Form Data name</th><th>Data File Handle ID</th><th>Status</th><th>Rejection Reason</th></tr>\n                    </thead>\n                    <tbody>\n                    {this.state.myFormDataList.page.map((value) => {\n                      return <tr><td>{value.name}</td><td>{value.dataFileHandleId}</td><td>{value.submissionStatus.state}</td><td>{value.submissionStatus.rejectionMessage}</td></tr>\n                    })}\n                    </tbody>\n                  </table>\n                }\n                {\n                  <h3>FormGroup Admin FormData</h3>\n                }\n                {\n                  (this.state.formAdminFormDataList) &&\n                  <table>\n                    <thead>\n                    <tr><th>Form Data name</th><th>Data File Handle ID</th><th>Status</th><th>Rejection Reason</th></tr>\n                    </thead>\n                    <tbody>\n                    {this.state.formAdminFormDataList.page.map((value) => {\n                      return <tr><td>{value.name}</td><td>{value.dataFileHandleId}</td><td>{value.submissionStatus.state}</td><td>{value.submissionStatus.rejectionMessage}</td></tr>\n                    })}\n                    </tbody>\n                  </table>\n                }\n              </>\n            } else return <><p>Please log in and reload this route</p></>\n          }\n        }\n      </TokenContext.Consumer>\n    )\n  }\n}\n\nexport default FormServicesIntegrationDemo","import * as React from 'react'\nimport { Link, Route, match } from 'react-router-dom'\nimport QueryWrapperMenuDemo from './QueryWrapperMenuDemo'\nimport CardContainerLogicDemo from './CardContainerLogicDemo'\nimport SearchDemo from './SearchDemo'\nimport ModalDownloadDemo from './ModalDownloadDemo'\nimport UserCardDemo from './UserCardDemo'\nimport MarkdownSynapseDemo from './MarkdownSynapseDemo'\nimport { NewsFeedDemo } from './NewsFeedDemo'\nimport FormServicesIntegrationDemo from './FormServicesIntegrationDemo'\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\nconst App = ({ match }: { match: match }) => {\n  return (\n      <div>\n        <h2>Links to components under development </h2>\n        <ul>\n          <li>\n            <Link to={`${match.url}/QueryWrapperMenuDemo`}>QueryWrapperMenuDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/SearchDemo`}>SearchDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/CardContainerLogicDemo`}>CardContainerLogicDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/UserBadgeDemo`}>UserBadgeDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/MarkdownSynapseDemo`}>MarkdownSynapseDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/NewsFeedDemo`}>NewsFeedDemo</Link>\n          </li>\n          <li>\n            <Link to={`${match.url}/FormServicesIntegrationDemo`}>FormServicesIntegrationDemo</Link>\n          </li>\n\n          <li>\n            <Link to={`${match.url}/ModalDownloadDemo`}>ModalDownload</Link>\n          </li>\n        </ul>\n\n        <Route\n          exact={true}\n          path={`${match.url}/QueryWrapperMenuDemo`}\n          render={() => <QueryWrapperMenuDemo rgbIndex={0}/>}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/SearchDemo`}\n          render={() => <SearchDemo />}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/CardContainerLogicDemo`}\n          component={CardContainerLogicDemo}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/UserBadgeDemo`}\n          component={() => <UserCardDemo/>}\n        />\n\n        <Route\n          exact={true}\n          path={`${match.url}/MarkdownSynapseDemo`}\n          component={() => <MarkdownSynapseDemo/>}\n        />\n        <Route\n          exact={true}\n          path={`${match.url}/NewsFeedDemo`}\n          component={() => <NewsFeedDemo/>}\n        />\n        <Route\n          exact={true}\n          path={`${match.url}/FormServicesIntegrationDemo`}\n          component={() => <FormServicesIntegrationDemo/>}\n        />\n        <Route\n          exact={true}\n          path={`${match.url}/ModalDownloadDemo`}\n          component={() => <ModalDownloadDemo/>}\n        />\n\n        <Route\n          exact={true}\n          path={match.path}\n          component={() => <div/>}\n        />\n\n      </div>\n  )\n}\n\nexport default App\n","import * as React from 'react';\nimport { Link, BrowserRouter as Router, Route } from 'react-router-dom'\nimport Login from '../../lib/containers/Login'\nimport logoSvg from '../../images/logo.svg'\nimport '../style/App.scss'\nimport '../style/DemoStyle.scss'\nimport Demo from './Demo'\nimport Playground from './playground/Playground'\nimport DrugUploadTool from '../../lib/containers/drug_upload_tool/DrugUploadTool'\nimport FileGrid from '../../lib/containers/drug_upload_tool/UserFileGrid'\nimport { SynapseClient } from '../../lib/utils/'\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\n\ntype AppState = {\n  token: string\n}\nexport const TokenContext = React.createContext('')\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      token: '',\n    }\n  }\n\n  handleChange = (updatedState: {}): void => {\n    this.setState(updatedState)\n  }\n\n  public componentDidMount() {\n    // Note:  All portals should do this once on the initial app load.\n    // This looks for the session token cookie (HttpOnly, unable to directly access), and initialize the session if it does exists.\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n      .then((sessionToken: any) => this.handleChange({ token: sessionToken }))\n      .catch((error: any) => {\n        console.error(error)\n      })\n  }\n\n  renderLoginAndSignout(token: string): JSX.Element {\n    const signedInState = (\n      <div className=\"bg-success text-center\" role=\"alert\">\n        You are logged in.&nbsp;\n        <button\n          onClick={() => {\n            SynapseClient.signOut()\n          }}\n        >\n          <span aria-hidden=\"true\">Sign out</span>\n        </button>\n      </div>\n    )\n\n    const notSignedInState = (\n      <div className=\"text-center\">\n        <h4>Synapse Production (Google SSO redirects here)</h4>\n        <Login\n          token={SynapseClient.IS_OUTSIDE_SYNAPSE_ORG ? token : this.state.token}\n          theme={'light'}\n          icon={true}\n        />\n        <details><summary>Synapse Staging (Google SSO redirects to staging site)</summary>\n          <Login\n            token={SynapseClient.IS_OUTSIDE_SYNAPSE_ORG ? token : this.state.token}\n            theme={'dark'}\n            icon={true}\n            googleRedirectUrl={\n              'https://staging.synapse.org/Portal/oauth2callback?oauth2provider=GOOGLE_OAUTH_2_0'\n            }\n            repoEndpoint={'https://repo-staging.prod.sagebase.org/'}\n            swcEndpoint={'https://staging.sagebase.org/'}\n          />\n        </details>\n        <hr />\n      </div>\n    )\n\n    if (token && token !== '') {\n      return signedInState\n    } else {\n      return notSignedInState\n    }\n  }\n\n  public render(): JSX.Element {\n    return (\n      <TokenContext.Provider value={this.state.token}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <div>\n            <div className=\"App-header text-center\">\n              <img src={logoSvg} className=\"App-logo\" alt=\"logo\" />\n              <h4 className=\"white-text\">Synapse React Client Demo</h4>\n            </div>\n            {this.renderLoginAndSignout(this.state.token)}\n            <ul>\n              <li>\n                <Link to=\"/\">Demo</Link>\n              </li>\n              <li>\n                <Link to=\"/Playground\">Playground</Link>\n              </li>\n              <li>\n                <Link to=\"/drugUploadTool\">Drug Upload Tool</Link>\n              </li>\n              <li>\n                <Link to=\"/contribReqForm\">AMP-AD external data contribution </Link>\n              </li>\n            </ul>\n\n            <Route exact={true} path=\"/\" component={Demo} />\n            <Route path=\"/Playground\" component={Playground} />\n            <Route\n              exact={true}\n              path=\"/drugUploadTool\"\n              render={props => {\n                const searchParamsProps: any = {}\n                // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams -- needs polyfill for ie11\n                const searchParams = new URLSearchParams(props.location.search)\n                searchParams.forEach((value, key) => {\n                  searchParamsProps[key] = value\n                })\n                return !props.location.search ? (\n                  <FileGrid\n                    pathpart=\"drugUploadTool\"\n                    token={this.state.token}\n                    formClass=\"drug-upload-tool\"\n          \n                    formGroupId=\"9\"\n                    itemNoun=\"Compound\"\n                  />\n                ) : (\n                  <DrugUploadTool\n                    {...props}\n           \n                    formSchemaEntityId=\"syn20680102\"\n                    fileNamePath=\"naming.compound_name\"\n                    formUiSchemaEntityId=\"syn20693568\"\n                    formNavSchemaEntityId=\"syn20680027\"\n                    token={this.state.token}\n                    formTitle=\"Your Submission\"\n                    formClass=\"drug-upload-tool\"\n                    searchParams={searchParamsProps}\n                  />\n                )\n              }}\n            />\n\n            {/*------------------- contributions request form ---------------------------------*/}\n            <Route\n              exact={true}\n              path=\"/contribReqForm\"\n              render={props => {\n                let searchParamsProps: any = {}\n                // https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams -- needs polyfill for ie11\n                const searchParams = new URLSearchParams(props.location.search)\n                searchParams.forEach((value, key) => {\n                  searchParamsProps[key] = value\n                })\n                return !props.location.search ? (\n                  <FileGrid\n                    pathpart=\"contribReqForm\"\n                    formGroupId=\"11\"\n                    token={this.state.token}\n                    formClass=\"contribution-request\"\n                    itemNoun={'Contribution Request'}\n\n                  />\n                ) : (\n                  <DrugUploadTool\n                    {...props}\n                    formSchemaEntityId=\"syn20692910\"\n                    fileNamePath=\"study.submission_name\"\n                  \n                    formUiSchemaEntityId=\"syn20692911\"\n                    formNavSchemaEntityId=\"syn20692912\"\n                    isWizardMode={true}\n                    token={this.state.token}\n                    formTitle=\"Your Contribution Request\"\n                    formClass=\"contribution-request\"\n                    searchParams={searchParamsProps}\n                  />\n                )\n              }}\n            />\n          </div>\n        </Router>\n      </TokenContext.Provider>\n    )\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport App from './demo/containers/App'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n","module.exports = __webpack_public_path__ + \"static/media/Data2.1104e430.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/columns.94835d60.svg\";","module.exports = __webpack_public_path__ + \"static/media/expand.2b935894.svg\";","module.exports = __webpack_public_path__ + \"static/media/shrink.199a8060.svg\";","module.exports = __webpack_public_path__ + \"static/media/Publication.b630024c.svg\";","module.exports = __webpack_public_path__ + \"static/media/study-active.bc52e72b.svg\";","module.exports = __webpack_public_path__ + \"static/media/study.79d24d74.svg\";","module.exports = __webpack_public_path__ + \"static/media/study-complete.b012f80b.svg\";","module.exports = __webpack_public_path__ + \"static/media/DNA_Two.d8f80972.svg\";","module.exports = __webpack_public_path__ + \"static/media/ToolClinical.ca6b9056.svg\";","module.exports = __webpack_public_path__ + \"static/media/ToolComputational.b3b0a1a1.svg\";","module.exports = __webpack_public_path__ + \"static/media/ToolExperimental.30e19c72.svg\";","module.exports = __webpack_public_path__ + \"static/media/project.28806f03.svg\";","module.exports = __webpack_public_path__ + \"static/media/ctf.4eb55044.svg\";","module.exports = __webpack_public_path__ + \"static/media/dhart.e554b25a.svg\";","module.exports = __webpack_public_path__ + \"static/media/ntap.e9543055.svg\";","module.exports = __webpack_public_path__ + \"static/media/amp-icon-header.71a5e101.svg\";","module.exports = __webpack_public_path__ + \"static/media/amp-icon.3593ecd7.svg\";","module.exports = __webpack_public_path__ + \"static/media/move-icon-header.dd07eaeb.svg\";","module.exports = __webpack_public_path__ + \"static/media/move-icon.2f85f6de.svg\";","module.exports = __webpack_public_path__ + \"static/media/ModelAD-icon-header.d2e9fd8e.svg\";","module.exports = __webpack_public_path__ + \"static/media/ModelAD-icon.e37944bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/resilience-icon-header.595fa5fa.svg\";","module.exports = __webpack_public_path__ + \"static/media/resilience-icon.b1a30ae3.svg\";","module.exports = __webpack_public_path__ + \"static/media/json-form-tool-no-submissions.e64940c0.svg\";","module.exports = __webpack_public_path__ + \"static/media/brain.c6301611.svg\";","module.exports = __webpack_public_path__ + \"static/media/circle.ed6d433a.svg\";","module.exports = __webpack_public_path__ + \"static/media/mouse.7e294e96.svg\";","module.exports = __webpack_public_path__ + \"static/media/resiliencead.7500217a.svg\";"],"sourceRoot":""}